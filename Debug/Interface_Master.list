
Interface_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b50  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08003c5c  08003c5c  00013c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003ed0  08003ed0  00013ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003ed4  08003ed4  00013ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08003ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000fdc  20000074  08003f4c  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001050  08003f4c  00021050  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c81c  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003b3f  00000000  00000000  0003c8b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00005994  00000000  00000000  000403f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000009b0  00000000  00000000  00045d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000008f0  00000000  00000000  00046740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00017fd1  00000000  00000000  00047030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011f99  00000000  00000000  0005f001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0007578c  00000000  00000000  00070f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  000e6726  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001c90  00000000  00000000  000e677c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c44 	.word	0x08003c44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003c44 	.word	0x08003c44

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b510      	push	{r4, lr}
 800015e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000160:	4b0e      	ldr	r3, [pc, #56]	; (800019c <HAL_InitTick+0x40>)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0c      	ldr	r2, [pc, #48]	; (80001a0 <HAL_InitTick+0x44>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 fcee 	bl	8000b54 <HAL_SYSTICK_Config>
 8000178:	b968      	cbnz	r0, 8000196 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017a:	2c0f      	cmp	r4, #15
 800017c:	d901      	bls.n	8000182 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800017e:	2001      	movs	r0, #1
 8000180:	e00a      	b.n	8000198 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000182:	2200      	movs	r2, #0
 8000184:	4621      	mov	r1, r4
 8000186:	f04f 30ff 	mov.w	r0, #4294967295
 800018a:	f000 fca3 	bl	8000ad4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018e:	4b03      	ldr	r3, [pc, #12]	; (800019c <HAL_InitTick+0x40>)
 8000190:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000192:	2000      	movs	r0, #0
 8000194:	e000      	b.n	8000198 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000196:	2001      	movs	r0, #1
}
 8000198:	bd10      	pop	{r4, pc}
 800019a:	bf00      	nop
 800019c:	20000000 	.word	0x20000000
 80001a0:	2000000c 	.word	0x2000000c

080001a4 <HAL_Init>:
{
 80001a4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a6:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
 80001a8:	6813      	ldr	r3, [r2, #0]
 80001aa:	f043 0310 	orr.w	r3, r3, #16
 80001ae:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b0:	2003      	movs	r0, #3
 80001b2:	f000 fc7d 	bl	8000ab0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f002 fc8e 	bl	8002adc <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	6811      	ldr	r1, [r2, #0]
 80001cc:	4b03      	ldr	r3, [pc, #12]	; (80001dc <HAL_IncTick+0x14>)
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200000e4 	.word	0x200000e4
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	200000e4 	.word	0x200000e4

080001ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001ec:	b538      	push	{r3, r4, r5, lr}
 80001ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f0:	f7ff fff6 	bl	80001e0 <HAL_GetTick>
 80001f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001f6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80001fa:	d002      	beq.n	8000202 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <HAL_Delay+0x24>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000202:	f7ff ffed 	bl	80001e0 <HAL_GetTick>
 8000206:	1b40      	subs	r0, r0, r5
 8000208:	42a0      	cmp	r0, r4
 800020a:	d3fa      	bcc.n	8000202 <HAL_Delay+0x16>
  {
  }
}
 800020c:	bd38      	pop	{r3, r4, r5, pc}
 800020e:	bf00      	nop
 8000210:	20000000 	.word	0x20000000

08000214 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig: pointer to a CAN_FilterConfTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef* hcan, CAN_FilterConfTypeDef* sFilterConfig)
{
 8000214:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 8000216:	694b      	ldr	r3, [r1, #20]
 8000218:	2201      	movs	r2, #1
 800021a:	409a      	lsls	r2, r3

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 800021c:	6804      	ldr	r4, [r0, #0]
 800021e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8000222:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8000226:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8000228:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800022c:	f043 0301 	orr.w	r3, r3, #1
 8000230:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
             CAN_FMR_CAN2SB                              ,
             CAN_FMR_FINIT                              |
             (uint32_t)(sFilterConfig->BankNumber << 8U)   );

  /* Filter Deactivation */
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 8000234:	6805      	ldr	r5, [r0, #0]
 8000236:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 800023a:	43d4      	mvns	r4, r2
 800023c:	ea23 0302 	bic.w	r3, r3, r2
 8000240:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c

  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000244:	69cb      	ldr	r3, [r1, #28]
 8000246:	b9c3      	cbnz	r3, 800027a <HAL_CAN_ConfigFilter+0x66>
  {
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8000248:	6805      	ldr	r5, [r0, #0]
 800024a:	f8d5 320c 	ldr.w	r3, [r5, #524]	; 0x20c
 800024e:	4023      	ands	r3, r4
 8000250:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000254:	68cf      	ldr	r7, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000256:	888d      	ldrh	r5, [r1, #4]
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8000258:	6806      	ldr	r6, [r0, #0]
 800025a:	694b      	ldr	r3, [r1, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800025c:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8000260:	3348      	adds	r3, #72	; 0x48
 8000262:	f846 5033 	str.w	r5, [r6, r3, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000266:	688f      	ldr	r7, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000268:	880d      	ldrh	r5, [r1, #0]
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 800026a:	6803      	ldr	r3, [r0, #0]
 800026c:	694e      	ldr	r6, [r1, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800026e:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8000272:	3648      	adds	r6, #72	; 0x48
 8000274:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8000278:	605d      	str	r5, [r3, #4]
  }

  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800027a:	69cb      	ldr	r3, [r1, #28]
 800027c:	2b01      	cmp	r3, #1
 800027e:	d01e      	beq.n	80002be <HAL_CAN_ConfigFilter+0xaa>
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000280:	698b      	ldr	r3, [r1, #24]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d135      	bne.n	80002f2 <HAL_CAN_ConfigFilter+0xde>
  {
    /*Id/Mask mode for the filter*/
    CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 8000286:	6805      	ldr	r5, [r0, #0]
 8000288:	f8d5 3204 	ldr.w	r3, [r5, #516]	; 0x204
 800028c:	4023      	ands	r3, r4
 800028e:	f8c5 3204 	str.w	r3, [r5, #516]	; 0x204
    /*Identifier list mode for the filter*/
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000292:	690b      	ldr	r3, [r1, #16]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d133      	bne.n	8000300 <HAL_CAN_ConfigFilter+0xec>
  {
    /* FIFO 0 assignation for the filter */
    CLEAR_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 8000298:	6803      	ldr	r3, [r0, #0]
 800029a:	f8d3 5214 	ldr.w	r5, [r3, #532]	; 0x214
 800029e:	402c      	ands	r4, r5
 80002a0:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    /* FIFO 1 assignation for the filter */
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 80002a4:	6a0b      	ldr	r3, [r1, #32]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d031      	beq.n	800030e <HAL_CAN_ConfigFilter+0xfa>
  {
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
  }

  /* Leave the initialisation mode for the filter */
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
 80002aa:	6802      	ldr	r2, [r0, #0]
 80002ac:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 80002b0:	f023 0301 	bic.w	r3, r3, #1
 80002b4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  
  /* Return function status */
  return HAL_OK;
}
 80002b8:	2000      	movs	r0, #0
 80002ba:	bcf0      	pop	{r4, r5, r6, r7}
 80002bc:	4770      	bx	lr
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 80002be:	6805      	ldr	r5, [r0, #0]
 80002c0:	f8d5 320c 	ldr.w	r3, [r5, #524]	; 0x20c
 80002c4:	4313      	orrs	r3, r2
 80002c6:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80002ca:	680f      	ldr	r7, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80002cc:	888d      	ldrh	r5, [r1, #4]
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80002ce:	6806      	ldr	r6, [r0, #0]
 80002d0:	694b      	ldr	r3, [r1, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80002d2:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80002d6:	3348      	adds	r3, #72	; 0x48
 80002d8:	f846 5033 	str.w	r5, [r6, r3, lsl #3]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80002dc:	688f      	ldr	r7, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80002de:	898d      	ldrh	r5, [r1, #12]
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80002e0:	6803      	ldr	r3, [r0, #0]
 80002e2:	694e      	ldr	r6, [r1, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80002e4:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80002e8:	3648      	adds	r6, #72	; 0x48
 80002ea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80002ee:	605d      	str	r5, [r3, #4]
 80002f0:	e7c6      	b.n	8000280 <HAL_CAN_ConfigFilter+0x6c>
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 80002f2:	6805      	ldr	r5, [r0, #0]
 80002f4:	f8d5 3204 	ldr.w	r3, [r5, #516]	; 0x204
 80002f8:	4313      	orrs	r3, r2
 80002fa:	f8c5 3204 	str.w	r3, [r5, #516]	; 0x204
 80002fe:	e7c8      	b.n	8000292 <HAL_CAN_ConfigFilter+0x7e>
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 8000300:	6804      	ldr	r4, [r0, #0]
 8000302:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8000306:	4313      	orrs	r3, r2
 8000308:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
 800030c:	e7ca      	b.n	80002a4 <HAL_CAN_ConfigFilter+0x90>
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
 800030e:	6801      	ldr	r1, [r0, #0]
 8000310:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
 8000314:	431a      	orrs	r2, r3
 8000316:	f8c1 221c 	str.w	r2, [r1, #540]	; 0x21c
 800031a:	e7c6      	b.n	80002aa <HAL_CAN_ConfigFilter+0x96>

0800031c <HAL_CAN_Init>:
  if(hcan == NULL)
 800031c:	2800      	cmp	r0, #0
 800031e:	f000 8096 	beq.w	800044e <HAL_CAN_Init+0x132>
{
 8000322:	b538      	push	{r3, r4, r5, lr}
 8000324:	4604      	mov	r4, r0
  if(hcan->State == HAL_CAN_STATE_RESET)
 8000326:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800032a:	b303      	cbz	r3, 800036e <HAL_CAN_Init+0x52>
  hcan->State = HAL_CAN_STATE_BUSY;
 800032c:	2302      	movs	r3, #2
 800032e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000332:	6822      	ldr	r2, [r4, #0]
 8000334:	6813      	ldr	r3, [r2, #0]
 8000336:	f023 0302 	bic.w	r3, r3, #2
 800033a:	6013      	str	r3, [r2, #0]
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800033c:	6822      	ldr	r2, [r4, #0]
 800033e:	6813      	ldr	r3, [r2, #0]
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();   
 8000346:	f7ff ff4b 	bl	80001e0 <HAL_GetTick>
 800034a:	4605      	mov	r5, r0
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 800034c:	6823      	ldr	r3, [r4, #0]
 800034e:	685a      	ldr	r2, [r3, #4]
 8000350:	f012 0f01 	tst.w	r2, #1
 8000354:	d110      	bne.n	8000378 <HAL_CAN_Init+0x5c>
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8000356:	f7ff ff43 	bl	80001e0 <HAL_GetTick>
 800035a:	1b40      	subs	r0, r0, r5
 800035c:	280a      	cmp	r0, #10
 800035e:	d9f5      	bls.n	800034c <HAL_CAN_Init+0x30>
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000360:	2003      	movs	r0, #3
 8000362:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hcan);
 8000366:	2300      	movs	r3, #0
 8000368:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800036c:	bd38      	pop	{r3, r4, r5, pc}
    hcan->Lock = HAL_UNLOCKED;
 800036e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    HAL_CAN_MspInit(hcan);
 8000372:	f001 fce5 	bl	8001d40 <HAL_CAN_MspInit>
 8000376:	e7d9      	b.n	800032c <HAL_CAN_Init+0x10>
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000378:	685a      	ldr	r2, [r3, #4]
 800037a:	f012 0f01 	tst.w	r2, #1
 800037e:	d061      	beq.n	8000444 <HAL_CAN_Init+0x128>
    if (hcan->Init.TTCM == ENABLE)
 8000380:	69a2      	ldr	r2, [r4, #24]
 8000382:	2a01      	cmp	r2, #1
 8000384:	d043      	beq.n	800040e <HAL_CAN_Init+0xf2>
      CLEAR_BIT(tmp_mcr, CAN_MCR_TTCM);
 8000386:	2200      	movs	r2, #0
    if (hcan->Init.ABOM == ENABLE)
 8000388:	69e1      	ldr	r1, [r4, #28]
 800038a:	2901      	cmp	r1, #1
 800038c:	d041      	beq.n	8000412 <HAL_CAN_Init+0xf6>
      CLEAR_BIT(tmp_mcr, CAN_MCR_ABOM);
 800038e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    if (hcan->Init.AWUM == ENABLE)
 8000392:	6a21      	ldr	r1, [r4, #32]
 8000394:	2901      	cmp	r1, #1
 8000396:	d03f      	beq.n	8000418 <HAL_CAN_Init+0xfc>
      CLEAR_BIT(tmp_mcr, CAN_MCR_AWUM);
 8000398:	f022 0220 	bic.w	r2, r2, #32
    if (hcan->Init.NART == ENABLE)
 800039c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800039e:	2901      	cmp	r1, #1
 80003a0:	d03d      	beq.n	800041e <HAL_CAN_Init+0x102>
      CLEAR_BIT(tmp_mcr, CAN_MCR_NART);
 80003a2:	f022 0210 	bic.w	r2, r2, #16
    if (hcan->Init.RFLM == ENABLE)
 80003a6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80003a8:	2901      	cmp	r1, #1
 80003aa:	d03b      	beq.n	8000424 <HAL_CAN_Init+0x108>
      CLEAR_BIT(tmp_mcr, CAN_MCR_RFLM);
 80003ac:	f022 0208 	bic.w	r2, r2, #8
    if (hcan->Init.TXFP == ENABLE)
 80003b0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80003b2:	2901      	cmp	r1, #1
 80003b4:	d039      	beq.n	800042a <HAL_CAN_Init+0x10e>
      CLEAR_BIT(tmp_mcr, CAN_MCR_TXFP);
 80003b6:	f022 0204 	bic.w	r2, r2, #4
    MODIFY_REG(hcan->Instance->MCR,
 80003ba:	6819      	ldr	r1, [r3, #0]
 80003bc:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
 80003c0:	430a      	orrs	r2, r1
 80003c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80003c4:	68a3      	ldr	r3, [r4, #8]
 80003c6:	68e2      	ldr	r2, [r4, #12]
 80003c8:	4313      	orrs	r3, r2
 80003ca:	6922      	ldr	r2, [r4, #16]
 80003cc:	4313      	orrs	r3, r2
 80003ce:	6962      	ldr	r2, [r4, #20]
 80003d0:	4313      	orrs	r3, r2
 80003d2:	6862      	ldr	r2, [r4, #4]
 80003d4:	3a01      	subs	r2, #1
 80003d6:	6821      	ldr	r1, [r4, #0]
 80003d8:	4313      	orrs	r3, r2
 80003da:	61cb      	str	r3, [r1, #28]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80003dc:	6822      	ldr	r2, [r4, #0]
 80003de:	6813      	ldr	r3, [r2, #0]
 80003e0:	f023 0301 	bic.w	r3, r3, #1
 80003e4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();   
 80003e6:	f7ff fefb 	bl	80001e0 <HAL_GetTick>
 80003ea:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 80003ec:	6823      	ldr	r3, [r4, #0]
 80003ee:	685a      	ldr	r2, [r3, #4]
 80003f0:	f012 0f01 	tst.w	r2, #1
 80003f4:	d01c      	beq.n	8000430 <HAL_CAN_Init+0x114>
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 80003f6:	f7ff fef3 	bl	80001e0 <HAL_GetTick>
 80003fa:	1b40      	subs	r0, r0, r5
 80003fc:	280a      	cmp	r0, #10
 80003fe:	d9f5      	bls.n	80003ec <HAL_CAN_Init+0xd0>
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000400:	2003      	movs	r0, #3
 8000402:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        __HAL_UNLOCK(hcan);
 8000406:	2300      	movs	r3, #0
 8000408:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 800040c:	e7ae      	b.n	800036c <HAL_CAN_Init+0x50>
      SET_BIT(tmp_mcr, CAN_MCR_TTCM);
 800040e:	2280      	movs	r2, #128	; 0x80
 8000410:	e7ba      	b.n	8000388 <HAL_CAN_Init+0x6c>
      SET_BIT(tmp_mcr, CAN_MCR_ABOM);
 8000412:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000416:	e7bc      	b.n	8000392 <HAL_CAN_Init+0x76>
      SET_BIT(tmp_mcr, CAN_MCR_AWUM);
 8000418:	f042 0220 	orr.w	r2, r2, #32
 800041c:	e7be      	b.n	800039c <HAL_CAN_Init+0x80>
      SET_BIT(tmp_mcr, CAN_MCR_NART);
 800041e:	f042 0210 	orr.w	r2, r2, #16
 8000422:	e7c0      	b.n	80003a6 <HAL_CAN_Init+0x8a>
      SET_BIT(tmp_mcr, CAN_MCR_RFLM);
 8000424:	f042 0208 	orr.w	r2, r2, #8
 8000428:	e7c2      	b.n	80003b0 <HAL_CAN_Init+0x94>
      SET_BIT(tmp_mcr, CAN_MCR_TXFP);
 800042a:	f042 0204 	orr.w	r2, r2, #4
 800042e:	e7c4      	b.n	80003ba <HAL_CAN_Init+0x9e>
    if(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	f013 0f01 	tst.w	r3, #1
 8000436:	d105      	bne.n	8000444 <HAL_CAN_Init+0x128>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000438:	2000      	movs	r0, #0
 800043a:	6420      	str	r0, [r4, #64]	; 0x40
    hcan->State = HAL_CAN_STATE_READY;
 800043c:	2301      	movs	r3, #1
 800043e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8000442:	e793      	b.n	800036c <HAL_CAN_Init+0x50>
    hcan->State = HAL_CAN_STATE_ERROR;
 8000444:	2304      	movs	r3, #4
 8000446:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800044a:	2001      	movs	r0, #1
 800044c:	e78e      	b.n	800036c <HAL_CAN_Init+0x50>
     return HAL_ERROR;
 800044e:	2001      	movs	r0, #1
}
 8000450:	4770      	bx	lr

08000452 <HAL_CAN_Transmit_IT>:
  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));
  
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8000452:	6802      	ldr	r2, [r0, #0]
 8000454:	6893      	ldr	r3, [r2, #8]
 8000456:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800045a:	d108      	bne.n	800046e <HAL_CAN_Transmit_IT+0x1c>
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 800045c:	6893      	ldr	r3, [r2, #8]
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 800045e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8000462:	d104      	bne.n	800046e <HAL_CAN_Transmit_IT+0x1c>
     ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2))
 8000464:	6893      	ldr	r3, [r2, #8]
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 8000466:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800046a:	f000 809c 	beq.w	80005a6 <HAL_CAN_Transmit_IT+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hcan);
 800046e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000472:	2b01      	cmp	r3, #1
 8000474:	f000 809c 	beq.w	80005b0 <HAL_CAN_Transmit_IT+0x15e>
{
 8000478:	b4f0      	push	{r4, r5, r6, r7}
    __HAL_LOCK(hcan);
 800047a:	2301      	movs	r3, #1
 800047c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    
    /* Select one empty transmit mailbox */
    if(HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 8000480:	6893      	ldr	r3, [r2, #8]
 8000482:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8000486:	d105      	bne.n	8000494 <HAL_CAN_Transmit_IT+0x42>
    {
      transmitmailbox = CAN_TXMAILBOX_0;
    }
    else if(HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME1))
 8000488:	6893      	ldr	r3, [r2, #8]
 800048a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800048e:	d05b      	beq.n	8000548 <HAL_CAN_Transmit_IT+0xf6>
    {
      transmitmailbox = CAN_TXMAILBOX_1;
 8000490:	2301      	movs	r3, #1
 8000492:	e000      	b.n	8000496 <HAL_CAN_Transmit_IT+0x44>
      transmitmailbox = CAN_TXMAILBOX_0;
 8000494:	2300      	movs	r3, #0
    {
      transmitmailbox = CAN_TXMAILBOX_2;
    }

    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 8000496:	f103 0118 	add.w	r1, r3, #24
 800049a:	0109      	lsls	r1, r1, #4
 800049c:	5854      	ldr	r4, [r2, r1]
 800049e:	f004 0401 	and.w	r4, r4, #1
 80004a2:	5054      	str	r4, [r2, r1]
    if(hcan->pTxMsg->IDE == CAN_ID_STD)
 80004a4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80004a6:	688a      	ldr	r2, [r1, #8]
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d14f      	bne.n	800054c <HAL_CAN_Transmit_IT+0xfa>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_Pos) | \
 80004ac:	6805      	ldr	r5, [r0, #0]
 80004ae:	f103 0218 	add.w	r2, r3, #24
 80004b2:	0112      	lsls	r2, r2, #4
 80004b4:	58ac      	ldr	r4, [r5, r2]
 80004b6:	680e      	ldr	r6, [r1, #0]
                                                           hcan->pTxMsg->RTR);
 80004b8:	68c9      	ldr	r1, [r1, #12]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_Pos) | \
 80004ba:	ea41 5146 	orr.w	r1, r1, r6, lsl #21
 80004be:	4321      	orrs	r1, r4
 80004c0:	50a9      	str	r1, [r5, r2]
                                                           hcan->pTxMsg->IDE |
                                                           hcan->pTxMsg->RTR);
    }

    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
 80004c2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80004c4:	690a      	ldr	r2, [r1, #16]
 80004c6:	f002 020f 	and.w	r2, r2, #15
 80004ca:	610a      	str	r2, [r1, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 80004cc:	6801      	ldr	r1, [r0, #0]
 80004ce:	f103 0518 	add.w	r5, r3, #24
 80004d2:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 80004d6:	684c      	ldr	r4, [r1, #4]
 80004d8:	f024 040f 	bic.w	r4, r4, #15
 80004dc:	604c      	str	r4, [r1, #4]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 80004de:	6802      	ldr	r2, [r0, #0]
 80004e0:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 80004e4:	6851      	ldr	r1, [r2, #4]
 80004e6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80004e8:	6924      	ldr	r4, [r4, #16]
 80004ea:	4321      	orrs	r1, r4
 80004ec:	6051      	str	r1, [r2, #4]

    /* Set up the data field */
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3U] << CAN_TDL0R_DATA3_Pos) |
 80004ee:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80004f0:	7dcc      	ldrb	r4, [r1, #23]
 80004f2:	7d8a      	ldrb	r2, [r1, #22]
 80004f4:	0412      	lsls	r2, r2, #16
 80004f6:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 80004fa:	7d4c      	ldrb	r4, [r1, #21]
 80004fc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8000500:	7d0c      	ldrb	r4, [r1, #20]
 8000502:	6801      	ldr	r1, [r0, #0]
 8000504:	4322      	orrs	r2, r4
 8000506:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800050a:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
                                                                ((uint32_t)hcan->pTxMsg->Data[2U] << CAN_TDL0R_DATA2_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[1U] << CAN_TDL0R_DATA1_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[0U] << CAN_TDL0R_DATA0_Pos));
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR, ((uint32_t)hcan->pTxMsg->Data[7U] << CAN_TDL0R_DATA3_Pos) |
 800050e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8000510:	7ecc      	ldrb	r4, [r1, #27]
 8000512:	7e8a      	ldrb	r2, [r1, #26]
 8000514:	0412      	lsls	r2, r2, #16
 8000516:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 800051a:	7e4c      	ldrb	r4, [r1, #25]
 800051c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8000520:	7e0c      	ldrb	r4, [r1, #24]
 8000522:	6801      	ldr	r1, [r0, #0]
 8000524:	4322      	orrs	r2, r4
 8000526:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800052a:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
                                                                ((uint32_t)hcan->pTxMsg->Data[6U] << CAN_TDL0R_DATA2_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[5U] << CAN_TDL0R_DATA1_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[4U] << CAN_TDL0R_DATA0_Pos));

    /* Change CAN state */
    switch(hcan->State)
 800052e:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8000532:	b2d2      	uxtb	r2, r2
 8000534:	2a32      	cmp	r2, #50	; 0x32
 8000536:	d02e      	beq.n	8000596 <HAL_CAN_Transmit_IT+0x144>
 8000538:	2a62      	cmp	r2, #98	; 0x62
 800053a:	d030      	beq.n	800059e <HAL_CAN_Transmit_IT+0x14c>
 800053c:	2a22      	cmp	r2, #34	; 0x22
 800053e:	d012      	beq.n	8000566 <HAL_CAN_Transmit_IT+0x114>
          break;
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
          break;
      default: /* HAL_CAN_STATE_READY */
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 8000540:	2212      	movs	r2, #18
 8000542:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
          break;
 8000546:	e011      	b.n	800056c <HAL_CAN_Transmit_IT+0x11a>
      transmitmailbox = CAN_TXMAILBOX_2;
 8000548:	2302      	movs	r3, #2
 800054a:	e7a4      	b.n	8000496 <HAL_CAN_Transmit_IT+0x44>
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 800054c:	6806      	ldr	r6, [r0, #0]
 800054e:	f103 0418 	add.w	r4, r3, #24
 8000552:	0124      	lsls	r4, r4, #4
 8000554:	5935      	ldr	r5, [r6, r4]
 8000556:	684f      	ldr	r7, [r1, #4]
 8000558:	ea42 02c7 	orr.w	r2, r2, r7, lsl #3
                                                           hcan->pTxMsg->RTR);
 800055c:	68c9      	ldr	r1, [r1, #12]
                                                           hcan->pTxMsg->IDE |
 800055e:	430a      	orrs	r2, r1
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 8000560:	432a      	orrs	r2, r5
 8000562:	5132      	str	r2, [r6, r4]
 8000564:	e7ad      	b.n	80004c2 <HAL_CAN_Transmit_IT+0x70>
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8000566:	2242      	movs	r2, #66	; 0x42
 8000568:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    }

    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800056c:	2200      	movs	r2, #0
 800056e:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hcan);
 8000570:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    /* Request transmission */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR |= CAN_TI0R_TXRQ;
 8000574:	6804      	ldr	r4, [r0, #0]
 8000576:	3318      	adds	r3, #24
 8000578:	011b      	lsls	r3, r3, #4
 800057a:	58e1      	ldr	r1, [r4, r3]
 800057c:	f041 0101 	orr.w	r1, r1, #1
 8000580:	50e1      	str	r1, [r4, r3]
    /*  - Enable Error passive Interrupt */
    /*  - Enable Bus-off Interrupt */
    /*  - Enable Last error code Interrupt */
    /*  - Enable Error Interrupt */
    /*  - Enable Transmit mailbox empty Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 8000582:	6801      	ldr	r1, [r0, #0]
 8000584:	694b      	ldr	r3, [r1, #20]
 8000586:	f443 430f 	orr.w	r3, r3, #36608	; 0x8f00
 800058a:	f043 0301 	orr.w	r3, r3, #1
 800058e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_ERROR;
  }

  return HAL_OK;
 8000590:	4610      	mov	r0, r2
}
 8000592:	bcf0      	pop	{r4, r5, r6, r7}
 8000594:	4770      	bx	lr
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8000596:	2252      	movs	r2, #82	; 0x52
 8000598:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
          break;
 800059c:	e7e6      	b.n	800056c <HAL_CAN_Transmit_IT+0x11a>
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 800059e:	2272      	movs	r2, #114	; 0x72
 80005a0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
          break;
 80005a4:	e7e2      	b.n	800056c <HAL_CAN_Transmit_IT+0x11a>
    hcan->State = HAL_CAN_STATE_ERROR;
 80005a6:	2304      	movs	r3, #4
 80005a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80005ac:	2001      	movs	r0, #1
 80005ae:	4770      	bx	lr
    __HAL_LOCK(hcan);
 80005b0:	2002      	movs	r0, #2
}
 80005b2:	4770      	bx	lr

080005b4 <HAL_CAN_Receive_IT>:
{
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));
  
  /* Check if CAN state is not busy for RX FIFO0 */
  if((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||         \
 80005b4:	460b      	mov	r3, r1
 80005b6:	b999      	cbnz	r1, 80005e0 <HAL_CAN_Receive_IT+0x2c>
 80005b8:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80005bc:	b2d2      	uxtb	r2, r2
 80005be:	2a22      	cmp	r2, #34	; 0x22
 80005c0:	d07c      	beq.n	80006bc <HAL_CAN_Receive_IT+0x108>
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 80005c2:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80005c6:	b2d2      	uxtb	r2, r2
  if((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||         \
 80005c8:	2a42      	cmp	r2, #66	; 0x42
 80005ca:	d079      	beq.n	80006c0 <HAL_CAN_Receive_IT+0x10c>
                                   (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 80005cc:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80005d0:	b2d2      	uxtb	r2, r2
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 80005d2:	2a62      	cmp	r2, #98	; 0x62
 80005d4:	d076      	beq.n	80006c4 <HAL_CAN_Receive_IT+0x110>
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 80005d6:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80005da:	b2d2      	uxtb	r2, r2
                                   (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 80005dc:	2a72      	cmp	r2, #114	; 0x72
 80005de:	d073      	beq.n	80006c8 <HAL_CAN_Receive_IT+0x114>
  {
    return HAL_BUSY;
  }

  /* Check if CAN state is not busy for RX FIFO1 */
  if((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||         \
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d016      	beq.n	8000612 <HAL_CAN_Receive_IT+0x5e>
  {
    return HAL_BUSY;
  }

  /* Process locked */
  __HAL_LOCK(hcan);
 80005e4:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80005e8:	2a01      	cmp	r2, #1
 80005ea:	d075      	beq.n	80006d8 <HAL_CAN_Receive_IT+0x124>
{
 80005ec:	b410      	push	{r4}
  __HAL_LOCK(hcan);
 80005ee:	2201      	movs	r2, #1
 80005f0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Change CAN state */
  if(FIFONumber == CAN_FIFO0)
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d141      	bne.n	800067c <HAL_CAN_Receive_IT+0xc8>
  {
    switch(hcan->State)
 80005f8:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80005fc:	b2d2      	uxtb	r2, r2
 80005fe:	2a32      	cmp	r2, #50	; 0x32
 8000600:	d034      	beq.n	800066c <HAL_CAN_Receive_IT+0xb8>
 8000602:	2a52      	cmp	r2, #82	; 0x52
 8000604:	d036      	beq.n	8000674 <HAL_CAN_Receive_IT+0xc0>
 8000606:	2a12      	cmp	r2, #18
 8000608:	d019      	beq.n	800063e <HAL_CAN_Receive_IT+0x8a>
        break;
      case(HAL_CAN_STATE_BUSY_TX_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
        break;
      default: /* HAL_CAN_STATE_READY */
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 800060a:	2222      	movs	r2, #34	; 0x22
 800060c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
        break;
 8000610:	e018      	b.n	8000644 <HAL_CAN_Receive_IT+0x90>
  if((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||         \
 8000612:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8000616:	b2d2      	uxtb	r2, r2
 8000618:	2a32      	cmp	r2, #50	; 0x32
 800061a:	d057      	beq.n	80006cc <HAL_CAN_Receive_IT+0x118>
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 800061c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8000620:	b2d2      	uxtb	r2, r2
  if((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||         \
 8000622:	2a52      	cmp	r2, #82	; 0x52
 8000624:	d054      	beq.n	80006d0 <HAL_CAN_Receive_IT+0x11c>
                                   (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8000626:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800062a:	b2d2      	uxtb	r2, r2
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 800062c:	2a62      	cmp	r2, #98	; 0x62
 800062e:	d051      	beq.n	80006d4 <HAL_CAN_Receive_IT+0x120>
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 8000630:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8000634:	b2d2      	uxtb	r2, r2
                                   (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8000636:	2a72      	cmp	r2, #114	; 0x72
 8000638:	d1d4      	bne.n	80005e4 <HAL_CAN_Receive_IT+0x30>
    return HAL_BUSY;
 800063a:	2002      	movs	r0, #2
 800063c:	4770      	bx	lr
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 800063e:	2242      	movs	r2, #66	; 0x42
 8000640:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
        break;
    }
  }
  /* Set CAN error code to none */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000644:	2100      	movs	r1, #0
 8000646:	6401      	str	r1, [r0, #64]	; 0x40
  /*  - Enable Error passive Interrupt */
  /*  - Enable Bus-off Interrupt */
  /*  - Enable Last error code Interrupt */
  /*  - Enable Error Interrupt */
  /*  - Enable Transmit mailbox empty Interrupt */
  __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 8000648:	6804      	ldr	r4, [r0, #0]
 800064a:	6962      	ldr	r2, [r4, #20]
 800064c:	f442 420f 	orr.w	r2, r2, #36608	; 0x8f00
 8000650:	f042 0201 	orr.w	r2, r2, #1
 8000654:	6162      	str	r2, [r4, #20]
                            CAN_IT_LEC |
                            CAN_IT_ERR |
                            CAN_IT_TME  );
  
   /* Process unlocked */
   __HAL_UNLOCK(hcan);
 8000656:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d

  if(FIFONumber == CAN_FIFO0)
 800065a:	bb43      	cbnz	r3, 80006ae <HAL_CAN_Receive_IT+0xfa>
  {
    /* Enable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 800065c:	6801      	ldr	r1, [r0, #0]
 800065e:	694a      	ldr	r2, [r1, #20]
 8000660:	f042 020a 	orr.w	r2, r2, #10
 8000664:	614a      	str	r2, [r1, #20]
    /* Enable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
  }

  /* Return function status */
  return HAL_OK;
 8000666:	4618      	mov	r0, r3
}
 8000668:	bc10      	pop	{r4}
 800066a:	4770      	bx	lr
        hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 800066c:	2262      	movs	r2, #98	; 0x62
 800066e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
        break;
 8000672:	e7e7      	b.n	8000644 <HAL_CAN_Receive_IT+0x90>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8000674:	2272      	movs	r2, #114	; 0x72
 8000676:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
        break;
 800067a:	e7e3      	b.n	8000644 <HAL_CAN_Receive_IT+0x90>
    switch(hcan->State)
 800067c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	2a22      	cmp	r2, #34	; 0x22
 8000684:	d00b      	beq.n	800069e <HAL_CAN_Receive_IT+0xea>
 8000686:	2a42      	cmp	r2, #66	; 0x42
 8000688:	d00d      	beq.n	80006a6 <HAL_CAN_Receive_IT+0xf2>
 800068a:	2a12      	cmp	r2, #18
 800068c:	d003      	beq.n	8000696 <HAL_CAN_Receive_IT+0xe2>
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 800068e:	2232      	movs	r2, #50	; 0x32
 8000690:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
        break;
 8000694:	e7d6      	b.n	8000644 <HAL_CAN_Receive_IT+0x90>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8000696:	2252      	movs	r2, #82	; 0x52
 8000698:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
        break;
 800069c:	e7d2      	b.n	8000644 <HAL_CAN_Receive_IT+0x90>
        hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 800069e:	2262      	movs	r2, #98	; 0x62
 80006a0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
        break;
 80006a4:	e7ce      	b.n	8000644 <HAL_CAN_Receive_IT+0x90>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 80006a6:	2272      	movs	r2, #114	; 0x72
 80006a8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
        break;
 80006ac:	e7ca      	b.n	8000644 <HAL_CAN_Receive_IT+0x90>
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 80006ae:	6802      	ldr	r2, [r0, #0]
 80006b0:	6953      	ldr	r3, [r2, #20]
 80006b2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80006b6:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 80006b8:	2000      	movs	r0, #0
 80006ba:	e7d5      	b.n	8000668 <HAL_CAN_Receive_IT+0xb4>
    return HAL_BUSY;
 80006bc:	2002      	movs	r0, #2
 80006be:	4770      	bx	lr
 80006c0:	2002      	movs	r0, #2
 80006c2:	4770      	bx	lr
 80006c4:	2002      	movs	r0, #2
 80006c6:	4770      	bx	lr
 80006c8:	2002      	movs	r0, #2
 80006ca:	4770      	bx	lr
    return HAL_BUSY;
 80006cc:	2002      	movs	r0, #2
 80006ce:	4770      	bx	lr
 80006d0:	2002      	movs	r0, #2
 80006d2:	4770      	bx	lr
 80006d4:	2002      	movs	r0, #2
 80006d6:	4770      	bx	lr
  __HAL_LOCK(hcan);
 80006d8:	2002      	movs	r0, #2
}
 80006da:	4770      	bx	lr

080006dc <HAL_CAN_TxCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcan);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxCpltCallback can be implemented in the user file
   */
}
 80006dc:	4770      	bx	lr

080006de <CAN_Transmit_IT>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
static HAL_StatusTypeDef CAN_Transmit_IT(CAN_HandleTypeDef* hcan)
{
 80006de:	b508      	push	{r3, lr}
  /* Disable Transmit mailbox empty Interrupt */
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 80006e0:	6802      	ldr	r2, [r0, #0]
 80006e2:	6953      	ldr	r3, [r2, #20]
 80006e4:	f023 0301 	bic.w	r3, r3, #1
 80006e8:	6153      	str	r3, [r2, #20]
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 80006ea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	2b12      	cmp	r3, #18
 80006f2:	d00c      	beq.n	800070e <CAN_Transmit_IT+0x30>
                               CAN_IT_LEC |
                               CAN_IT_ERR);
  }

  /* Change CAN state */
  switch(hcan->State)
 80006f4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	2b52      	cmp	r3, #82	; 0x52
 80006fc:	d014      	beq.n	8000728 <CAN_Transmit_IT+0x4a>
 80006fe:	2b72      	cmp	r3, #114	; 0x72
 8000700:	d016      	beq.n	8000730 <CAN_Transmit_IT+0x52>
 8000702:	2b42      	cmp	r3, #66	; 0x42
 8000704:	d009      	beq.n	800071a <CAN_Transmit_IT+0x3c>
      break;
    case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
      hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
      break;
    default: /* HAL_CAN_STATE_BUSY_TX */
      hcan->State = HAL_CAN_STATE_READY;
 8000706:	2301      	movs	r3, #1
 8000708:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
      break;
 800070c:	e008      	b.n	8000720 <CAN_Transmit_IT+0x42>
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 800070e:	6802      	ldr	r2, [r0, #0]
 8000710:	6953      	ldr	r3, [r2, #20]
 8000712:	f423 430f 	bic.w	r3, r3, #36608	; 0x8f00
 8000716:	6153      	str	r3, [r2, #20]
 8000718:	e7ec      	b.n	80006f4 <CAN_Transmit_IT+0x16>
      hcan->State = HAL_CAN_STATE_BUSY_RX0;
 800071a:	2322      	movs	r3, #34	; 0x22
 800071c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  }

  /* Transmission complete callback */ 
  HAL_CAN_TxCpltCallback(hcan);
 8000720:	f7ff ffdc 	bl	80006dc <HAL_CAN_TxCpltCallback>
  
  return HAL_OK;
}
 8000724:	2000      	movs	r0, #0
 8000726:	bd08      	pop	{r3, pc}
      hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8000728:	2332      	movs	r3, #50	; 0x32
 800072a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
      break;
 800072e:	e7f7      	b.n	8000720 <CAN_Transmit_IT+0x42>
      hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8000730:	2362      	movs	r3, #98	; 0x62
 8000732:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
      break;
 8000736:	e7f3      	b.n	8000720 <CAN_Transmit_IT+0x42>

08000738 <HAL_CAN_RxCpltCallback>:
}
 8000738:	4770      	bx	lr

0800073a <CAN_Receive_IT>:
  * @param  FIFONumber: Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 800073a:	b510      	push	{r4, lr}
  uint32_t tmp1 = 0U;
  CanRxMsgTypeDef* pRxMsg = NULL;

  /* Set RxMsg pointer */
  if(FIFONumber == CAN_FIFO0)
 800073c:	460b      	mov	r3, r1
 800073e:	2900      	cmp	r1, #0
 8000740:	d17f      	bne.n	8000842 <CAN_Receive_IT+0x108>
  {
    pRxMsg = hcan->pRxMsg;
 8000742:	6b42      	ldr	r2, [r0, #52]	; 0x34
  {
    pRxMsg = hcan->pRx1Msg;
  }

  /* Get the Id */
  pRxMsg->IDE = (uint8_t)0x04U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000744:	6804      	ldr	r4, [r0, #0]
 8000746:	f103 011b 	add.w	r1, r3, #27
 800074a:	0109      	lsls	r1, r1, #4
 800074c:	5861      	ldr	r1, [r4, r1]
 800074e:	f001 0104 	and.w	r1, r1, #4
 8000752:	6091      	str	r1, [r2, #8]
  if (pRxMsg->IDE == CAN_ID_STD)
 8000754:	2900      	cmp	r1, #0
 8000756:	d176      	bne.n	8000846 <CAN_Receive_IT+0x10c>
  {
    pRxMsg->StdId = 0x000007FFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 21U);
 8000758:	6804      	ldr	r4, [r0, #0]
 800075a:	f103 011b 	add.w	r1, r3, #27
 800075e:	0109      	lsls	r1, r1, #4
 8000760:	5861      	ldr	r1, [r4, r1]
 8000762:	0d49      	lsrs	r1, r1, #21
 8000764:	6011      	str	r1, [r2, #0]
  else
  {
    pRxMsg->ExtId = 0x1FFFFFFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3U);
  }
  
  pRxMsg->RTR = (uint8_t)0x02U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000766:	6804      	ldr	r4, [r0, #0]
 8000768:	f103 011b 	add.w	r1, r3, #27
 800076c:	0109      	lsls	r1, r1, #4
 800076e:	5864      	ldr	r4, [r4, r1]
 8000770:	f004 0402 	and.w	r4, r4, #2
 8000774:	60d4      	str	r4, [r2, #12]
  /* Get the DLC */
  pRxMsg->DLC = (uint8_t)0x0FU & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 8000776:	6804      	ldr	r4, [r0, #0]
 8000778:	440c      	add	r4, r1
 800077a:	6864      	ldr	r4, [r4, #4]
 800077c:	f004 040f 	and.w	r4, r4, #15
 8000780:	6114      	str	r4, [r2, #16]
  /* Get the FIFONumber */
  pRxMsg->FIFONumber = FIFONumber;
 8000782:	6213      	str	r3, [r2, #32]
  /* Get the FMI */
  pRxMsg->FMI = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8U);
 8000784:	6804      	ldr	r4, [r0, #0]
 8000786:	4421      	add	r1, r4
 8000788:	6849      	ldr	r1, [r1, #4]
 800078a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800078e:	61d1      	str	r1, [r2, #28]
  /* Get the data field */
  pRxMsg->Data[0] = (uint8_t)0xFFU & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 8000790:	6801      	ldr	r1, [r0, #0]
 8000792:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8000796:	f8d1 11b8 	ldr.w	r1, [r1, #440]	; 0x1b8
 800079a:	7511      	strb	r1, [r2, #20]
  pRxMsg->Data[1] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8U);
 800079c:	6801      	ldr	r1, [r0, #0]
 800079e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80007a2:	f8d1 11b8 	ldr.w	r1, [r1, #440]	; 0x1b8
 80007a6:	0a09      	lsrs	r1, r1, #8
 80007a8:	7551      	strb	r1, [r2, #21]
  pRxMsg->Data[2] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16U);
 80007aa:	6801      	ldr	r1, [r0, #0]
 80007ac:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80007b0:	f8d1 11b8 	ldr.w	r1, [r1, #440]	; 0x1b8
 80007b4:	0c09      	lsrs	r1, r1, #16
 80007b6:	7591      	strb	r1, [r2, #22]
  pRxMsg->Data[3] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24U);
 80007b8:	6801      	ldr	r1, [r0, #0]
 80007ba:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80007be:	f8d1 11b8 	ldr.w	r1, [r1, #440]	; 0x1b8
 80007c2:	0e09      	lsrs	r1, r1, #24
 80007c4:	75d1      	strb	r1, [r2, #23]
  pRxMsg->Data[4] = (uint8_t)0xFFU & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
 80007c6:	6801      	ldr	r1, [r0, #0]
 80007c8:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80007cc:	f8d1 11bc 	ldr.w	r1, [r1, #444]	; 0x1bc
 80007d0:	7611      	strb	r1, [r2, #24]
  pRxMsg->Data[5] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8U);
 80007d2:	6801      	ldr	r1, [r0, #0]
 80007d4:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80007d8:	f8d1 11bc 	ldr.w	r1, [r1, #444]	; 0x1bc
 80007dc:	0a09      	lsrs	r1, r1, #8
 80007de:	7651      	strb	r1, [r2, #25]
  pRxMsg->Data[6] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 16U);
 80007e0:	6801      	ldr	r1, [r0, #0]
 80007e2:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80007e6:	f8d1 11bc 	ldr.w	r1, [r1, #444]	; 0x1bc
 80007ea:	0c09      	lsrs	r1, r1, #16
 80007ec:	7691      	strb	r1, [r2, #26]
  pRxMsg->Data[7] = (uint8_t)0xFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 24U);
 80007ee:	6801      	ldr	r1, [r0, #0]
 80007f0:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80007f4:	f8d1 11bc 	ldr.w	r1, [r1, #444]	; 0x1bc
 80007f8:	0e09      	lsrs	r1, r1, #24
 80007fa:	76d1      	strb	r1, [r2, #27]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 80007fc:	bb5b      	cbnz	r3, 8000856 <CAN_Receive_IT+0x11c>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 80007fe:	6802      	ldr	r2, [r0, #0]
 8000800:	2120      	movs	r1, #32
 8000802:	60d1      	str	r1, [r2, #12]
    
    /* Disable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 8000804:	6801      	ldr	r1, [r0, #0]
 8000806:	694a      	ldr	r2, [r1, #20]
 8000808:	f022 020a 	bic.w	r2, r2, #10
 800080c:	614a      	str	r2, [r1, #20]
    
    /* Disable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
  }

  tmp1 = hcan->State;
 800080e:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8000812:	b2d2      	uxtb	r2, r2
  if((tmp1 == HAL_CAN_STATE_BUSY_RX0) || (tmp1 == HAL_CAN_STATE_BUSY_RX1))
 8000814:	2a22      	cmp	r2, #34	; 0x22
 8000816:	d001      	beq.n	800081c <CAN_Receive_IT+0xe2>
 8000818:	2a32      	cmp	r2, #50	; 0x32
 800081a:	d104      	bne.n	8000826 <CAN_Receive_IT+0xec>
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 800081c:	6801      	ldr	r1, [r0, #0]
 800081e:	694a      	ldr	r2, [r1, #20]
 8000820:	f422 420f 	bic.w	r2, r2, #36608	; 0x8f00
 8000824:	614a      	str	r2, [r1, #20]
                               CAN_IT_LEC |
                               CAN_IT_ERR);
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
 8000826:	bb73      	cbnz	r3, 8000886 <CAN_Receive_IT+0x14c>
  {
    switch(hcan->State)
 8000828:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b62      	cmp	r3, #98	; 0x62
 8000830:	d021      	beq.n	8000876 <CAN_Receive_IT+0x13c>
 8000832:	2b72      	cmp	r3, #114	; 0x72
 8000834:	d023      	beq.n	800087e <CAN_Receive_IT+0x144>
 8000836:	2b42      	cmp	r3, #66	; 0x42
 8000838:	d016      	beq.n	8000868 <CAN_Receive_IT+0x12e>
        break;
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
        break;
      default: /* HAL_CAN_STATE_BUSY_RX0 */
        hcan->State = HAL_CAN_STATE_READY;
 800083a:	2301      	movs	r3, #1
 800083c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        break;
 8000840:	e015      	b.n	800086e <CAN_Receive_IT+0x134>
    pRxMsg = hcan->pRx1Msg;
 8000842:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000844:	e77e      	b.n	8000744 <CAN_Receive_IT+0xa>
    pRxMsg->ExtId = 0x1FFFFFFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3U);
 8000846:	6804      	ldr	r4, [r0, #0]
 8000848:	f103 011b 	add.w	r1, r3, #27
 800084c:	0109      	lsls	r1, r1, #4
 800084e:	5861      	ldr	r1, [r4, r1]
 8000850:	08c9      	lsrs	r1, r1, #3
 8000852:	6051      	str	r1, [r2, #4]
 8000854:	e787      	b.n	8000766 <CAN_Receive_IT+0x2c>
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 8000856:	6802      	ldr	r2, [r0, #0]
 8000858:	2120      	movs	r1, #32
 800085a:	6111      	str	r1, [r2, #16]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 800085c:	6801      	ldr	r1, [r0, #0]
 800085e:	694a      	ldr	r2, [r1, #20]
 8000860:	f022 0250 	bic.w	r2, r2, #80	; 0x50
 8000864:	614a      	str	r2, [r1, #20]
 8000866:	e7d2      	b.n	800080e <CAN_Receive_IT+0xd4>
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 8000868:	2312      	movs	r3, #18
 800086a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        break;
    }
  }

  /* Receive complete callback */ 
  HAL_CAN_RxCpltCallback(hcan);
 800086e:	f7ff ff63 	bl	8000738 <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
}
 8000872:	2000      	movs	r0, #0
 8000874:	bd10      	pop	{r4, pc}
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8000876:	2332      	movs	r3, #50	; 0x32
 8000878:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        break;
 800087c:	e7f7      	b.n	800086e <CAN_Receive_IT+0x134>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 800087e:	2352      	movs	r3, #82	; 0x52
 8000880:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        break;
 8000884:	e7f3      	b.n	800086e <CAN_Receive_IT+0x134>
    switch(hcan->State)
 8000886:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2b62      	cmp	r3, #98	; 0x62
 800088e:	d00b      	beq.n	80008a8 <CAN_Receive_IT+0x16e>
 8000890:	2b72      	cmp	r3, #114	; 0x72
 8000892:	d00d      	beq.n	80008b0 <CAN_Receive_IT+0x176>
 8000894:	2b52      	cmp	r3, #82	; 0x52
 8000896:	d003      	beq.n	80008a0 <CAN_Receive_IT+0x166>
        hcan->State = HAL_CAN_STATE_READY;
 8000898:	2301      	movs	r3, #1
 800089a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        break;
 800089e:	e7e6      	b.n	800086e <CAN_Receive_IT+0x134>
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 80008a0:	2312      	movs	r3, #18
 80008a2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        break;
 80008a6:	e7e2      	b.n	800086e <CAN_Receive_IT+0x134>
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 80008a8:	2322      	movs	r3, #34	; 0x22
 80008aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        break;
 80008ae:	e7de      	b.n	800086e <CAN_Receive_IT+0x134>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 80008b0:	2342      	movs	r3, #66	; 0x42
 80008b2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        break;
 80008b6:	e7da      	b.n	800086e <CAN_Receive_IT+0x134>

080008b8 <HAL_CAN_IRQHandler>:
{
 80008b8:	b570      	push	{r4, r5, r6, lr}
 80008ba:	4604      	mov	r4, r0
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0);
 80008bc:	6802      	ldr	r2, [r0, #0]
 80008be:	68d5      	ldr	r5, [r2, #12]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV0);
 80008c0:	6953      	ldr	r3, [r2, #20]
  if((tmp1 != 0U) && tmp2)
 80008c2:	f015 0510 	ands.w	r5, r5, #16
 80008c6:	d008      	beq.n	80008da <HAL_CAN_IRQHandler+0x22>
 80008c8:	f003 0308 	and.w	r3, r3, #8
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	f000 80a2 	beq.w	8000a16 <HAL_CAN_IRQHandler+0x15e>
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80008d2:	2310      	movs	r3, #16
 80008d4:	60d3      	str	r3, [r2, #12]
    errorcode |= HAL_CAN_ERROR_FOV0;
 80008d6:	f44f 7500 	mov.w	r5, #512	; 0x200
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV1);
 80008da:	6822      	ldr	r2, [r4, #0]
 80008dc:	6911      	ldr	r1, [r2, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV1);
 80008de:	6953      	ldr	r3, [r2, #20]
 80008e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if((tmp1 != 0U) && tmp2)
 80008e4:	f011 0f10 	tst.w	r1, #16
 80008e8:	d004      	beq.n	80008f4 <HAL_CAN_IRQHandler+0x3c>
 80008ea:	b11b      	cbz	r3, 80008f4 <HAL_CAN_IRQHandler+0x3c>
    errorcode |= HAL_CAN_ERROR_FOV1;
 80008ec:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80008f0:	2310      	movs	r3, #16
 80008f2:	6113      	str	r3, [r2, #16]
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 80008f4:	6823      	ldr	r3, [r4, #0]
 80008f6:	695a      	ldr	r2, [r3, #20]
 80008f8:	f012 0f01 	tst.w	r2, #1
 80008fc:	d028      	beq.n	8000950 <HAL_CAN_IRQHandler+0x98>
    tmp1 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0);
 80008fe:	689e      	ldr	r6, [r3, #8]
    tmp2 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1);
 8000900:	6899      	ldr	r1, [r3, #8]
 8000902:	4a67      	ldr	r2, [pc, #412]	; (8000aa0 <HAL_CAN_IRQHandler+0x1e8>)
 8000904:	400a      	ands	r2, r1
    tmp3 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2);
 8000906:	6899      	ldr	r1, [r3, #8]
 8000908:	f021 416f 	bic.w	r1, r1, #4009754624	; 0xef000000
 800090c:	f421 017e 	bic.w	r1, r1, #16646144	; 0xfe0000
 8000910:	0c09      	lsrs	r1, r1, #16
 8000912:	0409      	lsls	r1, r1, #16
    if(tmp1 || tmp2 || tmp3)  
 8000914:	4863      	ldr	r0, [pc, #396]	; (8000aa4 <HAL_CAN_IRQHandler+0x1ec>)
 8000916:	43b0      	bics	r0, r6
 8000918:	d005      	beq.n	8000926 <HAL_CAN_IRQHandler+0x6e>
 800091a:	4861      	ldr	r0, [pc, #388]	; (8000aa0 <HAL_CAN_IRQHandler+0x1e8>)
 800091c:	4282      	cmp	r2, r0
 800091e:	d002      	beq.n	8000926 <HAL_CAN_IRQHandler+0x6e>
 8000920:	4a61      	ldr	r2, [pc, #388]	; (8000aa8 <HAL_CAN_IRQHandler+0x1f0>)
 8000922:	4291      	cmp	r1, r2
 8000924:	d114      	bne.n	8000950 <HAL_CAN_IRQHandler+0x98>
      tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK0);
 8000926:	6899      	ldr	r1, [r3, #8]
      tmp2 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK1);
 8000928:	689a      	ldr	r2, [r3, #8]
 800092a:	f402 7200 	and.w	r2, r2, #512	; 0x200
      tmp3 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK2);
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	f003 0301 	and.w	r3, r3, #1
      if((tmp1) || (tmp2) || (tmp3))
 8000934:	f011 0f02 	tst.w	r1, #2
 8000938:	d102      	bne.n	8000940 <HAL_CAN_IRQHandler+0x88>
 800093a:	b90a      	cbnz	r2, 8000940 <HAL_CAN_IRQHandler+0x88>
 800093c:	2b00      	cmp	r3, #0
 800093e:	d06c      	beq.n	8000a1a <HAL_CAN_IRQHandler+0x162>
        CAN_Transmit_IT(hcan);
 8000940:	4620      	mov	r0, r4
 8000942:	f7ff fecc 	bl	80006de <CAN_Transmit_IT>
      SET_BIT(hcan->Instance->TSR, CAN_TSR_RQCP0  | CAN_TSR_RQCP1  | CAN_TSR_RQCP2 | \
 8000946:	6822      	ldr	r2, [r4, #0]
 8000948:	6891      	ldr	r1, [r2, #8]
 800094a:	4b58      	ldr	r3, [pc, #352]	; (8000aac <HAL_CAN_IRQHandler+0x1f4>)
 800094c:	430b      	orrs	r3, r1
 800094e:	6093      	str	r3, [r2, #8]
  tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0);
 8000950:	6823      	ldr	r3, [r4, #0]
 8000952:	68da      	ldr	r2, [r3, #12]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0);
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	f003 0302 	and.w	r3, r3, #2
  if((tmp1 != 0U) && tmp2)
 800095a:	f012 0f03 	tst.w	r2, #3
 800095e:	d001      	beq.n	8000964 <HAL_CAN_IRQHandler+0xac>
 8000960:	2b00      	cmp	r3, #0
 8000962:	d15d      	bne.n	8000a20 <HAL_CAN_IRQHandler+0x168>
  tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1);
 8000964:	6823      	ldr	r3, [r4, #0]
 8000966:	691a      	ldr	r2, [r3, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1);
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	f003 0310 	and.w	r3, r3, #16
  if((tmp1 != 0U) && tmp2)
 800096e:	f012 0f03 	tst.w	r2, #3
 8000972:	d001      	beq.n	8000978 <HAL_CAN_IRQHandler+0xc0>
 8000974:	2b00      	cmp	r3, #0
 8000976:	d158      	bne.n	8000a2a <HAL_CAN_IRQHandler+0x172>
  hcan->ErrorCode |= errorcode;
 8000978:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800097a:	431d      	orrs	r5, r3
 800097c:	6425      	str	r5, [r4, #64]	; 0x40
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG);
 800097e:	6823      	ldr	r3, [r4, #0]
 8000980:	6998      	ldr	r0, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG);
 8000982:	695a      	ldr	r2, [r3, #20]
 8000984:	f402 7280 	and.w	r2, r2, #256	; 0x100
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
 8000988:	6959      	ldr	r1, [r3, #20]
 800098a:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
  if(tmp1 && tmp2 && tmp3)
 800098e:	f010 0f01 	tst.w	r0, #1
 8000992:	d005      	beq.n	80009a0 <HAL_CAN_IRQHandler+0xe8>
 8000994:	b122      	cbz	r2, 80009a0 <HAL_CAN_IRQHandler+0xe8>
 8000996:	b119      	cbz	r1, 80009a0 <HAL_CAN_IRQHandler+0xe8>
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 8000998:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800099a:	f042 0201 	orr.w	r2, r2, #1
 800099e:	6422      	str	r2, [r4, #64]	; 0x40
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV);
 80009a0:	6998      	ldr	r0, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV);
 80009a2:	695a      	ldr	r2, [r3, #20]
 80009a4:	f402 7200 	and.w	r2, r2, #512	; 0x200
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR); 
 80009a8:	6959      	ldr	r1, [r3, #20]
 80009aa:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
  if(tmp1 && tmp2 && tmp3)
 80009ae:	f010 0f02 	tst.w	r0, #2
 80009b2:	d005      	beq.n	80009c0 <HAL_CAN_IRQHandler+0x108>
 80009b4:	b122      	cbz	r2, 80009c0 <HAL_CAN_IRQHandler+0x108>
 80009b6:	b119      	cbz	r1, 80009c0 <HAL_CAN_IRQHandler+0x108>
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 80009b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80009ba:	f042 0202 	orr.w	r2, r2, #2
 80009be:	6422      	str	r2, [r4, #64]	; 0x40
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF);
 80009c0:	6998      	ldr	r0, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF);
 80009c2:	695a      	ldr	r2, [r3, #20]
 80009c4:	f402 6280 	and.w	r2, r2, #1024	; 0x400
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);  
 80009c8:	6959      	ldr	r1, [r3, #20]
 80009ca:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
  if(tmp1 && tmp2 && tmp3)
 80009ce:	f010 0f04 	tst.w	r0, #4
 80009d2:	d005      	beq.n	80009e0 <HAL_CAN_IRQHandler+0x128>
 80009d4:	b122      	cbz	r2, 80009e0 <HAL_CAN_IRQHandler+0x128>
 80009d6:	b119      	cbz	r1, 80009e0 <HAL_CAN_IRQHandler+0x128>
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 80009d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80009da:	f042 0204 	orr.w	r2, r2, #4
 80009de:	6422      	str	r2, [r4, #64]	; 0x40
  tmp1 = HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC);
 80009e0:	6998      	ldr	r0, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC);
 80009e2:	695a      	ldr	r2, [r3, #20]
 80009e4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
 80009e8:	6959      	ldr	r1, [r3, #20]
 80009ea:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
  if((!tmp1) && tmp2 && tmp3)
 80009ee:	f010 0f70 	tst.w	r0, #112	; 0x70
 80009f2:	d029      	beq.n	8000a48 <HAL_CAN_IRQHandler+0x190>
 80009f4:	b342      	cbz	r2, 8000a48 <HAL_CAN_IRQHandler+0x190>
 80009f6:	b339      	cbz	r1, 8000a48 <HAL_CAN_IRQHandler+0x190>
    tmp1 = (hcan->Instance->ESR & CAN_ESR_LEC);
 80009f8:	699a      	ldr	r2, [r3, #24]
 80009fa:	f002 0270 	and.w	r2, r2, #112	; 0x70
    switch(tmp1)
 80009fe:	2a40      	cmp	r2, #64	; 0x40
 8000a00:	d033      	beq.n	8000a6a <HAL_CAN_IRQHandler+0x1b2>
 8000a02:	d824      	bhi.n	8000a4e <HAL_CAN_IRQHandler+0x196>
 8000a04:	2a20      	cmp	r2, #32
 8000a06:	d02b      	beq.n	8000a60 <HAL_CAN_IRQHandler+0x1a8>
 8000a08:	2a30      	cmp	r2, #48	; 0x30
 8000a0a:	d113      	bne.n	8000a34 <HAL_CAN_IRQHandler+0x17c>
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 8000a0c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000a0e:	f042 0220 	orr.w	r2, r2, #32
 8000a12:	6422      	str	r2, [r4, #64]	; 0x40
          break;
 8000a14:	e014      	b.n	8000a40 <HAL_CAN_IRQHandler+0x188>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000a16:	461d      	mov	r5, r3
 8000a18:	e75f      	b.n	80008da <HAL_CAN_IRQHandler+0x22>
        errorcode |= HAL_CAN_ERROR_TXFAIL;
 8000a1a:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 8000a1e:	e792      	b.n	8000946 <HAL_CAN_IRQHandler+0x8e>
    CAN_Receive_IT(hcan, CAN_FIFO0);
 8000a20:	2100      	movs	r1, #0
 8000a22:	4620      	mov	r0, r4
 8000a24:	f7ff fe89 	bl	800073a <CAN_Receive_IT>
 8000a28:	e79c      	b.n	8000964 <HAL_CAN_IRQHandler+0xac>
    CAN_Receive_IT(hcan, CAN_FIFO1);
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	4620      	mov	r0, r4
 8000a2e:	f7ff fe84 	bl	800073a <CAN_Receive_IT>
 8000a32:	e7a1      	b.n	8000978 <HAL_CAN_IRQHandler+0xc0>
    switch(tmp1)
 8000a34:	2a10      	cmp	r2, #16
 8000a36:	d103      	bne.n	8000a40 <HAL_CAN_IRQHandler+0x188>
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 8000a38:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000a3a:	f042 0208 	orr.w	r2, r2, #8
 8000a3e:	6422      	str	r2, [r4, #64]	; 0x40
    CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000a40:	699a      	ldr	r2, [r3, #24]
 8000a42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000a46:	619a      	str	r2, [r3, #24]
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 8000a48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a4a:	b9c3      	cbnz	r3, 8000a7e <HAL_CAN_IRQHandler+0x1c6>
}
 8000a4c:	bd70      	pop	{r4, r5, r6, pc}
    switch(tmp1)
 8000a4e:	2a50      	cmp	r2, #80	; 0x50
 8000a50:	d010      	beq.n	8000a74 <HAL_CAN_IRQHandler+0x1bc>
 8000a52:	2a60      	cmp	r2, #96	; 0x60
 8000a54:	d1f4      	bne.n	8000a40 <HAL_CAN_IRQHandler+0x188>
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 8000a56:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a5c:	6422      	str	r2, [r4, #64]	; 0x40
          break;
 8000a5e:	e7ef      	b.n	8000a40 <HAL_CAN_IRQHandler+0x188>
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 8000a60:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000a62:	f042 0210 	orr.w	r2, r2, #16
 8000a66:	6422      	str	r2, [r4, #64]	; 0x40
          break;
 8000a68:	e7ea      	b.n	8000a40 <HAL_CAN_IRQHandler+0x188>
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 8000a6a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a70:	6422      	str	r2, [r4, #64]	; 0x40
          break;
 8000a72:	e7e5      	b.n	8000a40 <HAL_CAN_IRQHandler+0x188>
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 8000a74:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000a76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a7a:	6422      	str	r2, [r4, #64]	; 0x40
          break;
 8000a7c:	e7e0      	b.n	8000a40 <HAL_CAN_IRQHandler+0x188>
    hcan->Instance->MSR = CAN_MSR_ERRI; 
 8000a7e:	6823      	ldr	r3, [r4, #0]
 8000a80:	2204      	movs	r2, #4
 8000a82:	605a      	str	r2, [r3, #4]
    hcan->State = HAL_CAN_STATE_READY;
 8000a84:	2301      	movs	r3, #1
 8000a86:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000a8a:	6822      	ldr	r2, [r4, #0]
 8000a8c:	6953      	ldr	r3, [r2, #20]
 8000a8e:	f423 430f 	bic.w	r3, r3, #36608	; 0x8f00
 8000a92:	f023 035b 	bic.w	r3, r3, #91	; 0x5b
 8000a96:	6153      	str	r3, [r2, #20]
    HAL_CAN_ErrorCallback(hcan);
 8000a98:	4620      	mov	r0, r4
 8000a9a:	f001 fa19 	bl	8001ed0 <HAL_CAN_ErrorCallback>
}
 8000a9e:	e7d5      	b.n	8000a4c <HAL_CAN_IRQHandler+0x194>
 8000aa0:	08000100 	.word	0x08000100
 8000aa4:	04000001 	.word	0x04000001
 8000aa8:	10010000 	.word	0x10010000
 8000aac:	00010509 	.word	0x00010509

08000ab0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab0:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ab2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ab8:	041b      	lsls	r3, r3, #16
 8000aba:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000abc:	0200      	lsls	r0, r0, #8
 8000abe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000acc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ad4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <HAL_NVIC_SetPriority+0x60>)
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ade:	f1c3 0407 	rsb	r4, r3, #7
 8000ae2:	2c04      	cmp	r4, #4
 8000ae4:	bf28      	it	cs
 8000ae6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae8:	1d1d      	adds	r5, r3, #4
 8000aea:	2d06      	cmp	r5, #6
 8000aec:	d918      	bls.n	8000b20 <HAL_NVIC_SetPriority+0x4c>
 8000aee:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	f04f 35ff 	mov.w	r5, #4294967295
 8000af4:	fa05 f404 	lsl.w	r4, r5, r4
 8000af8:	ea21 0104 	bic.w	r1, r1, r4
 8000afc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000afe:	fa05 f303 	lsl.w	r3, r5, r3
 8000b02:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b06:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	db0b      	blt.n	8000b24 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0c:	0109      	lsls	r1, r1, #4
 8000b0e:	b2c9      	uxtb	r1, r1
 8000b10:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000b14:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000b18:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b1c:	bc30      	pop	{r4, r5}
 8000b1e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b20:	2300      	movs	r3, #0
 8000b22:	e7e5      	b.n	8000af0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b24:	f000 000f 	and.w	r0, r0, #15
 8000b28:	0109      	lsls	r1, r1, #4
 8000b2a:	b2c9      	uxtb	r1, r1
 8000b2c:	4b02      	ldr	r3, [pc, #8]	; (8000b38 <HAL_NVIC_SetPriority+0x64>)
 8000b2e:	5419      	strb	r1, [r3, r0]
 8000b30:	e7f4      	b.n	8000b1c <HAL_NVIC_SetPriority+0x48>
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00
 8000b38:	e000ed14 	.word	0xe000ed14

08000b3c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b3c:	f000 021f 	and.w	r2, r0, #31
 8000b40:	0940      	lsrs	r0, r0, #5
 8000b42:	2301      	movs	r3, #1
 8000b44:	4093      	lsls	r3, r2
 8000b46:	4a02      	ldr	r2, [pc, #8]	; (8000b50 <HAL_NVIC_EnableIRQ+0x14>)
 8000b48:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000e100 	.word	0xe000e100

08000b54 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b54:	3801      	subs	r0, #1
 8000b56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b5a:	d20a      	bcs.n	8000b72 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_SYSTICK_Config+0x24>)
 8000b5e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b60:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <HAL_SYSTICK_Config+0x28>)
 8000b62:	21f0      	movs	r1, #240	; 0xf0
 8000b64:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b68:	2000      	movs	r0, #0
 8000b6a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b70:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b72:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000e010 	.word	0xe000e010
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000b80:	2804      	cmp	r0, #4
 8000b82:	d005      	beq.n	8000b90 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000b84:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000b86:	6813      	ldr	r3, [r2, #0]
 8000b88:	f023 0304 	bic.w	r3, r3, #4
 8000b8c:	6013      	str	r3, [r2, #0]
  }
}
 8000b8e:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b90:	4a02      	ldr	r2, [pc, #8]	; (8000b9c <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000b92:	6813      	ldr	r3, [r2, #0]
 8000b94:	f043 0304 	orr.w	r3, r3, #4
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	4770      	bx	lr
 8000b9c:	e000e010 	.word	0xe000e010

08000ba0 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000ba0:	4770      	bx	lr

08000ba2 <HAL_SYSTICK_IRQHandler>:
{
 8000ba2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000ba4:	f7ff fffc 	bl	8000ba0 <HAL_SYSTICK_Callback>
}
 8000ba8:	bd08      	pop	{r3, pc}

08000baa <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000baa:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000bac:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8000bae:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8000bb0:	2401      	movs	r4, #1
 8000bb2:	40b4      	lsls	r4, r6
 8000bb4:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000bb6:	6804      	ldr	r4, [r0, #0]
 8000bb8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000bba:	6843      	ldr	r3, [r0, #4]
 8000bbc:	2b10      	cmp	r3, #16
 8000bbe:	d005      	beq.n	8000bcc <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000bc0:	6803      	ldr	r3, [r0, #0]
 8000bc2:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000bc4:	6803      	ldr	r3, [r0, #0]
 8000bc6:	60da      	str	r2, [r3, #12]
  }
}
 8000bc8:	bc70      	pop	{r4, r5, r6}
 8000bca:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8000bcc:	6803      	ldr	r3, [r0, #0]
 8000bce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000bd0:	6803      	ldr	r3, [r0, #0]
 8000bd2:	60d9      	str	r1, [r3, #12]
 8000bd4:	e7f8      	b.n	8000bc8 <DMA_SetConfig+0x1e>
	...

08000bd8 <HAL_DMA_Init>:
  if(hdma == NULL)
 8000bd8:	2800      	cmp	r0, #0
 8000bda:	d030      	beq.n	8000c3e <HAL_DMA_Init+0x66>
{
 8000bdc:	b410      	push	{r4}
 8000bde:	4603      	mov	r3, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000be0:	6801      	ldr	r1, [r0, #0]
 8000be2:	4a18      	ldr	r2, [pc, #96]	; (8000c44 <HAL_DMA_Init+0x6c>)
 8000be4:	440a      	add	r2, r1
 8000be6:	4818      	ldr	r0, [pc, #96]	; (8000c48 <HAL_DMA_Init+0x70>)
 8000be8:	fba0 0202 	umull	r0, r2, r0, r2
 8000bec:	0912      	lsrs	r2, r2, #4
 8000bee:	0092      	lsls	r2, r2, #2
 8000bf0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000bf2:	4a16      	ldr	r2, [pc, #88]	; (8000c4c <HAL_DMA_Init+0x74>)
 8000bf4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8000bfc:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000bfe:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 8000c02:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8000c06:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c08:	689c      	ldr	r4, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c0a:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c0c:	68dc      	ldr	r4, [r3, #12]
 8000c0e:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c10:	691c      	ldr	r4, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c12:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c14:	695c      	ldr	r4, [r3, #20]
 8000c16:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c18:	699c      	ldr	r4, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c1a:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c1c:	69dc      	ldr	r4, [r3, #28]
 8000c1e:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8000c20:	4302      	orrs	r2, r0
  hdma->Instance->CCR = tmp;
 8000c22:	600a      	str	r2, [r1, #0]
  hdma->XferCpltCallback = NULL;
 8000c24:	2000      	movs	r0, #0
 8000c26:	6298      	str	r0, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000c28:	62d8      	str	r0, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000c2a:	6318      	str	r0, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000c2c:	6358      	str	r0, [r3, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c2e:	6398      	str	r0, [r3, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000c30:	2201      	movs	r2, #1
 8000c32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8000c36:	f883 0020 	strb.w	r0, [r3, #32]
}
 8000c3a:	bc10      	pop	{r4}
 8000c3c:	4770      	bx	lr
    return HAL_ERROR;
 8000c3e:	2001      	movs	r0, #1
}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	bffdfff8 	.word	0xbffdfff8
 8000c48:	cccccccd 	.word	0xcccccccd
 8000c4c:	40020000 	.word	0x40020000

08000c50 <HAL_DMA_Start_IT>:
{
 8000c50:	b538      	push	{r3, r4, r5, lr}
 8000c52:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8000c54:	f890 0020 	ldrb.w	r0, [r0, #32]
 8000c58:	2801      	cmp	r0, #1
 8000c5a:	d031      	beq.n	8000cc0 <HAL_DMA_Start_IT+0x70>
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c62:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 8000c66:	2801      	cmp	r0, #1
 8000c68:	d004      	beq.n	8000c74 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8000c70:	2002      	movs	r0, #2
}
 8000c72:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c74:	2002      	movs	r0, #2
 8000c76:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000c7e:	6825      	ldr	r5, [r4, #0]
 8000c80:	6828      	ldr	r0, [r5, #0]
 8000c82:	f020 0001 	bic.w	r0, r0, #1
 8000c86:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c88:	4620      	mov	r0, r4
 8000c8a:	f7ff ff8e 	bl	8000baa <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8000c8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c90:	b15b      	cbz	r3, 8000caa <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c92:	6822      	ldr	r2, [r4, #0]
 8000c94:	6813      	ldr	r3, [r2, #0]
 8000c96:	f043 030e 	orr.w	r3, r3, #14
 8000c9a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000c9c:	6822      	ldr	r2, [r4, #0]
 8000c9e:	6813      	ldr	r3, [r2, #0]
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	e7e3      	b.n	8000c72 <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000caa:	6822      	ldr	r2, [r4, #0]
 8000cac:	6813      	ldr	r3, [r2, #0]
 8000cae:	f023 0304 	bic.w	r3, r3, #4
 8000cb2:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000cb4:	6822      	ldr	r2, [r4, #0]
 8000cb6:	6813      	ldr	r3, [r2, #0]
 8000cb8:	f043 030a 	orr.w	r3, r3, #10
 8000cbc:	6013      	str	r3, [r2, #0]
 8000cbe:	e7ed      	b.n	8000c9c <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8000cc0:	2002      	movs	r0, #2
 8000cc2:	e7d6      	b.n	8000c72 <HAL_DMA_Start_IT+0x22>

08000cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc4:	b4f0      	push	{r4, r5, r6, r7}
 8000cc6:	b082      	sub	sp, #8
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000cc8:	2500      	movs	r5, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000cca:	462c      	mov	r4, r5
 8000ccc:	e0a3      	b.n	8000e16 <HAL_GPIO_Init+0x152>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cce:	4f7f      	ldr	r7, [pc, #508]	; (8000ecc <HAL_GPIO_Init+0x208>)
 8000cd0:	42bb      	cmp	r3, r7
 8000cd2:	d010      	beq.n	8000cf6 <HAL_GPIO_Init+0x32>
 8000cd4:	d907      	bls.n	8000ce6 <HAL_GPIO_Init+0x22>
 8000cd6:	4f7e      	ldr	r7, [pc, #504]	; (8000ed0 <HAL_GPIO_Init+0x20c>)
 8000cd8:	42bb      	cmp	r3, r7
 8000cda:	d00c      	beq.n	8000cf6 <HAL_GPIO_Init+0x32>
 8000cdc:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000ce0:	42bb      	cmp	r3, r7
 8000ce2:	d008      	beq.n	8000cf6 <HAL_GPIO_Init+0x32>
 8000ce4:	e013      	b.n	8000d0e <HAL_GPIO_Init+0x4a>
 8000ce6:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000cea:	42bb      	cmp	r3, r7
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_Init+0x32>
 8000cee:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 8000cf2:	42bb      	cmp	r3, r7
 8000cf4:	d107      	bne.n	8000d06 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cf6:	688b      	ldr	r3, [r1, #8]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d058      	beq.n	8000dae <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d051      	beq.n	8000da4 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000d00:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d02:	2508      	movs	r5, #8
 8000d04:	e003      	b.n	8000d0e <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000d06:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000d0a:	42bb      	cmp	r3, r7
 8000d0c:	d0f3      	beq.n	8000cf6 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d0e:	2eff      	cmp	r6, #255	; 0xff
 8000d10:	d84f      	bhi.n	8000db2 <HAL_GPIO_Init+0xee>
 8000d12:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000d14:	2eff      	cmp	r6, #255	; 0xff
 8000d16:	d84f      	bhi.n	8000db8 <HAL_GPIO_Init+0xf4>
 8000d18:	00a2      	lsls	r2, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d1a:	f8dc 3000 	ldr.w	r3, [ip]
 8000d1e:	270f      	movs	r7, #15
 8000d20:	4097      	lsls	r7, r2
 8000d22:	ea23 0307 	bic.w	r3, r3, r7
 8000d26:	fa05 f202 	lsl.w	r2, r5, r2
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	f8cc 3000 	str.w	r3, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d30:	684b      	ldr	r3, [r1, #4]
 8000d32:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000d36:	d06d      	beq.n	8000e14 <HAL_GPIO_Init+0x150>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d38:	4b66      	ldr	r3, [pc, #408]	; (8000ed4 <HAL_GPIO_Init+0x210>)
 8000d3a:	699a      	ldr	r2, [r3, #24]
 8000d3c:	f042 0201 	orr.w	r2, r2, #1
 8000d40:	619a      	str	r2, [r3, #24]
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 8000d4c:	08a2      	lsrs	r2, r4, #2
 8000d4e:	1c97      	adds	r7, r2, #2
 8000d50:	4b61      	ldr	r3, [pc, #388]	; (8000ed8 <HAL_GPIO_Init+0x214>)
 8000d52:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000d56:	f004 0703 	and.w	r7, r4, #3
 8000d5a:	00bf      	lsls	r7, r7, #2
 8000d5c:	f04f 0c0f 	mov.w	ip, #15
 8000d60:	fa0c fc07 	lsl.w	ip, ip, r7
 8000d64:	ea23 0c0c 	bic.w	ip, r3, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d68:	4b5c      	ldr	r3, [pc, #368]	; (8000edc <HAL_GPIO_Init+0x218>)
 8000d6a:	4298      	cmp	r0, r3
 8000d6c:	d02a      	beq.n	8000dc4 <HAL_GPIO_Init+0x100>
 8000d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d72:	4298      	cmp	r0, r3
 8000d74:	f000 808a 	beq.w	8000e8c <HAL_GPIO_Init+0x1c8>
 8000d78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	f000 8087 	beq.w	8000e90 <HAL_GPIO_Init+0x1cc>
 8000d82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d86:	4298      	cmp	r0, r3
 8000d88:	d01a      	beq.n	8000dc0 <HAL_GPIO_Init+0xfc>
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	e01b      	b.n	8000dc6 <HAL_GPIO_Init+0x102>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d8e:	68cd      	ldr	r5, [r1, #12]
          break;
 8000d90:	e7bd      	b.n	8000d0e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d92:	68cd      	ldr	r5, [r1, #12]
 8000d94:	3504      	adds	r5, #4
          break;
 8000d96:	e7ba      	b.n	8000d0e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d98:	68cd      	ldr	r5, [r1, #12]
 8000d9a:	3508      	adds	r5, #8
          break;
 8000d9c:	e7b7      	b.n	8000d0e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d9e:	68cd      	ldr	r5, [r1, #12]
 8000da0:	350c      	adds	r5, #12
          break;
 8000da2:	e7b4      	b.n	8000d0e <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8000da4:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000da6:	2508      	movs	r5, #8
 8000da8:	e7b1      	b.n	8000d0e <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000daa:	2500      	movs	r5, #0
 8000dac:	e7af      	b.n	8000d0e <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dae:	2504      	movs	r5, #4
 8000db0:	e7ad      	b.n	8000d0e <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000db2:	f100 0c04 	add.w	ip, r0, #4
 8000db6:	e7ad      	b.n	8000d14 <HAL_GPIO_Init+0x50>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000db8:	f1a4 0208 	sub.w	r2, r4, #8
 8000dbc:	0092      	lsls	r2, r2, #2
 8000dbe:	e7ac      	b.n	8000d1a <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e000      	b.n	8000dc6 <HAL_GPIO_Init+0x102>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	40bb      	lsls	r3, r7
 8000dc8:	ea43 030c 	orr.w	r3, r3, ip
        AFIO->EXTICR[position >> 2U] = temp;
 8000dcc:	3202      	adds	r2, #2
 8000dce:	4f42      	ldr	r7, [pc, #264]	; (8000ed8 <HAL_GPIO_Init+0x214>)
 8000dd0:	f847 3022 	str.w	r3, [r7, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dd4:	684b      	ldr	r3, [r1, #4]
 8000dd6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000dda:	d05b      	beq.n	8000e94 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ddc:	4a40      	ldr	r2, [pc, #256]	; (8000ee0 <HAL_GPIO_Init+0x21c>)
 8000dde:	6813      	ldr	r3, [r2, #0]
 8000de0:	4333      	orrs	r3, r6
 8000de2:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000de4:	684b      	ldr	r3, [r1, #4]
 8000de6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000dea:	d059      	beq.n	8000ea0 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dec:	4a3c      	ldr	r2, [pc, #240]	; (8000ee0 <HAL_GPIO_Init+0x21c>)
 8000dee:	6853      	ldr	r3, [r2, #4]
 8000df0:	4333      	orrs	r3, r6
 8000df2:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000df4:	684b      	ldr	r3, [r1, #4]
 8000df6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000dfa:	d057      	beq.n	8000eac <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dfc:	4a38      	ldr	r2, [pc, #224]	; (8000ee0 <HAL_GPIO_Init+0x21c>)
 8000dfe:	6893      	ldr	r3, [r2, #8]
 8000e00:	4333      	orrs	r3, r6
 8000e02:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e04:	684b      	ldr	r3, [r1, #4]
 8000e06:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8000e0a:	d055      	beq.n	8000eb8 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e0c:	4a34      	ldr	r2, [pc, #208]	; (8000ee0 <HAL_GPIO_Init+0x21c>)
 8000e0e:	68d3      	ldr	r3, [r2, #12]
 8000e10:	431e      	orrs	r6, r3
 8000e12:	60d6      	str	r6, [r2, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000e14:	3401      	adds	r4, #1
 8000e16:	2c0f      	cmp	r4, #15
 8000e18:	d854      	bhi.n	8000ec4 <HAL_GPIO_Init+0x200>
    ioposition = (0x01U << position);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1e:	680b      	ldr	r3, [r1, #0]
 8000e20:	ea03 0602 	and.w	r6, r3, r2
    if (iocurrent == ioposition)
 8000e24:	ea32 0303 	bics.w	r3, r2, r3
 8000e28:	d1f4      	bne.n	8000e14 <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 8000e2a:	684b      	ldr	r3, [r1, #4]
 8000e2c:	2b12      	cmp	r3, #18
 8000e2e:	f63f af4e 	bhi.w	8000cce <HAL_GPIO_Init+0xa>
 8000e32:	2b12      	cmp	r3, #18
 8000e34:	f63f af6b 	bhi.w	8000d0e <HAL_GPIO_Init+0x4a>
 8000e38:	a701      	add	r7, pc, #4	; (adr r7, 8000e40 <HAL_GPIO_Init+0x17c>)
 8000e3a:	f857 f023 	ldr.w	pc, [r7, r3, lsl #2]
 8000e3e:	bf00      	nop
 8000e40:	08000cf7 	.word	0x08000cf7
 8000e44:	08000d8f 	.word	0x08000d8f
 8000e48:	08000d99 	.word	0x08000d99
 8000e4c:	08000dab 	.word	0x08000dab
 8000e50:	08000d0f 	.word	0x08000d0f
 8000e54:	08000d0f 	.word	0x08000d0f
 8000e58:	08000d0f 	.word	0x08000d0f
 8000e5c:	08000d0f 	.word	0x08000d0f
 8000e60:	08000d0f 	.word	0x08000d0f
 8000e64:	08000d0f 	.word	0x08000d0f
 8000e68:	08000d0f 	.word	0x08000d0f
 8000e6c:	08000d0f 	.word	0x08000d0f
 8000e70:	08000d0f 	.word	0x08000d0f
 8000e74:	08000d0f 	.word	0x08000d0f
 8000e78:	08000d0f 	.word	0x08000d0f
 8000e7c:	08000d0f 	.word	0x08000d0f
 8000e80:	08000d0f 	.word	0x08000d0f
 8000e84:	08000d93 	.word	0x08000d93
 8000e88:	08000d9f 	.word	0x08000d9f
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e79a      	b.n	8000dc6 <HAL_GPIO_Init+0x102>
 8000e90:	2302      	movs	r3, #2
 8000e92:	e798      	b.n	8000dc6 <HAL_GPIO_Init+0x102>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e94:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <HAL_GPIO_Init+0x21c>)
 8000e96:	6813      	ldr	r3, [r2, #0]
 8000e98:	ea23 0306 	bic.w	r3, r3, r6
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	e7a1      	b.n	8000de4 <HAL_GPIO_Init+0x120>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ea0:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <HAL_GPIO_Init+0x21c>)
 8000ea2:	6853      	ldr	r3, [r2, #4]
 8000ea4:	ea23 0306 	bic.w	r3, r3, r6
 8000ea8:	6053      	str	r3, [r2, #4]
 8000eaa:	e7a3      	b.n	8000df4 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000eac:	4a0c      	ldr	r2, [pc, #48]	; (8000ee0 <HAL_GPIO_Init+0x21c>)
 8000eae:	6893      	ldr	r3, [r2, #8]
 8000eb0:	ea23 0306 	bic.w	r3, r3, r6
 8000eb4:	6093      	str	r3, [r2, #8]
 8000eb6:	e7a5      	b.n	8000e04 <HAL_GPIO_Init+0x140>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000eb8:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <HAL_GPIO_Init+0x21c>)
 8000eba:	68d3      	ldr	r3, [r2, #12]
 8000ebc:	ea23 0606 	bic.w	r6, r3, r6
 8000ec0:	60d6      	str	r6, [r2, #12]
 8000ec2:	e7a7      	b.n	8000e14 <HAL_GPIO_Init+0x150>
        }
      }
    }
  }
}
 8000ec4:	b002      	add	sp, #8
 8000ec6:	bcf0      	pop	{r4, r5, r6, r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	10220000 	.word	0x10220000
 8000ed0:	10310000 	.word	0x10310000
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40010000 	.word	0x40010000
 8000edc:	40010800 	.word	0x40010800
 8000ee0:	40010400 	.word	0x40010400

08000ee4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ee4:	b10a      	cbz	r2, 8000eea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ee6:	6101      	str	r1, [r0, #16]
 8000ee8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000eea:	0409      	lsls	r1, r1, #16
 8000eec:	6101      	str	r1, [r0, #16]
  }
}
 8000eee:	4770      	bx	lr

08000ef0 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000ef0:	68c3      	ldr	r3, [r0, #12]
 8000ef2:	4059      	eors	r1, r3
 8000ef4:	60c1      	str	r1, [r0, #12]
}
 8000ef6:	4770      	bx	lr

08000ef8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000ef8:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <RCC_Delay+0x24>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <RCC_Delay+0x28>)
 8000f00:	fba2 2303 	umull	r2, r3, r2, r3
 8000f04:	0a5b      	lsrs	r3, r3, #9
 8000f06:	fb00 f303 	mul.w	r3, r0, r3
 8000f0a:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000f0c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000f0e:	9b01      	ldr	r3, [sp, #4]
 8000f10:	1e5a      	subs	r2, r3, #1
 8000f12:	9201      	str	r2, [sp, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1f9      	bne.n	8000f0c <RCC_Delay+0x14>
}
 8000f18:	b002      	add	sp, #8
 8000f1a:	4770      	bx	lr
 8000f1c:	2000000c 	.word	0x2000000c
 8000f20:	10624dd3 	.word	0x10624dd3

08000f24 <HAL_RCC_OscConfig>:
{
 8000f24:	b570      	push	{r4, r5, r6, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f2a:	6803      	ldr	r3, [r0, #0]
 8000f2c:	f013 0f01 	tst.w	r3, #1
 8000f30:	d02c      	beq.n	8000f8c <HAL_RCC_OscConfig+0x68>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f32:	4bab      	ldr	r3, [pc, #684]	; (80011e0 <HAL_RCC_OscConfig+0x2bc>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 030c 	and.w	r3, r3, #12
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	d01d      	beq.n	8000f7a <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f3e:	4ba8      	ldr	r3, [pc, #672]	; (80011e0 <HAL_RCC_OscConfig+0x2bc>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 030c 	and.w	r3, r3, #12
 8000f46:	2b08      	cmp	r3, #8
 8000f48:	d012      	beq.n	8000f70 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4a:	6863      	ldr	r3, [r4, #4]
 8000f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f50:	d041      	beq.n	8000fd6 <HAL_RCC_OscConfig+0xb2>
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d155      	bne.n	8001002 <HAL_RCC_OscConfig+0xde>
 8000f56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f5a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	e037      	b.n	8000fe0 <HAL_RCC_OscConfig+0xbc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f70:	4b9b      	ldr	r3, [pc, #620]	; (80011e0 <HAL_RCC_OscConfig+0x2bc>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000f78:	d0e7      	beq.n	8000f4a <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f7a:	4b99      	ldr	r3, [pc, #612]	; (80011e0 <HAL_RCC_OscConfig+0x2bc>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f82:	d003      	beq.n	8000f8c <HAL_RCC_OscConfig+0x68>
 8000f84:	6863      	ldr	r3, [r4, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 81ae 	beq.w	80012e8 <HAL_RCC_OscConfig+0x3c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f8c:	6823      	ldr	r3, [r4, #0]
 8000f8e:	f013 0f02 	tst.w	r3, #2
 8000f92:	d075      	beq.n	8001080 <HAL_RCC_OscConfig+0x15c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f94:	4b92      	ldr	r3, [pc, #584]	; (80011e0 <HAL_RCC_OscConfig+0x2bc>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f013 0f0c 	tst.w	r3, #12
 8000f9c:	d05f      	beq.n	800105e <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f9e:	4b90      	ldr	r3, [pc, #576]	; (80011e0 <HAL_RCC_OscConfig+0x2bc>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 030c 	and.w	r3, r3, #12
 8000fa6:	2b08      	cmp	r3, #8
 8000fa8:	d054      	beq.n	8001054 <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000faa:	6923      	ldr	r3, [r4, #16]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 8089 	beq.w	80010c4 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_HSI_ENABLE();
 8000fb2:	4b8c      	ldr	r3, [pc, #560]	; (80011e4 <HAL_RCC_OscConfig+0x2c0>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fb8:	f7ff f912 	bl	80001e0 <HAL_GetTick>
 8000fbc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fbe:	4b88      	ldr	r3, [pc, #544]	; (80011e0 <HAL_RCC_OscConfig+0x2bc>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f013 0f02 	tst.w	r3, #2
 8000fc6:	d174      	bne.n	80010b2 <HAL_RCC_OscConfig+0x18e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fc8:	f7ff f90a 	bl	80001e0 <HAL_GetTick>
 8000fcc:	1b40      	subs	r0, r0, r5
 8000fce:	2802      	cmp	r0, #2
 8000fd0:	d9f5      	bls.n	8000fbe <HAL_RCC_OscConfig+0x9a>
            return HAL_TIMEOUT;
 8000fd2:	2003      	movs	r0, #3
 8000fd4:	e18d      	b.n	80012f2 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd6:	4a82      	ldr	r2, [pc, #520]	; (80011e0 <HAL_RCC_OscConfig+0x2bc>)
 8000fd8:	6813      	ldr	r3, [r2, #0]
 8000fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fde:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fe0:	6863      	ldr	r3, [r4, #4]
 8000fe2:	b343      	cbz	r3, 8001036 <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8000fe4:	f7ff f8fc 	bl	80001e0 <HAL_GetTick>
 8000fe8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fea:	4b7d      	ldr	r3, [pc, #500]	; (80011e0 <HAL_RCC_OscConfig+0x2bc>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ff2:	d1cb      	bne.n	8000f8c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff4:	f7ff f8f4 	bl	80001e0 <HAL_GetTick>
 8000ff8:	1b40      	subs	r0, r0, r5
 8000ffa:	2864      	cmp	r0, #100	; 0x64
 8000ffc:	d9f5      	bls.n	8000fea <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8000ffe:	2003      	movs	r0, #3
 8001000:	e177      	b.n	80012f2 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001002:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001006:	d009      	beq.n	800101c <HAL_RCC_OscConfig+0xf8>
 8001008:	4b75      	ldr	r3, [pc, #468]	; (80011e0 <HAL_RCC_OscConfig+0x2bc>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	e7e1      	b.n	8000fe0 <HAL_RCC_OscConfig+0xbc>
 800101c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001020:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	e7d4      	b.n	8000fe0 <HAL_RCC_OscConfig+0xbc>
        tickstart = HAL_GetTick();
 8001036:	f7ff f8d3 	bl	80001e0 <HAL_GetTick>
 800103a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103c:	4b68      	ldr	r3, [pc, #416]	; (80011e0 <HAL_RCC_OscConfig+0x2bc>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001044:	d0a2      	beq.n	8000f8c <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001046:	f7ff f8cb 	bl	80001e0 <HAL_GetTick>
 800104a:	1b40      	subs	r0, r0, r5
 800104c:	2864      	cmp	r0, #100	; 0x64
 800104e:	d9f5      	bls.n	800103c <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8001050:	2003      	movs	r0, #3
 8001052:	e14e      	b.n	80012f2 <HAL_RCC_OscConfig+0x3ce>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001054:	4b62      	ldr	r3, [pc, #392]	; (80011e0 <HAL_RCC_OscConfig+0x2bc>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800105c:	d1a5      	bne.n	8000faa <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105e:	4b60      	ldr	r3, [pc, #384]	; (80011e0 <HAL_RCC_OscConfig+0x2bc>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f013 0f02 	tst.w	r3, #2
 8001066:	d003      	beq.n	8001070 <HAL_RCC_OscConfig+0x14c>
 8001068:	6923      	ldr	r3, [r4, #16]
 800106a:	2b01      	cmp	r3, #1
 800106c:	f040 813e 	bne.w	80012ec <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001070:	4a5b      	ldr	r2, [pc, #364]	; (80011e0 <HAL_RCC_OscConfig+0x2bc>)
 8001072:	6813      	ldr	r3, [r2, #0]
 8001074:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001078:	6961      	ldr	r1, [r4, #20]
 800107a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800107e:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001080:	6823      	ldr	r3, [r4, #0]
 8001082:	f013 0f08 	tst.w	r3, #8
 8001086:	d032      	beq.n	80010ee <HAL_RCC_OscConfig+0x1ca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001088:	69a3      	ldr	r3, [r4, #24]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d045      	beq.n	800111a <HAL_RCC_OscConfig+0x1f6>
      __HAL_RCC_LSI_ENABLE();
 800108e:	4b56      	ldr	r3, [pc, #344]	; (80011e8 <HAL_RCC_OscConfig+0x2c4>)
 8001090:	2201      	movs	r2, #1
 8001092:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001094:	f7ff f8a4 	bl	80001e0 <HAL_GetTick>
 8001098:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800109a:	4b51      	ldr	r3, [pc, #324]	; (80011e0 <HAL_RCC_OscConfig+0x2bc>)
 800109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109e:	f013 0f02 	tst.w	r3, #2
 80010a2:	d121      	bne.n	80010e8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010a4:	f7ff f89c 	bl	80001e0 <HAL_GetTick>
 80010a8:	1b40      	subs	r0, r0, r5
 80010aa:	2802      	cmp	r0, #2
 80010ac:	d9f5      	bls.n	800109a <HAL_RCC_OscConfig+0x176>
          return HAL_TIMEOUT;
 80010ae:	2003      	movs	r0, #3
 80010b0:	e11f      	b.n	80012f2 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b2:	4a4b      	ldr	r2, [pc, #300]	; (80011e0 <HAL_RCC_OscConfig+0x2bc>)
 80010b4:	6813      	ldr	r3, [r2, #0]
 80010b6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80010ba:	6961      	ldr	r1, [r4, #20]
 80010bc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	e7dd      	b.n	8001080 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 80010c4:	4b47      	ldr	r3, [pc, #284]	; (80011e4 <HAL_RCC_OscConfig+0x2c0>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010ca:	f7ff f889 	bl	80001e0 <HAL_GetTick>
 80010ce:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010d0:	4b43      	ldr	r3, [pc, #268]	; (80011e0 <HAL_RCC_OscConfig+0x2bc>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f013 0f02 	tst.w	r3, #2
 80010d8:	d0d2      	beq.n	8001080 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010da:	f7ff f881 	bl	80001e0 <HAL_GetTick>
 80010de:	1b40      	subs	r0, r0, r5
 80010e0:	2802      	cmp	r0, #2
 80010e2:	d9f5      	bls.n	80010d0 <HAL_RCC_OscConfig+0x1ac>
            return HAL_TIMEOUT;
 80010e4:	2003      	movs	r0, #3
 80010e6:	e104      	b.n	80012f2 <HAL_RCC_OscConfig+0x3ce>
      RCC_Delay(1);
 80010e8:	2001      	movs	r0, #1
 80010ea:	f7ff ff05 	bl	8000ef8 <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010ee:	6823      	ldr	r3, [r4, #0]
 80010f0:	f013 0f04 	tst.w	r3, #4
 80010f4:	f000 8098 	beq.w	8001228 <HAL_RCC_OscConfig+0x304>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010f8:	4b39      	ldr	r3, [pc, #228]	; (80011e0 <HAL_RCC_OscConfig+0x2bc>)
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001100:	d11d      	bne.n	800113e <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001102:	4b37      	ldr	r3, [pc, #220]	; (80011e0 <HAL_RCC_OscConfig+0x2bc>)
 8001104:	69da      	ldr	r2, [r3, #28]
 8001106:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800110a:	61da      	str	r2, [r3, #28]
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001116:	2501      	movs	r5, #1
 8001118:	e012      	b.n	8001140 <HAL_RCC_OscConfig+0x21c>
      __HAL_RCC_LSI_DISABLE();
 800111a:	4b33      	ldr	r3, [pc, #204]	; (80011e8 <HAL_RCC_OscConfig+0x2c4>)
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001120:	f7ff f85e 	bl	80001e0 <HAL_GetTick>
 8001124:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001126:	4b2e      	ldr	r3, [pc, #184]	; (80011e0 <HAL_RCC_OscConfig+0x2bc>)
 8001128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112a:	f013 0f02 	tst.w	r3, #2
 800112e:	d0de      	beq.n	80010ee <HAL_RCC_OscConfig+0x1ca>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001130:	f7ff f856 	bl	80001e0 <HAL_GetTick>
 8001134:	1b40      	subs	r0, r0, r5
 8001136:	2802      	cmp	r0, #2
 8001138:	d9f5      	bls.n	8001126 <HAL_RCC_OscConfig+0x202>
          return HAL_TIMEOUT;
 800113a:	2003      	movs	r0, #3
 800113c:	e0d9      	b.n	80012f2 <HAL_RCC_OscConfig+0x3ce>
    FlagStatus       pwrclkchanged = RESET;
 800113e:	2500      	movs	r5, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001140:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <HAL_RCC_OscConfig+0x2c8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001148:	d011      	beq.n	800116e <HAL_RCC_OscConfig+0x24a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800114a:	68e3      	ldr	r3, [r4, #12]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d022      	beq.n	8001196 <HAL_RCC_OscConfig+0x272>
 8001150:	2b00      	cmp	r3, #0
 8001152:	d138      	bne.n	80011c6 <HAL_RCC_OscConfig+0x2a2>
 8001154:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001158:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800115c:	6a1a      	ldr	r2, [r3, #32]
 800115e:	f022 0201 	bic.w	r2, r2, #1
 8001162:	621a      	str	r2, [r3, #32]
 8001164:	6a1a      	ldr	r2, [r3, #32]
 8001166:	f022 0204 	bic.w	r2, r2, #4
 800116a:	621a      	str	r2, [r3, #32]
 800116c:	e018      	b.n	80011a0 <HAL_RCC_OscConfig+0x27c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800116e:	4a1f      	ldr	r2, [pc, #124]	; (80011ec <HAL_RCC_OscConfig+0x2c8>)
 8001170:	6813      	ldr	r3, [r2, #0]
 8001172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001176:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001178:	f7ff f832 	bl	80001e0 <HAL_GetTick>
 800117c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117e:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <HAL_RCC_OscConfig+0x2c8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001186:	d1e0      	bne.n	800114a <HAL_RCC_OscConfig+0x226>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001188:	f7ff f82a 	bl	80001e0 <HAL_GetTick>
 800118c:	1b80      	subs	r0, r0, r6
 800118e:	2864      	cmp	r0, #100	; 0x64
 8001190:	d9f5      	bls.n	800117e <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8001192:	2003      	movs	r0, #3
 8001194:	e0ad      	b.n	80012f2 <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001196:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <HAL_RCC_OscConfig+0x2bc>)
 8001198:	6a13      	ldr	r3, [r2, #32]
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011a0:	68e3      	ldr	r3, [r4, #12]
 80011a2:	b37b      	cbz	r3, 8001204 <HAL_RCC_OscConfig+0x2e0>
      tickstart = HAL_GetTick();
 80011a4:	f7ff f81c 	bl	80001e0 <HAL_GetTick>
 80011a8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <HAL_RCC_OscConfig+0x2bc>)
 80011ac:	6a1b      	ldr	r3, [r3, #32]
 80011ae:	f013 0f02 	tst.w	r3, #2
 80011b2:	d138      	bne.n	8001226 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011b4:	f7ff f814 	bl	80001e0 <HAL_GetTick>
 80011b8:	1b80      	subs	r0, r0, r6
 80011ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80011be:	4298      	cmp	r0, r3
 80011c0:	d9f3      	bls.n	80011aa <HAL_RCC_OscConfig+0x286>
          return HAL_TIMEOUT;
 80011c2:	2003      	movs	r0, #3
 80011c4:	e095      	b.n	80012f2 <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011c6:	2b05      	cmp	r3, #5
 80011c8:	d012      	beq.n	80011f0 <HAL_RCC_OscConfig+0x2cc>
 80011ca:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <HAL_RCC_OscConfig+0x2bc>)
 80011cc:	6a1a      	ldr	r2, [r3, #32]
 80011ce:	f022 0201 	bic.w	r2, r2, #1
 80011d2:	621a      	str	r2, [r3, #32]
 80011d4:	6a1a      	ldr	r2, [r3, #32]
 80011d6:	f022 0204 	bic.w	r2, r2, #4
 80011da:	621a      	str	r2, [r3, #32]
 80011dc:	e7e0      	b.n	80011a0 <HAL_RCC_OscConfig+0x27c>
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000
 80011e4:	42420000 	.word	0x42420000
 80011e8:	42420480 	.word	0x42420480
 80011ec:	40007000 	.word	0x40007000
 80011f0:	4b42      	ldr	r3, [pc, #264]	; (80012fc <HAL_RCC_OscConfig+0x3d8>)
 80011f2:	6a1a      	ldr	r2, [r3, #32]
 80011f4:	f042 0204 	orr.w	r2, r2, #4
 80011f8:	621a      	str	r2, [r3, #32]
 80011fa:	6a1a      	ldr	r2, [r3, #32]
 80011fc:	f042 0201 	orr.w	r2, r2, #1
 8001200:	621a      	str	r2, [r3, #32]
 8001202:	e7cd      	b.n	80011a0 <HAL_RCC_OscConfig+0x27c>
      tickstart = HAL_GetTick();
 8001204:	f7fe ffec 	bl	80001e0 <HAL_GetTick>
 8001208:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800120a:	4b3c      	ldr	r3, [pc, #240]	; (80012fc <HAL_RCC_OscConfig+0x3d8>)
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	f013 0f02 	tst.w	r3, #2
 8001212:	d008      	beq.n	8001226 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001214:	f7fe ffe4 	bl	80001e0 <HAL_GetTick>
 8001218:	1b80      	subs	r0, r0, r6
 800121a:	f241 3388 	movw	r3, #5000	; 0x1388
 800121e:	4298      	cmp	r0, r3
 8001220:	d9f3      	bls.n	800120a <HAL_RCC_OscConfig+0x2e6>
          return HAL_TIMEOUT;
 8001222:	2003      	movs	r0, #3
 8001224:	e065      	b.n	80012f2 <HAL_RCC_OscConfig+0x3ce>
    if(pwrclkchanged == SET)
 8001226:	b9e5      	cbnz	r5, 8001262 <HAL_RCC_OscConfig+0x33e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001228:	69e3      	ldr	r3, [r4, #28]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d060      	beq.n	80012f0 <HAL_RCC_OscConfig+0x3cc>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800122e:	4a33      	ldr	r2, [pc, #204]	; (80012fc <HAL_RCC_OscConfig+0x3d8>)
 8001230:	6852      	ldr	r2, [r2, #4]
 8001232:	f002 020c 	and.w	r2, r2, #12
 8001236:	2a08      	cmp	r2, #8
 8001238:	d05d      	beq.n	80012f6 <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800123a:	2b02      	cmp	r3, #2
 800123c:	d017      	beq.n	800126e <HAL_RCC_OscConfig+0x34a>
        __HAL_RCC_PLL_DISABLE();
 800123e:	4b30      	ldr	r3, [pc, #192]	; (8001300 <HAL_RCC_OscConfig+0x3dc>)
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001244:	f7fe ffcc 	bl	80001e0 <HAL_GetTick>
 8001248:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800124a:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <HAL_RCC_OscConfig+0x3d8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001252:	d047      	beq.n	80012e4 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001254:	f7fe ffc4 	bl	80001e0 <HAL_GetTick>
 8001258:	1b00      	subs	r0, r0, r4
 800125a:	2802      	cmp	r0, #2
 800125c:	d9f5      	bls.n	800124a <HAL_RCC_OscConfig+0x326>
            return HAL_TIMEOUT;
 800125e:	2003      	movs	r0, #3
 8001260:	e047      	b.n	80012f2 <HAL_RCC_OscConfig+0x3ce>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001262:	4a26      	ldr	r2, [pc, #152]	; (80012fc <HAL_RCC_OscConfig+0x3d8>)
 8001264:	69d3      	ldr	r3, [r2, #28]
 8001266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800126a:	61d3      	str	r3, [r2, #28]
 800126c:	e7dc      	b.n	8001228 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_DISABLE();
 800126e:	4b24      	ldr	r3, [pc, #144]	; (8001300 <HAL_RCC_OscConfig+0x3dc>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001274:	f7fe ffb4 	bl	80001e0 <HAL_GetTick>
 8001278:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <HAL_RCC_OscConfig+0x3d8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001282:	d006      	beq.n	8001292 <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001284:	f7fe ffac 	bl	80001e0 <HAL_GetTick>
 8001288:	1b40      	subs	r0, r0, r5
 800128a:	2802      	cmp	r0, #2
 800128c:	d9f5      	bls.n	800127a <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 800128e:	2003      	movs	r0, #3
 8001290:	e02f      	b.n	80012f2 <HAL_RCC_OscConfig+0x3ce>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001292:	6a23      	ldr	r3, [r4, #32]
 8001294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001298:	d01a      	beq.n	80012d0 <HAL_RCC_OscConfig+0x3ac>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800129a:	4918      	ldr	r1, [pc, #96]	; (80012fc <HAL_RCC_OscConfig+0x3d8>)
 800129c:	684b      	ldr	r3, [r1, #4]
 800129e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80012a2:	6a22      	ldr	r2, [r4, #32]
 80012a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80012a6:	4302      	orrs	r2, r0
 80012a8:	4313      	orrs	r3, r2
 80012aa:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <HAL_RCC_OscConfig+0x3dc>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012b2:	f7fe ff95 	bl	80001e0 <HAL_GetTick>
 80012b6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012b8:	4b10      	ldr	r3, [pc, #64]	; (80012fc <HAL_RCC_OscConfig+0x3d8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012c0:	d10e      	bne.n	80012e0 <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012c2:	f7fe ff8d 	bl	80001e0 <HAL_GetTick>
 80012c6:	1b00      	subs	r0, r0, r4
 80012c8:	2802      	cmp	r0, #2
 80012ca:	d9f5      	bls.n	80012b8 <HAL_RCC_OscConfig+0x394>
            return HAL_TIMEOUT;
 80012cc:	2003      	movs	r0, #3
 80012ce:	e010      	b.n	80012f2 <HAL_RCC_OscConfig+0x3ce>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012d0:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <HAL_RCC_OscConfig+0x3d8>)
 80012d2:	6853      	ldr	r3, [r2, #4]
 80012d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80012d8:	68a1      	ldr	r1, [r4, #8]
 80012da:	430b      	orrs	r3, r1
 80012dc:	6053      	str	r3, [r2, #4]
 80012de:	e7dc      	b.n	800129a <HAL_RCC_OscConfig+0x376>
  return HAL_OK;
 80012e0:	2000      	movs	r0, #0
 80012e2:	e006      	b.n	80012f2 <HAL_RCC_OscConfig+0x3ce>
 80012e4:	2000      	movs	r0, #0
 80012e6:	e004      	b.n	80012f2 <HAL_RCC_OscConfig+0x3ce>
        return HAL_ERROR;
 80012e8:	2001      	movs	r0, #1
 80012ea:	e002      	b.n	80012f2 <HAL_RCC_OscConfig+0x3ce>
        return HAL_ERROR;
 80012ec:	2001      	movs	r0, #1
 80012ee:	e000      	b.n	80012f2 <HAL_RCC_OscConfig+0x3ce>
  return HAL_OK;
 80012f0:	2000      	movs	r0, #0
}
 80012f2:	b002      	add	sp, #8
 80012f4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80012f6:	2001      	movs	r0, #1
 80012f8:	e7fb      	b.n	80012f2 <HAL_RCC_OscConfig+0x3ce>
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000
 8001300:	42420060 	.word	0x42420060

08001304 <HAL_RCC_GetSysClockFreq>:
{
 8001304:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001308:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800130a:	f10d 0c18 	add.w	ip, sp, #24
 800130e:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001312:	f240 2301 	movw	r3, #513	; 0x201
 8001316:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_RCC_GetSysClockFreq+0x60>)
 800131c:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800131e:	f003 020c 	and.w	r2, r3, #12
 8001322:	2a08      	cmp	r2, #8
 8001324:	d002      	beq.n	800132c <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8001326:	4810      	ldr	r0, [pc, #64]	; (8001368 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001328:	b006      	add	sp, #24
 800132a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800132c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001330:	4462      	add	r2, ip
 8001332:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001336:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800133a:	d00c      	beq.n	8001356 <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <HAL_RCC_GetSysClockFreq+0x60>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001344:	4463      	add	r3, ip
 8001346:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800134a:	4807      	ldr	r0, [pc, #28]	; (8001368 <HAL_RCC_GetSysClockFreq+0x64>)
 800134c:	fb00 f002 	mul.w	r0, r0, r2
 8001350:	fbb0 f0f3 	udiv	r0, r0, r3
 8001354:	e7e8      	b.n	8001328 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <HAL_RCC_GetSysClockFreq+0x68>)
 8001358:	fb00 f002 	mul.w	r0, r0, r2
 800135c:	e7e4      	b.n	8001328 <HAL_RCC_GetSysClockFreq+0x24>
 800135e:	bf00      	nop
 8001360:	08003c84 	.word	0x08003c84
 8001364:	40021000 	.word	0x40021000
 8001368:	007a1200 	.word	0x007a1200
 800136c:	003d0900 	.word	0x003d0900

08001370 <HAL_RCC_ClockConfig>:
{
 8001370:	b570      	push	{r4, r5, r6, lr}
 8001372:	4604      	mov	r4, r0
 8001374:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001376:	4b59      	ldr	r3, [pc, #356]	; (80014dc <HAL_RCC_ClockConfig+0x16c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	428b      	cmp	r3, r1
 8001380:	d20b      	bcs.n	800139a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001382:	4a56      	ldr	r2, [pc, #344]	; (80014dc <HAL_RCC_ClockConfig+0x16c>)
 8001384:	6813      	ldr	r3, [r2, #0]
 8001386:	f023 0307 	bic.w	r3, r3, #7
 800138a:	430b      	orrs	r3, r1
 800138c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800138e:	6813      	ldr	r3, [r2, #0]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	428b      	cmp	r3, r1
 8001396:	f040 809a 	bne.w	80014ce <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800139a:	6823      	ldr	r3, [r4, #0]
 800139c:	f013 0f02 	tst.w	r3, #2
 80013a0:	d006      	beq.n	80013b0 <HAL_RCC_ClockConfig+0x40>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013a2:	4a4f      	ldr	r2, [pc, #316]	; (80014e0 <HAL_RCC_ClockConfig+0x170>)
 80013a4:	6853      	ldr	r3, [r2, #4]
 80013a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013aa:	68a1      	ldr	r1, [r4, #8]
 80013ac:	430b      	orrs	r3, r1
 80013ae:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013b0:	6823      	ldr	r3, [r4, #0]
 80013b2:	f013 0f01 	tst.w	r3, #1
 80013b6:	d052      	beq.n	800145e <HAL_RCC_ClockConfig+0xee>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b8:	6863      	ldr	r3, [r4, #4]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d023      	beq.n	8001406 <HAL_RCC_ClockConfig+0x96>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d028      	beq.n	8001414 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c2:	4a47      	ldr	r2, [pc, #284]	; (80014e0 <HAL_RCC_ClockConfig+0x170>)
 80013c4:	6812      	ldr	r2, [r2, #0]
 80013c6:	f012 0f02 	tst.w	r2, #2
 80013ca:	f000 8082 	beq.w	80014d2 <HAL_RCC_ClockConfig+0x162>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013ce:	4944      	ldr	r1, [pc, #272]	; (80014e0 <HAL_RCC_ClockConfig+0x170>)
 80013d0:	684a      	ldr	r2, [r1, #4]
 80013d2:	f022 0203 	bic.w	r2, r2, #3
 80013d6:	4313      	orrs	r3, r2
 80013d8:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80013da:	f7fe ff01 	bl	80001e0 <HAL_GetTick>
 80013de:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013e0:	6863      	ldr	r3, [r4, #4]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d01d      	beq.n	8001422 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d02a      	beq.n	8001440 <HAL_RCC_ClockConfig+0xd0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ea:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <HAL_RCC_ClockConfig+0x170>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f013 0f0c 	tst.w	r3, #12
 80013f2:	d034      	beq.n	800145e <HAL_RCC_ClockConfig+0xee>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013f4:	f7fe fef4 	bl	80001e0 <HAL_GetTick>
 80013f8:	1b83      	subs	r3, r0, r6
 80013fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fe:	4293      	cmp	r3, r2
 8001400:	d9f3      	bls.n	80013ea <HAL_RCC_ClockConfig+0x7a>
          return HAL_TIMEOUT;
 8001402:	2003      	movs	r0, #3
 8001404:	e062      	b.n	80014cc <HAL_RCC_ClockConfig+0x15c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001406:	4a36      	ldr	r2, [pc, #216]	; (80014e0 <HAL_RCC_ClockConfig+0x170>)
 8001408:	6812      	ldr	r2, [r2, #0]
 800140a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800140e:	d1de      	bne.n	80013ce <HAL_RCC_ClockConfig+0x5e>
        return HAL_ERROR;
 8001410:	2001      	movs	r0, #1
 8001412:	e05b      	b.n	80014cc <HAL_RCC_ClockConfig+0x15c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001414:	4a32      	ldr	r2, [pc, #200]	; (80014e0 <HAL_RCC_ClockConfig+0x170>)
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800141c:	d1d7      	bne.n	80013ce <HAL_RCC_ClockConfig+0x5e>
        return HAL_ERROR;
 800141e:	2001      	movs	r0, #1
 8001420:	e054      	b.n	80014cc <HAL_RCC_ClockConfig+0x15c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001422:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <HAL_RCC_ClockConfig+0x170>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 030c 	and.w	r3, r3, #12
 800142a:	2b04      	cmp	r3, #4
 800142c:	d017      	beq.n	800145e <HAL_RCC_ClockConfig+0xee>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800142e:	f7fe fed7 	bl	80001e0 <HAL_GetTick>
 8001432:	1b83      	subs	r3, r0, r6
 8001434:	f241 3288 	movw	r2, #5000	; 0x1388
 8001438:	4293      	cmp	r3, r2
 800143a:	d9f2      	bls.n	8001422 <HAL_RCC_ClockConfig+0xb2>
          return HAL_TIMEOUT;
 800143c:	2003      	movs	r0, #3
 800143e:	e045      	b.n	80014cc <HAL_RCC_ClockConfig+0x15c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001440:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <HAL_RCC_ClockConfig+0x170>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 030c 	and.w	r3, r3, #12
 8001448:	2b08      	cmp	r3, #8
 800144a:	d008      	beq.n	800145e <HAL_RCC_ClockConfig+0xee>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800144c:	f7fe fec8 	bl	80001e0 <HAL_GetTick>
 8001450:	1b80      	subs	r0, r0, r6
 8001452:	f241 3388 	movw	r3, #5000	; 0x1388
 8001456:	4298      	cmp	r0, r3
 8001458:	d9f2      	bls.n	8001440 <HAL_RCC_ClockConfig+0xd0>
          return HAL_TIMEOUT;
 800145a:	2003      	movs	r0, #3
 800145c:	e036      	b.n	80014cc <HAL_RCC_ClockConfig+0x15c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800145e:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <HAL_RCC_ClockConfig+0x16c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	42ab      	cmp	r3, r5
 8001468:	d90a      	bls.n	8001480 <HAL_RCC_ClockConfig+0x110>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146a:	4a1c      	ldr	r2, [pc, #112]	; (80014dc <HAL_RCC_ClockConfig+0x16c>)
 800146c:	6813      	ldr	r3, [r2, #0]
 800146e:	f023 0307 	bic.w	r3, r3, #7
 8001472:	432b      	orrs	r3, r5
 8001474:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001476:	6813      	ldr	r3, [r2, #0]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	42ab      	cmp	r3, r5
 800147e:	d12a      	bne.n	80014d6 <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001480:	6823      	ldr	r3, [r4, #0]
 8001482:	f013 0f04 	tst.w	r3, #4
 8001486:	d006      	beq.n	8001496 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001488:	4a15      	ldr	r2, [pc, #84]	; (80014e0 <HAL_RCC_ClockConfig+0x170>)
 800148a:	6853      	ldr	r3, [r2, #4]
 800148c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001490:	68e1      	ldr	r1, [r4, #12]
 8001492:	430b      	orrs	r3, r1
 8001494:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001496:	6823      	ldr	r3, [r4, #0]
 8001498:	f013 0f08 	tst.w	r3, #8
 800149c:	d007      	beq.n	80014ae <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800149e:	4a10      	ldr	r2, [pc, #64]	; (80014e0 <HAL_RCC_ClockConfig+0x170>)
 80014a0:	6853      	ldr	r3, [r2, #4]
 80014a2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80014a6:	6921      	ldr	r1, [r4, #16]
 80014a8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014ac:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014ae:	f7ff ff29 	bl	8001304 <HAL_RCC_GetSysClockFreq>
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <HAL_RCC_ClockConfig+0x170>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <HAL_RCC_ClockConfig+0x174>)
 80014bc:	5cd3      	ldrb	r3, [r2, r3]
 80014be:	40d8      	lsrs	r0, r3
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_RCC_ClockConfig+0x178>)
 80014c2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80014c4:	2000      	movs	r0, #0
 80014c6:	f7fe fe49 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 80014ca:	2000      	movs	r0, #0
}
 80014cc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80014ce:	2001      	movs	r0, #1
 80014d0:	e7fc      	b.n	80014cc <HAL_RCC_ClockConfig+0x15c>
        return HAL_ERROR;
 80014d2:	2001      	movs	r0, #1
 80014d4:	e7fa      	b.n	80014cc <HAL_RCC_ClockConfig+0x15c>
      return HAL_ERROR;
 80014d6:	2001      	movs	r0, #1
 80014d8:	e7f8      	b.n	80014cc <HAL_RCC_ClockConfig+0x15c>
 80014da:	bf00      	nop
 80014dc:	40022000 	.word	0x40022000
 80014e0:	40021000 	.word	0x40021000
 80014e4:	08003c5c 	.word	0x08003c5c
 80014e8:	2000000c 	.word	0x2000000c

080014ec <HAL_RCC_GetHCLKFreq>:
}
 80014ec:	4b01      	ldr	r3, [pc, #4]	; (80014f4 <HAL_RCC_GetHCLKFreq+0x8>)
 80014ee:	6818      	ldr	r0, [r3, #0]
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	2000000c 	.word	0x2000000c

080014f8 <HAL_RCC_GetPCLK1Freq>:
{
 80014f8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014fa:	f7ff fff7 	bl	80014ec <HAL_RCC_GetHCLKFreq>
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001506:	4a03      	ldr	r2, [pc, #12]	; (8001514 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001508:	5cd3      	ldrb	r3, [r2, r3]
}    
 800150a:	40d8      	lsrs	r0, r3
 800150c:	bd08      	pop	{r3, pc}
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000
 8001514:	08003c6c 	.word	0x08003c6c

08001518 <HAL_RCC_GetPCLK2Freq>:
{
 8001518:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800151a:	f7ff ffe7 	bl	80014ec <HAL_RCC_GetHCLKFreq>
 800151e:	4b04      	ldr	r3, [pc, #16]	; (8001530 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001526:	4a03      	ldr	r2, [pc, #12]	; (8001534 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001528:	5cd3      	ldrb	r3, [r2, r3]
} 
 800152a:	40d8      	lsrs	r0, r3
 800152c:	bd08      	pop	{r3, pc}
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000
 8001534:	08003c6c 	.word	0x08003c6c

08001538 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001538:	6802      	ldr	r2, [r0, #0]
 800153a:	68d3      	ldr	r3, [r2, #12]
 800153c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001540:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001542:	2320      	movs	r3, #32
 8001544:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8001548:	4770      	bx	lr

0800154a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800154a:	6802      	ldr	r2, [r0, #0]
 800154c:	68d3      	ldr	r3, [r2, #12]
 800154e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001552:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001554:	6802      	ldr	r2, [r0, #0]
 8001556:	6953      	ldr	r3, [r2, #20]
 8001558:	f023 0301 	bic.w	r3, r3, #1
 800155c:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800155e:	2320      	movs	r3, #32
 8001560:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8001564:	4770      	bx	lr
	...

08001568 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800156c:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800156e:	6802      	ldr	r2, [r0, #0]
 8001570:	6913      	ldr	r3, [r2, #16]
 8001572:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001576:	68c1      	ldr	r1, [r0, #12]
 8001578:	430b      	orrs	r3, r1
 800157a:	6113      	str	r3, [r2, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800157c:	6883      	ldr	r3, [r0, #8]
 800157e:	6902      	ldr	r2, [r0, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	6942      	ldr	r2, [r0, #20]
 8001584:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, 
 8001586:	6801      	ldr	r1, [r0, #0]
 8001588:	68ca      	ldr	r2, [r1, #12]
 800158a:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800158e:	f022 020c 	bic.w	r2, r2, #12
 8001592:	4313      	orrs	r3, r2
 8001594:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001596:	6802      	ldr	r2, [r0, #0]
 8001598:	6953      	ldr	r3, [r2, #20]
 800159a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800159e:	6981      	ldr	r1, [r0, #24]
 80015a0:	430b      	orrs	r3, r1
 80015a2:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80015a4:	6802      	ldr	r2, [r0, #0]
 80015a6:	4b59      	ldr	r3, [pc, #356]	; (800170c <UART_SetConfig+0x1a4>)
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d057      	beq.n	800165c <UART_SetConfig+0xf4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80015ac:	f7ff ffa4 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 80015b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80015b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80015b8:	686c      	ldr	r4, [r5, #4]
 80015ba:	00a4      	lsls	r4, r4, #2
 80015bc:	fbb0 f4f4 	udiv	r4, r0, r4
 80015c0:	4e53      	ldr	r6, [pc, #332]	; (8001710 <UART_SetConfig+0x1a8>)
 80015c2:	fba6 3404 	umull	r3, r4, r6, r4
 80015c6:	0964      	lsrs	r4, r4, #5
 80015c8:	0127      	lsls	r7, r4, #4
 80015ca:	f7ff ff95 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 80015ce:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80015d2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80015d6:	686b      	ldr	r3, [r5, #4]
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	fbb4 f9f3 	udiv	r9, r4, r3
 80015de:	f7ff ff8b 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 80015e2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80015e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80015ea:	686c      	ldr	r4, [r5, #4]
 80015ec:	00a4      	lsls	r4, r4, #2
 80015ee:	fbb3 f4f4 	udiv	r4, r3, r4
 80015f2:	fba6 3404 	umull	r3, r4, r6, r4
 80015f6:	0964      	lsrs	r4, r4, #5
 80015f8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80015fc:	fb08 9414 	mls	r4, r8, r4, r9
 8001600:	0124      	lsls	r4, r4, #4
 8001602:	3432      	adds	r4, #50	; 0x32
 8001604:	fba6 3404 	umull	r3, r4, r6, r4
 8001608:	0964      	lsrs	r4, r4, #5
 800160a:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 800160e:	443c      	add	r4, r7
 8001610:	f7ff ff72 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 8001614:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001618:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800161c:	686f      	ldr	r7, [r5, #4]
 800161e:	00bf      	lsls	r7, r7, #2
 8001620:	fbb0 f7f7 	udiv	r7, r0, r7
 8001624:	f7ff ff68 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 8001628:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800162c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001630:	686b      	ldr	r3, [r5, #4]
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	fbb0 f0f3 	udiv	r0, r0, r3
 8001638:	fba6 3000 	umull	r3, r0, r6, r0
 800163c:	0940      	lsrs	r0, r0, #5
 800163e:	fb08 7810 	mls	r8, r8, r0, r7
 8001642:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001646:	f108 0832 	add.w	r8, r8, #50	; 0x32
 800164a:	fba6 3608 	umull	r3, r6, r6, r8
 800164e:	f3c6 1643 	ubfx	r6, r6, #5, #4
 8001652:	682b      	ldr	r3, [r5, #0]
 8001654:	4426      	add	r6, r4
 8001656:	609e      	str	r6, [r3, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8001658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800165c:	f7ff ff5c 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 8001660:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001664:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001668:	686c      	ldr	r4, [r5, #4]
 800166a:	00a4      	lsls	r4, r4, #2
 800166c:	fbb0 f4f4 	udiv	r4, r0, r4
 8001670:	4e27      	ldr	r6, [pc, #156]	; (8001710 <UART_SetConfig+0x1a8>)
 8001672:	fba6 3404 	umull	r3, r4, r6, r4
 8001676:	0964      	lsrs	r4, r4, #5
 8001678:	0127      	lsls	r7, r4, #4
 800167a:	f7ff ff4d 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 800167e:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8001682:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8001686:	686b      	ldr	r3, [r5, #4]
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	fbb4 f9f3 	udiv	r9, r4, r3
 800168e:	f7ff ff43 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 8001692:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001696:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800169a:	686c      	ldr	r4, [r5, #4]
 800169c:	00a4      	lsls	r4, r4, #2
 800169e:	fbb0 f4f4 	udiv	r4, r0, r4
 80016a2:	fba6 3404 	umull	r3, r4, r6, r4
 80016a6:	0964      	lsrs	r4, r4, #5
 80016a8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80016ac:	fb08 9414 	mls	r4, r8, r4, r9
 80016b0:	0124      	lsls	r4, r4, #4
 80016b2:	3432      	adds	r4, #50	; 0x32
 80016b4:	fba6 3404 	umull	r3, r4, r6, r4
 80016b8:	0964      	lsrs	r4, r4, #5
 80016ba:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 80016be:	443c      	add	r4, r7
 80016c0:	f7ff ff2a 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 80016c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80016c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80016cc:	686f      	ldr	r7, [r5, #4]
 80016ce:	00bf      	lsls	r7, r7, #2
 80016d0:	fbb0 f7f7 	udiv	r7, r0, r7
 80016d4:	f7ff ff20 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 80016d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80016dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80016e0:	686b      	ldr	r3, [r5, #4]
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80016e8:	fba6 3000 	umull	r3, r0, r6, r0
 80016ec:	0940      	lsrs	r0, r0, #5
 80016ee:	fb08 7810 	mls	r8, r8, r0, r7
 80016f2:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80016f6:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80016fa:	fba6 3608 	umull	r3, r6, r6, r8
 80016fe:	f3c6 1643 	ubfx	r6, r6, #5, #4
 8001702:	682b      	ldr	r3, [r5, #0]
 8001704:	4426      	add	r6, r4
 8001706:	609e      	str	r6, [r3, #8]
 8001708:	e7a6      	b.n	8001658 <UART_SetConfig+0xf0>
 800170a:	bf00      	nop
 800170c:	40013800 	.word	0x40013800
 8001710:	51eb851f 	.word	0x51eb851f

08001714 <UART_WaitOnFlagUntilTimeout>:
{
 8001714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001718:	4605      	mov	r5, r0
 800171a:	460f      	mov	r7, r1
 800171c:	4616      	mov	r6, r2
 800171e:	4699      	mov	r9, r3
 8001720:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001724:	682c      	ldr	r4, [r5, #0]
 8001726:	6824      	ldr	r4, [r4, #0]
 8001728:	ea37 0304 	bics.w	r3, r7, r4
 800172c:	bf0c      	ite	eq
 800172e:	2401      	moveq	r4, #1
 8001730:	2400      	movne	r4, #0
 8001732:	42b4      	cmp	r4, r6
 8001734:	d11f      	bne.n	8001776 <UART_WaitOnFlagUntilTimeout+0x62>
    if(Timeout != HAL_MAX_DELAY)
 8001736:	f1b8 3fff 	cmp.w	r8, #4294967295
 800173a:	d0f3      	beq.n	8001724 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800173c:	f1b8 0f00 	cmp.w	r8, #0
 8001740:	d005      	beq.n	800174e <UART_WaitOnFlagUntilTimeout+0x3a>
 8001742:	f7fe fd4d 	bl	80001e0 <HAL_GetTick>
 8001746:	eba0 0009 	sub.w	r0, r0, r9
 800174a:	4540      	cmp	r0, r8
 800174c:	d9ea      	bls.n	8001724 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800174e:	682a      	ldr	r2, [r5, #0]
 8001750:	68d3      	ldr	r3, [r2, #12]
 8001752:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001756:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001758:	682a      	ldr	r2, [r5, #0]
 800175a:	6953      	ldr	r3, [r2, #20]
 800175c:	f023 0301 	bic.w	r3, r3, #1
 8001760:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001762:	2320      	movs	r3, #32
 8001764:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001768:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800176c:	2300      	movs	r3, #0
 800176e:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8001772:	2003      	movs	r0, #3
 8001774:	e000      	b.n	8001778 <UART_WaitOnFlagUntilTimeout+0x64>
  return HAL_OK;
 8001776:	2000      	movs	r0, #0
}
 8001778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800177c <HAL_UART_Init>:
  if(huart == NULL)
 800177c:	b358      	cbz	r0, 80017d6 <HAL_UART_Init+0x5a>
{
 800177e:	b510      	push	{r4, lr}
 8001780:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8001782:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001786:	b30b      	cbz	r3, 80017cc <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001788:	2324      	movs	r3, #36	; 0x24
 800178a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800178e:	6822      	ldr	r2, [r4, #0]
 8001790:	68d3      	ldr	r3, [r2, #12]
 8001792:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001796:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001798:	4620      	mov	r0, r4
 800179a:	f7ff fee5 	bl	8001568 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800179e:	6822      	ldr	r2, [r4, #0]
 80017a0:	6913      	ldr	r3, [r2, #16]
 80017a2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80017a6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017a8:	6822      	ldr	r2, [r4, #0]
 80017aa:	6953      	ldr	r3, [r2, #20]
 80017ac:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80017b0:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80017b2:	6822      	ldr	r2, [r4, #0]
 80017b4:	68d3      	ldr	r3, [r2, #12]
 80017b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017ba:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017bc:	2000      	movs	r0, #0
 80017be:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80017c0:	2320      	movs	r3, #32
 80017c2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80017c6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80017ca:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80017cc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80017d0:	f001 fbb8 	bl	8002f44 <HAL_UART_MspInit>
 80017d4:	e7d8      	b.n	8001788 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80017d6:	2001      	movs	r0, #1
}
 80017d8:	4770      	bx	lr

080017da <HAL_UART_Transmit>:
{
 80017da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80017e2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b20      	cmp	r3, #32
 80017ea:	d158      	bne.n	800189e <HAL_UART_Transmit+0xc4>
 80017ec:	4604      	mov	r4, r0
 80017ee:	460d      	mov	r5, r1
 80017f0:	4690      	mov	r8, r2
    if((pData == NULL) || (Size == 0U))
 80017f2:	2900      	cmp	r1, #0
 80017f4:	d057      	beq.n	80018a6 <HAL_UART_Transmit+0xcc>
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	d057      	beq.n	80018aa <HAL_UART_Transmit+0xd0>
    __HAL_LOCK(huart);
 80017fa:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d055      	beq.n	80018ae <HAL_UART_Transmit+0xd4>
 8001802:	2301      	movs	r3, #1
 8001804:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001808:	2300      	movs	r3, #0
 800180a:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800180c:	2321      	movs	r3, #33	; 0x21
 800180e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001812:	f7fe fce5 	bl	80001e0 <HAL_GetTick>
 8001816:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001818:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800181c:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001820:	e017      	b.n	8001852 <HAL_UART_Transmit+0x78>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001822:	9600      	str	r6, [sp, #0]
 8001824:	463b      	mov	r3, r7
 8001826:	2200      	movs	r2, #0
 8001828:	2180      	movs	r1, #128	; 0x80
 800182a:	4620      	mov	r0, r4
 800182c:	f7ff ff72 	bl	8001714 <UART_WaitOnFlagUntilTimeout>
 8001830:	2800      	cmp	r0, #0
 8001832:	d13e      	bne.n	80018b2 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001834:	882b      	ldrh	r3, [r5, #0]
 8001836:	6822      	ldr	r2, [r4, #0]
 8001838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800183c:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800183e:	6923      	ldr	r3, [r4, #16]
 8001840:	b90b      	cbnz	r3, 8001846 <HAL_UART_Transmit+0x6c>
          pData +=2U;
 8001842:	3502      	adds	r5, #2
 8001844:	e005      	b.n	8001852 <HAL_UART_Transmit+0x78>
          pData +=1U;
 8001846:	3501      	adds	r5, #1
 8001848:	e003      	b.n	8001852 <HAL_UART_Transmit+0x78>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800184a:	f815 2b01 	ldrb.w	r2, [r5], #1
 800184e:	6823      	ldr	r3, [r4, #0]
 8001850:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8001852:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001854:	b29b      	uxth	r3, r3
 8001856:	b19b      	cbz	r3, 8001880 <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8001858:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800185a:	b292      	uxth	r2, r2
 800185c:	3a01      	subs	r2, #1
 800185e:	b292      	uxth	r2, r2
 8001860:	84e2      	strh	r2, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001862:	68a3      	ldr	r3, [r4, #8]
 8001864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001868:	d0db      	beq.n	8001822 <HAL_UART_Transmit+0x48>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800186a:	9600      	str	r6, [sp, #0]
 800186c:	463b      	mov	r3, r7
 800186e:	2200      	movs	r2, #0
 8001870:	2180      	movs	r1, #128	; 0x80
 8001872:	4620      	mov	r0, r4
 8001874:	f7ff ff4e 	bl	8001714 <UART_WaitOnFlagUntilTimeout>
 8001878:	2800      	cmp	r0, #0
 800187a:	d0e6      	beq.n	800184a <HAL_UART_Transmit+0x70>
          return HAL_TIMEOUT;
 800187c:	2003      	movs	r0, #3
 800187e:	e00f      	b.n	80018a0 <HAL_UART_Transmit+0xc6>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001880:	9600      	str	r6, [sp, #0]
 8001882:	463b      	mov	r3, r7
 8001884:	2200      	movs	r2, #0
 8001886:	2140      	movs	r1, #64	; 0x40
 8001888:	4620      	mov	r0, r4
 800188a:	f7ff ff43 	bl	8001714 <UART_WaitOnFlagUntilTimeout>
 800188e:	b990      	cbnz	r0, 80018b6 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8001890:	2320      	movs	r3, #32
 8001892:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001896:	2300      	movs	r3, #0
 8001898:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 800189c:	e000      	b.n	80018a0 <HAL_UART_Transmit+0xc6>
    return HAL_BUSY;
 800189e:	2002      	movs	r0, #2
}
 80018a0:	b002      	add	sp, #8
 80018a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80018a6:	2001      	movs	r0, #1
 80018a8:	e7fa      	b.n	80018a0 <HAL_UART_Transmit+0xc6>
 80018aa:	2001      	movs	r0, #1
 80018ac:	e7f8      	b.n	80018a0 <HAL_UART_Transmit+0xc6>
    __HAL_LOCK(huart);
 80018ae:	2002      	movs	r0, #2
 80018b0:	e7f6      	b.n	80018a0 <HAL_UART_Transmit+0xc6>
          return HAL_TIMEOUT;
 80018b2:	2003      	movs	r0, #3
 80018b4:	e7f4      	b.n	80018a0 <HAL_UART_Transmit+0xc6>
      return HAL_TIMEOUT;
 80018b6:	2003      	movs	r0, #3
 80018b8:	e7f2      	b.n	80018a0 <HAL_UART_Transmit+0xc6>

080018ba <HAL_UART_Receive>:
{
 80018ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	461e      	mov	r6, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 80018c2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b20      	cmp	r3, #32
 80018ca:	d15b      	bne.n	8001984 <HAL_UART_Receive+0xca>
 80018cc:	4604      	mov	r4, r0
 80018ce:	460d      	mov	r5, r1
 80018d0:	4690      	mov	r8, r2
    if((pData == NULL) || (Size == 0U))
 80018d2:	2900      	cmp	r1, #0
 80018d4:	d05a      	beq.n	800198c <HAL_UART_Receive+0xd2>
 80018d6:	2a00      	cmp	r2, #0
 80018d8:	d05a      	beq.n	8001990 <HAL_UART_Receive+0xd6>
    __HAL_LOCK(huart);
 80018da:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d058      	beq.n	8001994 <HAL_UART_Receive+0xda>
 80018e2:	2301      	movs	r3, #1
 80018e4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80018ec:	2322      	movs	r3, #34	; 0x22
 80018ee:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 80018f2:	f7fe fc75 	bl	80001e0 <HAL_GetTick>
 80018f6:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 80018f8:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 80018fc:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while(huart->RxXferCount > 0U)
 8001900:	e01d      	b.n	800193e <HAL_UART_Receive+0x84>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001902:	9600      	str	r6, [sp, #0]
 8001904:	463b      	mov	r3, r7
 8001906:	2200      	movs	r2, #0
 8001908:	2120      	movs	r1, #32
 800190a:	4620      	mov	r0, r4
 800190c:	f7ff ff02 	bl	8001714 <UART_WaitOnFlagUntilTimeout>
 8001910:	2800      	cmp	r0, #0
 8001912:	d141      	bne.n	8001998 <HAL_UART_Receive+0xde>
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001914:	6923      	ldr	r3, [r4, #16]
 8001916:	b933      	cbnz	r3, 8001926 <HAL_UART_Receive+0x6c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001918:	6823      	ldr	r3, [r4, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001920:	f825 3b02 	strh.w	r3, [r5], #2
          pData +=2U;
 8001924:	e00b      	b.n	800193e <HAL_UART_Receive+0x84>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001926:	6823      	ldr	r3, [r4, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	f825 3b01 	strh.w	r3, [r5], #1
          pData +=1U;
 8001930:	e005      	b.n	800193e <HAL_UART_Receive+0x84>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800193a:	f805 3b01 	strb.w	r3, [r5], #1
    while(huart->RxXferCount > 0U)
 800193e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001940:	b29b      	uxth	r3, r3
 8001942:	b1c3      	cbz	r3, 8001976 <HAL_UART_Receive+0xbc>
      huart->RxXferCount--;
 8001944:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8001946:	b292      	uxth	r2, r2
 8001948:	3a01      	subs	r2, #1
 800194a:	b292      	uxth	r2, r2
 800194c:	85e2      	strh	r2, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800194e:	68a3      	ldr	r3, [r4, #8]
 8001950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001954:	d0d5      	beq.n	8001902 <HAL_UART_Receive+0x48>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001956:	9600      	str	r6, [sp, #0]
 8001958:	463b      	mov	r3, r7
 800195a:	2200      	movs	r2, #0
 800195c:	2120      	movs	r1, #32
 800195e:	4620      	mov	r0, r4
 8001960:	f7ff fed8 	bl	8001714 <UART_WaitOnFlagUntilTimeout>
 8001964:	b9d0      	cbnz	r0, 800199c <HAL_UART_Receive+0xe2>
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001966:	6923      	ldr	r3, [r4, #16]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1e2      	bne.n	8001932 <HAL_UART_Receive+0x78>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800196c:	6823      	ldr	r3, [r4, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f805 3b01 	strb.w	r3, [r5], #1
 8001974:	e7e3      	b.n	800193e <HAL_UART_Receive+0x84>
    huart->RxState = HAL_UART_STATE_READY;
 8001976:	2320      	movs	r3, #32
 8001978:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 800197c:	2000      	movs	r0, #0
 800197e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001982:	e000      	b.n	8001986 <HAL_UART_Receive+0xcc>
    return HAL_BUSY;
 8001984:	2002      	movs	r0, #2
}
 8001986:	b002      	add	sp, #8
 8001988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800198c:	2001      	movs	r0, #1
 800198e:	e7fa      	b.n	8001986 <HAL_UART_Receive+0xcc>
 8001990:	2001      	movs	r0, #1
 8001992:	e7f8      	b.n	8001986 <HAL_UART_Receive+0xcc>
    __HAL_LOCK(huart);
 8001994:	2002      	movs	r0, #2
 8001996:	e7f6      	b.n	8001986 <HAL_UART_Receive+0xcc>
          return HAL_TIMEOUT;
 8001998:	2003      	movs	r0, #3
 800199a:	e7f4      	b.n	8001986 <HAL_UART_Receive+0xcc>
          return HAL_TIMEOUT;
 800199c:	2003      	movs	r0, #3
 800199e:	e7f2      	b.n	8001986 <HAL_UART_Receive+0xcc>

080019a0 <HAL_UART_Receive_DMA>:
{
 80019a0:	b530      	push	{r4, r5, lr}
 80019a2:	b083      	sub	sp, #12
 80019a4:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_READY) 
 80019a6:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
 80019aa:	b2c0      	uxtb	r0, r0
 80019ac:	2820      	cmp	r0, #32
 80019ae:	d13c      	bne.n	8001a2a <HAL_UART_Receive_DMA+0x8a>
    if((pData == NULL) || (Size == 0U))
 80019b0:	2900      	cmp	r1, #0
 80019b2:	d03d      	beq.n	8001a30 <HAL_UART_Receive_DMA+0x90>
 80019b4:	2a00      	cmp	r2, #0
 80019b6:	d03d      	beq.n	8001a34 <HAL_UART_Receive_DMA+0x94>
    __HAL_LOCK(huart);
 80019b8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d03b      	beq.n	8001a38 <HAL_UART_Receive_DMA+0x98>
 80019c0:	2301      	movs	r3, #1
 80019c2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 80019c6:	62a1      	str	r1, [r4, #40]	; 0x28
    huart->RxXferSize = Size;
 80019c8:	85a2      	strh	r2, [r4, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019ca:	2500      	movs	r5, #0
 80019cc:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80019ce:	2322      	movs	r3, #34	; 0x22
 80019d0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80019d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80019d6:	4819      	ldr	r0, [pc, #100]	; (8001a3c <HAL_UART_Receive_DMA+0x9c>)
 80019d8:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80019da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80019dc:	4818      	ldr	r0, [pc, #96]	; (8001a40 <HAL_UART_Receive_DMA+0xa0>)
 80019de:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80019e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80019e2:	4818      	ldr	r0, [pc, #96]	; (8001a44 <HAL_UART_Receive_DMA+0xa4>)
 80019e4:	6318      	str	r0, [r3, #48]	; 0x30
    huart->hdmarx->XferAbortCallback = NULL;
 80019e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80019e8:	635d      	str	r5, [r3, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 80019ea:	6820      	ldr	r0, [r4, #0]
 80019ec:	4613      	mov	r3, r2
 80019ee:	460a      	mov	r2, r1
 80019f0:	1d01      	adds	r1, r0, #4
 80019f2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80019f4:	f7ff f92c 	bl	8000c50 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 80019f8:	9501      	str	r5, [sp, #4]
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	9201      	str	r2, [sp, #4]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	9201      	str	r2, [sp, #4]
 8001a04:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8001a06:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a10:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a12:	6822      	ldr	r2, [r4, #0]
 8001a14:	6953      	ldr	r3, [r2, #20]
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a1c:	6822      	ldr	r2, [r4, #0]
 8001a1e:	6953      	ldr	r3, [r2, #20]
 8001a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a24:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8001a26:	4628      	mov	r0, r5
 8001a28:	e000      	b.n	8001a2c <HAL_UART_Receive_DMA+0x8c>
    return HAL_BUSY;
 8001a2a:	2002      	movs	r0, #2
}
 8001a2c:	b003      	add	sp, #12
 8001a2e:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 8001a30:	2001      	movs	r0, #1
 8001a32:	e7fb      	b.n	8001a2c <HAL_UART_Receive_DMA+0x8c>
 8001a34:	2001      	movs	r0, #1
 8001a36:	e7f9      	b.n	8001a2c <HAL_UART_Receive_DMA+0x8c>
    __HAL_LOCK(huart);
 8001a38:	2002      	movs	r0, #2
 8001a3a:	e7f7      	b.n	8001a2c <HAL_UART_Receive_DMA+0x8c>
 8001a3c:	08001a4b 	.word	0x08001a4b
 8001a40:	08001a8b 	.word	0x08001a8b
 8001a44:	08001a97 	.word	0x08001a97

08001a48 <HAL_UART_RxCpltCallback>:
}
 8001a48:	4770      	bx	lr

08001a4a <UART_DMAReceiveCplt>:
{
 8001a4a:	b508      	push	{r3, lr}
 8001a4c:	4603      	mov	r3, r0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a4e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f013 0f20 	tst.w	r3, #32
 8001a58:	d113      	bne.n	8001a82 <UART_DMAReceiveCplt+0x38>
    huart->RxXferCount = 0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001a5e:	6802      	ldr	r2, [r0, #0]
 8001a60:	68d3      	ldr	r3, [r2, #12]
 8001a62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a66:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a68:	6802      	ldr	r2, [r0, #0]
 8001a6a:	6953      	ldr	r3, [r2, #20]
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a72:	6802      	ldr	r2, [r0, #0]
 8001a74:	6953      	ldr	r3, [r2, #20]
 8001a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a7a:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8001a7c:	2320      	movs	r3, #32
 8001a7e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8001a82:	f7ff ffe1 	bl	8001a48 <HAL_UART_RxCpltCallback>
}
 8001a86:	bd08      	pop	{r3, pc}

08001a88 <HAL_UART_RxHalfCpltCallback>:
}
 8001a88:	4770      	bx	lr

08001a8a <UART_DMARxHalfCplt>:
{
 8001a8a:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
 8001a8c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001a8e:	f7ff fffb 	bl	8001a88 <HAL_UART_RxHalfCpltCallback>
}
 8001a92:	bd08      	pop	{r3, pc}

08001a94 <HAL_UART_ErrorCallback>:
}
 8001a94:	4770      	bx	lr

08001a96 <UART_DMAError>:
{
 8001a96:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a98:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001a9a:	6823      	ldr	r3, [r4, #0]
 8001a9c:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001a9e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b21      	cmp	r3, #33	; 0x21
 8001aa6:	d010      	beq.n	8001aca <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8001aa8:	6823      	ldr	r3, [r4, #0]
 8001aaa:	695a      	ldr	r2, [r3, #20]
 8001aac:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001ab0:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b22      	cmp	r3, #34	; 0x22
 8001ab8:	d011      	beq.n	8001ade <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001aba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001abc:	f043 0310 	orr.w	r3, r3, #16
 8001ac0:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	f7ff ffe6 	bl	8001a94 <HAL_UART_ErrorCallback>
}
 8001ac8:	bd10      	pop	{r4, pc}
 8001aca:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001ace:	2a00      	cmp	r2, #0
 8001ad0:	d0ea      	beq.n	8001aa8 <UART_DMAError+0x12>
    huart->TxXferCount = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f7ff fd2e 	bl	8001538 <UART_EndTxTransfer>
 8001adc:	e7e4      	b.n	8001aa8 <UART_DMAError+0x12>
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001ade:	2a00      	cmp	r2, #0
 8001ae0:	d0eb      	beq.n	8001aba <UART_DMAError+0x24>
    huart->RxXferCount = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f7ff fd2f 	bl	800154a <UART_EndRxTransfer>
 8001aec:	e7e5      	b.n	8001aba <UART_DMAError+0x24>
	...

08001af0 <USART_DMA_Init>:

uint8_t uart_user_message[DMA_RX_BUFFER_SIZE];	/* Buffer received for user access */
uint8_t DMA_RX_Buffer[DMA_RX_BUFFER_SIZE];	/* Local DMA buffer for circular DMA */

void USART_DMA_Init(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma)
{
 8001af0:	b508      	push	{r3, lr}
	__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);   // enable idle line interrupt
 8001af2:	6802      	ldr	r2, [r0, #0]
 8001af4:	68d3      	ldr	r3, [r2, #12]
 8001af6:	f043 0310 	orr.w	r3, r3, #16
 8001afa:	60d3      	str	r3, [r2, #12]
	__HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);  // enable DMA Tx cplt interrupt
 8001afc:	680a      	ldr	r2, [r1, #0]
 8001afe:	6813      	ldr	r3, [r2, #0]
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	6013      	str	r3, [r2, #0]
	__HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT); 	// discable half complete interrupt
 8001b06:	680a      	ldr	r2, [r1, #0]
 8001b08:	6813      	ldr	r3, [r2, #0]
 8001b0a:	f023 0304 	bic.w	r3, r3, #4
 8001b0e:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_DMA(huart, DMA_RX_Buffer, DMA_RX_BUFFER_SIZE);
 8001b10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b14:	4901      	ldr	r1, [pc, #4]	; (8001b1c <USART_DMA_Init+0x2c>)
 8001b16:	f7ff ff43 	bl	80019a0 <HAL_UART_Receive_DMA>
}
 8001b1a:	bd08      	pop	{r3, pc}
 8001b1c:	200001e8 	.word	0x200001e8

08001b20 <DMA_IrqHandler>:
		DMA_IrqHandler(hdma, huart);
	}
}

void DMA_IrqHandler (DMA_HandleTypeDef *hdma, UART_HandleTypeDef *huart)
{	
 8001b20:	b570      	push	{r4, r5, r6, lr}
	uint16_t len;	/* To store UART Messade received len */

	DMA_Base_Registers *regs = (DMA_Base_Registers*)hdma->DmaBaseAddress;
 8001b22:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
	
	if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)	/* if the source is TC */
 8001b24:	6803      	ldr	r3, [r0, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	f012 0f02 	tst.w	r2, #2
 8001b2c:	d029      	beq.n	8001b82 <DMA_IrqHandler+0x62>
 8001b2e:	4604      	mov	r4, r0
	{
		/* Clear the transfer complete flag */
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b30:	4a24      	ldr	r2, [pc, #144]	; (8001bc4 <DMA_IrqHandler+0xa4>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d014      	beq.n	8001b60 <DMA_IrqHandler+0x40>
 8001b36:	3214      	adds	r2, #20
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d023      	beq.n	8001b84 <DMA_IrqHandler+0x64>
 8001b3c:	3214      	adds	r2, #20
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d022      	beq.n	8001b88 <DMA_IrqHandler+0x68>
 8001b42:	3214      	adds	r2, #20
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d022      	beq.n	8001b8e <DMA_IrqHandler+0x6e>
 8001b48:	3214      	adds	r2, #20
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d022      	beq.n	8001b94 <DMA_IrqHandler+0x74>
 8001b4e:	3214      	adds	r2, #20
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d002      	beq.n	8001b5a <DMA_IrqHandler+0x3a>
 8001b54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b58:	e003      	b.n	8001b62 <DMA_IrqHandler+0x42>
 8001b5a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b5e:	e000      	b.n	8001b62 <DMA_IrqHandler+0x42>
 8001b60:	2202      	movs	r2, #2
 8001b62:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <DMA_IrqHandler+0xa8>)
 8001b64:	605a      	str	r2, [r3, #4]

		/* Clear the uart_user_message buffer */
		memset(uart_user_message, 0, DMA_RX_BUFFER_SIZE);
 8001b66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4817      	ldr	r0, [pc, #92]	; (8001bcc <DMA_IrqHandler+0xac>)
 8001b6e:	f001 fc27 	bl	80033c0 <memset>

		/* Copying the message to uart_user_message buffer	*/
		len = DMA_RX_BUFFER_SIZE - hdma->Instance->CNDTR;
 8001b72:	6823      	ldr	r3, [r4, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	b292      	uxth	r2, r2
 8001b78:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8001b7c:	b292      	uxth	r2, r2
		if(len > DMA_RX_BUFFER_SIZE - 1)	return;
 8001b7e:	2aff      	cmp	r2, #255	; 0xff
 8001b80:	d90b      	bls.n	8001b9a <DMA_IrqHandler+0x7a>
        regs->IFCR = 0x3FU << hdma->ChannelIndex; 			/* Clear all interrupts */
		hdma->Instance->CMAR = (uint32_t)DMA_RX_Buffer;   	/* Set memory address for DMA again */
        hdma->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    		/* Set number of bytes to receive */
        hdma->Instance->CCR |= DMA_CCR_EN;            		/* Start DMA transfer */
	}
}
 8001b82:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b84:	2220      	movs	r2, #32
 8001b86:	e7ec      	b.n	8001b62 <DMA_IrqHandler+0x42>
 8001b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b8c:	e7e9      	b.n	8001b62 <DMA_IrqHandler+0x42>
 8001b8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b92:	e7e6      	b.n	8001b62 <DMA_IrqHandler+0x42>
 8001b94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b98:	e7e3      	b.n	8001b62 <DMA_IrqHandler+0x42>
		memcpy(uart_user_message, DMA_RX_Buffer, len);
 8001b9a:	4e0d      	ldr	r6, [pc, #52]	; (8001bd0 <DMA_IrqHandler+0xb0>)
 8001b9c:	4631      	mov	r1, r6
 8001b9e:	480b      	ldr	r0, [pc, #44]	; (8001bcc <DMA_IrqHandler+0xac>)
 8001ba0:	f001 fc00 	bl	80033a4 <memcpy>
        regs->IFCR = 0x3FU << hdma->ChannelIndex; 			/* Clear all interrupts */
 8001ba4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ba6:	233f      	movs	r3, #63	; 0x3f
 8001ba8:	4093      	lsls	r3, r2
 8001baa:	60ab      	str	r3, [r5, #8]
		hdma->Instance->CMAR = (uint32_t)DMA_RX_Buffer;   	/* Set memory address for DMA again */
 8001bac:	6823      	ldr	r3, [r4, #0]
 8001bae:	60de      	str	r6, [r3, #12]
        hdma->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    		/* Set number of bytes to receive */
 8001bb0:	6823      	ldr	r3, [r4, #0]
 8001bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bb6:	605a      	str	r2, [r3, #4]
        hdma->Instance->CCR |= DMA_CCR_EN;            		/* Start DMA transfer */
 8001bb8:	6822      	ldr	r2, [r4, #0]
 8001bba:	6813      	ldr	r3, [r2, #0]
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e7de      	b.n	8001b82 <DMA_IrqHandler+0x62>
 8001bc4:	40020008 	.word	0x40020008
 8001bc8:	40020000 	.word	0x40020000
 8001bcc:	200000e8 	.word	0x200000e8
 8001bd0:	200001e8 	.word	0x200001e8

08001bd4 <USART_IrqHandler>:
{
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	4608      	mov	r0, r1
	if (huart->Instance->SR & UART_FLAG_IDLE)           /* if Idle flag is set */
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	6811      	ldr	r1, [r2, #0]
 8001bdc:	f011 0f10 	tst.w	r1, #16
 8001be0:	d100      	bne.n	8001be4 <USART_IrqHandler+0x10>
 8001be2:	4770      	bx	lr
{
 8001be4:	b500      	push	{lr}
 8001be6:	b083      	sub	sp, #12
        tmp = huart->Instance->SR;                      /* Read status register */
 8001be8:	6811      	ldr	r1, [r2, #0]
 8001bea:	9101      	str	r1, [sp, #4]
        tmp = huart->Instance->DR;                      /* Read data register */
 8001bec:	6852      	ldr	r2, [r2, #4]
 8001bee:	9201      	str	r2, [sp, #4]
    	__HAL_DMA_DISABLE(hdma);       					/* Disabling DMA will force transfer complete interrupt if enabled */
 8001bf0:	6801      	ldr	r1, [r0, #0]
 8001bf2:	680a      	ldr	r2, [r1, #0]
 8001bf4:	f022 0201 	bic.w	r2, r2, #1
 8001bf8:	600a      	str	r2, [r1, #0]
		DMA_IrqHandler(hdma, huart);
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f7ff ff90 	bl	8001b20 <DMA_IrqHandler>
}
 8001c00:	b003      	add	sp, #12
 8001c02:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001c08 <blinkLed1>:
  can_vector[id].word_2 = data_word[2];
  can_vector[id].word_3 = data_word[3];
}

void blinkLed1(void)
{
 8001c08:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	4801      	ldr	r0, [pc, #4]	; (8001c14 <blinkLed1+0xc>)
 8001c0e:	f7ff f96f 	bl	8000ef0 <HAL_GPIO_TogglePin>
} /* Debug Led 1 */
 8001c12:	bd08      	pop	{r3, pc}
 8001c14:	40010800 	.word	0x40010800

08001c18 <canMessageReceived>:
	if(id > CAN_IDS_NUMBER - 1)	return;
 8001c18:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
 8001c1c:	d300      	bcc.n	8001c20 <canMessageReceived+0x8>
 8001c1e:	4770      	bx	lr
{
 8001c20:	b538      	push	{r3, r4, r5, lr}
 8001c22:	4604      	mov	r4, r0
 8001c24:	460d      	mov	r5, r1
  blinkLed1();
 8001c26:	f7ff ffef 	bl	8001c08 <blinkLed1>
  can_vector[id].word_0 = data_word[0];
 8001c2a:	882b      	ldrh	r3, [r5, #0]
 8001c2c:	4805      	ldr	r0, [pc, #20]	; (8001c44 <canMessageReceived+0x2c>)
 8001c2e:	f820 3034 	strh.w	r3, [r0, r4, lsl #3]
  can_vector[id].word_1 = data_word[1];
 8001c32:	886b      	ldrh	r3, [r5, #2]
 8001c34:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8001c38:	8063      	strh	r3, [r4, #2]
  can_vector[id].word_2 = data_word[2];
 8001c3a:	88ab      	ldrh	r3, [r5, #4]
 8001c3c:	80a3      	strh	r3, [r4, #4]
  can_vector[id].word_3 = data_word[3];
 8001c3e:	88eb      	ldrh	r3, [r5, #6]
 8001c40:	80e3      	strh	r3, [r4, #6]
}
 8001c42:	bd38      	pop	{r3, r4, r5, pc}
 8001c44:	200002e8 	.word	0x200002e8

08001c48 <blinkLed2>:

void blinkLed2(void)
{
 8001c48:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8001c4a:	2102      	movs	r1, #2
 8001c4c:	4801      	ldr	r0, [pc, #4]	; (8001c54 <blinkLed2+0xc>)
 8001c4e:	f7ff f94f 	bl	8000ef0 <HAL_GPIO_TogglePin>
} /* Debug Led 2 */
 8001c52:	bd08      	pop	{r3, pc}
 8001c54:	40010800 	.word	0x40010800

08001c58 <blinkLed3>:

void blinkLed3(void)
{
 8001c58:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8001c5a:	2110      	movs	r1, #16
 8001c5c:	4801      	ldr	r0, [pc, #4]	; (8001c64 <blinkLed3+0xc>)
 8001c5e:	f7ff f947 	bl	8000ef0 <HAL_GPIO_TogglePin>
} /* Debug Led 3 */
 8001c62:	bd08      	pop	{r3, pc}
 8001c64:	40010800 	.word	0x40010800

08001c68 <interfaceInit>:
{
 8001c68:	b508      	push	{r3, lr}
  USART_DMA_Init(&huart2, &hdma_usart2_rx);
 8001c6a:	4919      	ldr	r1, [pc, #100]	; (8001cd0 <interfaceInit+0x68>)
 8001c6c:	4819      	ldr	r0, [pc, #100]	; (8001cd4 <interfaceInit+0x6c>)
 8001c6e:	f7ff ff3f 	bl	8001af0 <USART_DMA_Init>
  USART_DMA_Init(&huart3, &hdma_usart3_rx);
 8001c72:	4919      	ldr	r1, [pc, #100]	; (8001cd8 <interfaceInit+0x70>)
 8001c74:	4819      	ldr	r0, [pc, #100]	; (8001cdc <interfaceInit+0x74>)
 8001c76:	f7ff ff3b 	bl	8001af0 <USART_DMA_Init>
  CAN_Config_Filter();
 8001c7a:	f000 f8ab 	bl	8001dd4 <CAN_Config_Filter>
  CAN_Config_Frames();
 8001c7e:	f000 f90d 	bl	8001e9c <CAN_Config_Frames>
  CAN_Receive_IT();
 8001c82:	f000 f8c7 	bl	8001e14 <CAN_Receive_IT>
  for(uint16_t i = 0; i < CAN_IDS_NUMBER; i++){
 8001c86:	2300      	movs	r3, #0
 8001c88:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001c8c:	d20b      	bcs.n	8001ca6 <interfaceInit+0x3e>
    can_vector[i].word_0 = 0;
 8001c8e:	4a14      	ldr	r2, [pc, #80]	; (8001ce0 <interfaceInit+0x78>)
 8001c90:	2100      	movs	r1, #0
 8001c92:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    can_vector[i].word_1 = 0;
 8001c96:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001c9a:	8051      	strh	r1, [r2, #2]
    can_vector[i].word_2 = 0;
 8001c9c:	8091      	strh	r1, [r2, #4]
    can_vector[i].word_3 = 0;
 8001c9e:	80d1      	strh	r1, [r2, #6]
  for(uint16_t i = 0; i < CAN_IDS_NUMBER; i++){
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	e7f0      	b.n	8001c88 <interfaceInit+0x20>
	blinkLed1();
 8001ca6:	f7ff ffaf 	bl	8001c08 <blinkLed1>
	blinkLed2();
 8001caa:	f7ff ffcd 	bl	8001c48 <blinkLed2>
	blinkLed3();
 8001cae:	f7ff ffd3 	bl	8001c58 <blinkLed3>
  HAL_Delay(1000);
 8001cb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cb6:	f7fe fa99 	bl	80001ec <HAL_Delay>
  nexInit();
 8001cba:	f000 fe39 	bl	8002930 <nexInit>
  packTimer.previous = HAL_GetTick();
 8001cbe:	f7fe fa8f 	bl	80001e0 <HAL_GetTick>
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <interfaceInit+0x7c>)
 8001cc4:	6018      	str	r0, [r3, #0]
  packTimer.interval = 1000;
 8001cc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cca:	809a      	strh	r2, [r3, #4]
}
 8001ccc:	bd08      	pop	{r3, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000ef8 	.word	0x20000ef8
 8001cd4:	20001000 	.word	0x20001000
 8001cd8:	20000f3c 	.word	0x20000f3c
 8001cdc:	20000f80 	.word	0x20000f80
 8001ce0:	200002e8 	.word	0x200002e8
 8001ce4:	20000e2c 	.word	0x20000e2c

08001ce8 <timerAtualization>:

void timerAtualization(void)
{
 8001ce8:	b508      	push	{r3, lr}
  actualTimer = HAL_GetTick();
 8001cea:	f7fe fa79 	bl	80001e0 <HAL_GetTick>
 8001cee:	4b01      	ldr	r3, [pc, #4]	; (8001cf4 <timerAtualization+0xc>)
 8001cf0:	6018      	str	r0, [r3, #0]
}
 8001cf2:	bd08      	pop	{r3, pc}
 8001cf4:	20000e28 	.word	0x20000e28

08001cf8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001cf8:	b508      	push	{r3, lr}

  hcan.Instance = CAN1;
 8001cfa:	480e      	ldr	r0, [pc, #56]	; (8001d34 <MX_CAN_Init+0x3c>)
 8001cfc:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <MX_CAN_Init+0x40>)
 8001cfe:	6003      	str	r3, [r0, #0]
  hcan.Init.Prescaler = 9;
 8001d00:	2309      	movs	r3, #9
 8001d02:	6043      	str	r3, [r0, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	6083      	str	r3, [r0, #8]
  hcan.Init.SJW = CAN_SJW_1TQ;
 8001d08:	60c3      	str	r3, [r0, #12]
  hcan.Init.BS1 = CAN_BS1_6TQ;
 8001d0a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001d0e:	6102      	str	r2, [r0, #16]
  hcan.Init.BS2 = CAN_BS2_1TQ;
 8001d10:	6143      	str	r3, [r0, #20]
  hcan.Init.TTCM = DISABLE;
 8001d12:	6183      	str	r3, [r0, #24]
  hcan.Init.ABOM = ENABLE;
 8001d14:	2201      	movs	r2, #1
 8001d16:	61c2      	str	r2, [r0, #28]
  hcan.Init.AWUM = DISABLE;
 8001d18:	6203      	str	r3, [r0, #32]
  hcan.Init.NART = DISABLE;
 8001d1a:	6243      	str	r3, [r0, #36]	; 0x24
  hcan.Init.RFLM = DISABLE;
 8001d1c:	6283      	str	r3, [r0, #40]	; 0x28
  hcan.Init.TXFP = DISABLE;
 8001d1e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001d20:	f7fe fafc 	bl	800031c <HAL_CAN_Init>
 8001d24:	b900      	cbnz	r0, 8001d28 <MX_CAN_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8001d26:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8001d28:	2147      	movs	r1, #71	; 0x47
 8001d2a:	4804      	ldr	r0, [pc, #16]	; (8001d3c <MX_CAN_Init+0x44>)
 8001d2c:	f000 fd22 	bl	8002774 <_Error_Handler>
}
 8001d30:	e7f9      	b.n	8001d26 <MX_CAN_Init+0x2e>
 8001d32:	bf00      	nop
 8001d34:	20000eb4 	.word	0x20000eb4
 8001d38:	40006400 	.word	0x40006400
 8001d3c:	08003c98 	.word	0x08003c98

08001d40 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(canHandle->Instance==CAN1)
 8001d40:	6802      	ldr	r2, [r0, #0]
 8001d42:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <HAL_CAN_MspInit+0x88>)
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d000      	beq.n	8001d4a <HAL_CAN_MspInit+0xa>
 8001d48:	4770      	bx	lr
{
 8001d4a:	b530      	push	{r4, r5, lr}
 8001d4c:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d4e:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8001d52:	69da      	ldr	r2, [r3, #28]
 8001d54:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001d58:	61da      	str	r2, [r3, #28]
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d60:	9301      	str	r3, [sp, #4]
 8001d62:	9b01      	ldr	r3, [sp, #4]
  
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d68:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6a:	2400      	movs	r4, #0
 8001d6c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d70:	4d16      	ldr	r5, [pc, #88]	; (8001dcc <HAL_CAN_MspInit+0x8c>)
 8001d72:	a902      	add	r1, sp, #8
 8001d74:	4628      	mov	r0, r5
 8001d76:	f7fe ffa5 	bl	8000cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d7e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d84:	2303      	movs	r3, #3
 8001d86:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d88:	a902      	add	r1, sp, #8
 8001d8a:	4628      	mov	r0, r5
 8001d8c:	f7fe ff9a 	bl	8000cc4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001d90:	4a0f      	ldr	r2, [pc, #60]	; (8001dd0 <HAL_CAN_MspInit+0x90>)
 8001d92:	6853      	ldr	r3, [r2, #4]
 8001d94:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001d98:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da0:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8001da2:	4622      	mov	r2, r4
 8001da4:	4621      	mov	r1, r4
 8001da6:	2013      	movs	r0, #19
 8001da8:	f7fe fe94 	bl	8000ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001dac:	2013      	movs	r0, #19
 8001dae:	f7fe fec5 	bl	8000b3c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001db2:	4622      	mov	r2, r4
 8001db4:	4621      	mov	r1, r4
 8001db6:	2014      	movs	r0, #20
 8001db8:	f7fe fe8c 	bl	8000ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001dbc:	2014      	movs	r0, #20
 8001dbe:	f7fe febd 	bl	8000b3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001dc2:	b007      	add	sp, #28
 8001dc4:	bd30      	pop	{r4, r5, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40006400 	.word	0x40006400
 8001dcc:	40010c00 	.word	0x40010c00
 8001dd0:	40010000 	.word	0x40010000

08001dd4 <CAN_Config_Filter>:
} 

/* USER CODE BEGIN 1 */

/*Configuring the CAN Filter:*/
void CAN_Config_Filter(void){
 8001dd4:	b500      	push	{lr}
 8001dd6:	b08b      	sub	sp, #44	; 0x2c
	uint32_t filter_id = 0x00000000;
  uint32_t filter_mask = 0x00000000;
	//uint32_t filter_mask = 0xFFFFFF00;  //256
	CAN_FilterConfTypeDef filter;

  filter.FilterIdHigh = ((filter_id << 5)  | (filter_id >> (32 - 5))) & 0xFFFF; // STID[10:0] & EXTID[17:13]
 8001dd8:	2300      	movs	r3, #0
 8001dda:	9300      	str	r3, [sp, #0]
  filter.FilterIdLow = (filter_id >> (11 - 3)) & 0xFFF8; // EXID[12:5] & 3 Reserved bits
 8001ddc:	9301      	str	r3, [sp, #4]
  filter.FilterMaskIdHigh = ((filter_mask << 5)  | (filter_mask >> (32 - 5))) & 0xFFFF;
 8001dde:	9302      	str	r3, [sp, #8]
  filter.FilterMaskIdLow = (filter_mask >> (11 - 3)) & 0xFFF8;
 8001de0:	9303      	str	r3, [sp, #12]
  filter.FilterFIFOAssignment = 0;
 8001de2:	9304      	str	r3, [sp, #16]
  filter.FilterNumber = 0;
 8001de4:	9305      	str	r3, [sp, #20]
  filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001de6:	9306      	str	r3, [sp, #24]
  filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001de8:	2301      	movs	r3, #1
 8001dea:	9307      	str	r3, [sp, #28]
  filter.FilterActivation = ENABLE;
 8001dec:	9308      	str	r3, [sp, #32]
  filter.BankNumber = 14;
 8001dee:	230e      	movs	r3, #14
 8001df0:	9309      	str	r3, [sp, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK)  // RETORNA O STATUS DA FUNCAO
 8001df2:	4669      	mov	r1, sp
 8001df4:	4805      	ldr	r0, [pc, #20]	; (8001e0c <CAN_Config_Filter+0x38>)
 8001df6:	f7fe fa0d 	bl	8000214 <HAL_CAN_ConfigFilter>
 8001dfa:	b910      	cbnz	r0, 8001e02 <CAN_Config_Filter+0x2e>
	{
	  _Error_Handler(__FILE__, __LINE__);
	}
}
 8001dfc:	b00b      	add	sp, #44	; 0x2c
 8001dfe:	f85d fb04 	ldr.w	pc, [sp], #4
	  _Error_Handler(__FILE__, __LINE__);
 8001e02:	21a4      	movs	r1, #164	; 0xa4
 8001e04:	4802      	ldr	r0, [pc, #8]	; (8001e10 <CAN_Config_Filter+0x3c>)
 8001e06:	f000 fcb5 	bl	8002774 <_Error_Handler>
}
 8001e0a:	e7f7      	b.n	8001dfc <CAN_Config_Filter+0x28>
 8001e0c:	20000eb4 	.word	0x20000eb4
 8001e10:	08003c98 	.word	0x08003c98

08001e14 <CAN_Receive_IT>:
	hcan.pTxMsg->IDE = CAN_ID_STD;//STANDARD ID 11b|EXTENDED ID 29b /Specifies the type of identifier for the message that will be transmitted.
	hcan.pTxMsg->DLC = 8; //Specifies the length of the frame that will be transmitted.
}

/*Start the Reception process and enable reception interrupt*/
void CAN_Receive_IT(void){
 8001e14:	b508      	push	{r3, lr}
	if (HAL_CAN_Receive_IT(&hcan, CAN_FIFO0) != HAL_OK)
 8001e16:	2100      	movs	r1, #0
 8001e18:	4804      	ldr	r0, [pc, #16]	; (8001e2c <CAN_Receive_IT+0x18>)
 8001e1a:	f7fe fbcb 	bl	80005b4 <HAL_CAN_Receive_IT>
 8001e1e:	b900      	cbnz	r0, 8001e22 <CAN_Receive_IT+0xe>
	{
	  /* Reception Error */
	  Error_Handler();
	}
}
 8001e20:	bd08      	pop	{r3, pc}
	  Error_Handler();
 8001e22:	21c0      	movs	r1, #192	; 0xc0
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <CAN_Receive_IT+0x1c>)
 8001e26:	f000 fca5 	bl	8002774 <_Error_Handler>
}
 8001e2a:	e7f9      	b.n	8001e20 <CAN_Receive_IT+0xc>
 8001e2c:	20000eb4 	.word	0x20000eb4
 8001e30:	08003c98 	.word	0x08003c98

08001e34 <CAN_Transmit2>:
	{
		//Error_Handler();
	}
}

void CAN_Transmit2(CanIdData_t *can_vector, uint32_t id){
 8001e34:	b510      	push	{r4, lr}
 8001e36:	4603      	mov	r3, r0

	hcan.pTxMsg->StdId = id; //Specifies the standard identifier
 8001e38:	480e      	ldr	r0, [pc, #56]	; (8001e74 <CAN_Transmit2+0x40>)
 8001e3a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001e3c:	6011      	str	r1, [r2, #0]
//	for(uint8_t i=0; i < hcan.pTxMsg->DLC; i++)
	hcan.pTxMsg->Data[0] = can_vector[id].word_0;
 8001e3e:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8001e42:	f833 1031 	ldrh.w	r1, [r3, r1, lsl #3]
 8001e46:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001e48:	7519      	strb	r1, [r3, #20]
	hcan.pTxMsg->Data[1] = can_vector[id].word_0 << 8;
 8001e4a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	754b      	strb	r3, [r1, #21]
	hcan.pTxMsg->Data[2] = can_vector[id].word_1;
 8001e50:	8854      	ldrh	r4, [r2, #2]
 8001e52:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001e54:	758c      	strb	r4, [r1, #22]
	hcan.pTxMsg->Data[3] = can_vector[id].word_1 << 8;
 8001e56:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001e58:	75cb      	strb	r3, [r1, #23]
	hcan.pTxMsg->Data[4] = can_vector[id].word_2;
 8001e5a:	8894      	ldrh	r4, [r2, #4]
 8001e5c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001e5e:	760c      	strb	r4, [r1, #24]
	hcan.pTxMsg->Data[5] = can_vector[id].word_2 << 8;
 8001e60:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001e62:	764b      	strb	r3, [r1, #25]
	hcan.pTxMsg->Data[6] = can_vector[id].word_3;
 8001e64:	88d1      	ldrh	r1, [r2, #6]
 8001e66:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001e68:	7691      	strb	r1, [r2, #26]
	hcan.pTxMsg->Data[7] = can_vector[id].word_3 << 8;
 8001e6a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001e6c:	76d3      	strb	r3, [r2, #27]
	/*Start the Transmission process:*/
	HAL_StatusTypeDef trans_status = HAL_CAN_Transmit_IT(&hcan);
 8001e6e:	f7fe faf0 	bl	8000452 <HAL_CAN_Transmit_IT>
	//Error handler
	if (trans_status != HAL_OK)
	{
		//Error_Handler();
	}
}
 8001e72:	bd10      	pop	{r4, pc}
 8001e74:	20000eb4 	.word	0x20000eb4

08001e78 <initRxMes>:

void initRxMes(CanRxMsgTypeDef *RxMessage)
{
  uint8_t i = 0;

  RxMessage->StdId = 0x321;
 8001e78:	f240 3321 	movw	r3, #801	; 0x321
 8001e7c:	6003      	str	r3, [r0, #0]
  RxMessage->ExtId = 0x00;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	6043      	str	r3, [r0, #4]
  RxMessage->IDE = CAN_ID_STD;
 8001e82:	6083      	str	r3, [r0, #8]
  RxMessage->DLC = 0;
 8001e84:	6103      	str	r3, [r0, #16]
  RxMessage->FMI = 0;
 8001e86:	61c3      	str	r3, [r0, #28]
  for (i = 0;i < 8;i++)
 8001e88:	e004      	b.n	8001e94 <initRxMes+0x1c>
  {
    RxMessage->Data[i] = 0x00;
 8001e8a:	18c2      	adds	r2, r0, r3
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	7511      	strb	r1, [r2, #20]
  for (i = 0;i < 8;i++)
 8001e90:	3301      	adds	r3, #1
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b07      	cmp	r3, #7
 8001e96:	d9f8      	bls.n	8001e8a <initRxMes+0x12>
  }
}
 8001e98:	4770      	bx	lr
	...

08001e9c <CAN_Config_Frames>:
void CAN_Config_Frames(void){
 8001e9c:	b510      	push	{r4, lr}
	initRxMes(&RxMessage);
 8001e9e:	4c0a      	ldr	r4, [pc, #40]	; (8001ec8 <CAN_Config_Frames+0x2c>)
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	f7ff ffe9 	bl	8001e78 <initRxMes>
	hcan.pTxMsg = &TxMessage;
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <CAN_Config_Frames+0x30>)
 8001ea8:	f104 0224 	add.w	r2, r4, #36	; 0x24
 8001eac:	631a      	str	r2, [r3, #48]	; 0x30
	hcan.pRxMsg = &RxMessage;
 8001eae:	635c      	str	r4, [r3, #52]	; 0x34
	hcan.pTxMsg->StdId = 0x300; //Specifies the standard identifier
 8001eb0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eb4:	6263      	str	r3, [r4, #36]	; 0x24
	hcan.pTxMsg->ExtId = 0x01; //Specifies the extended identifier.
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	62a3      	str	r3, [r4, #40]	; 0x28
	hcan.pTxMsg->RTR = CAN_RTR_DATA; //FRAME DE DADO|FRAME REMOTA / Specifies the type of frame for the message that will be transmitted.
 8001eba:	2300      	movs	r3, #0
 8001ebc:	6323      	str	r3, [r4, #48]	; 0x30
	hcan.pTxMsg->IDE = CAN_ID_STD;//STANDARD ID 11b|EXTENDED ID 29b /Specifies the type of identifier for the message that will be transmitted.
 8001ebe:	62e3      	str	r3, [r4, #44]	; 0x2c
	hcan.pTxMsg->DLC = 8; //Specifies the length of the frame that will be transmitted.
 8001ec0:	2308      	movs	r3, #8
 8001ec2:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001ec4:	bd10      	pop	{r4, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000090 	.word	0x20000090
 8001ecc:	20000eb4 	.word	0x20000eb4

08001ed0 <HAL_CAN_ErrorCallback>:

//void HAL_CAN_TxCpltCallback(CAN_HandleTypeDef * hcan){}

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef * hcan)
{
 8001ed0:	b510      	push	{r4, lr}
 8001ed2:	4604      	mov	r4, r0
	/* For CAN Rx frames received in FIFO number 0 */
  __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ed4:	6803      	ldr	r3, [r0, #0]
 8001ed6:	2210      	movs	r2, #16
 8001ed8:	60da      	str	r2, [r3, #12]
  HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 8001eda:	2100      	movs	r1, #0
 8001edc:	f7fe fb6a 	bl	80005b4 <HAL_CAN_Receive_IT>
  __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 8001ee0:	6823      	ldr	r3, [r4, #0]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	60da      	str	r2, [r3, #12]

	/* For CAN Rx frames received in FIFO number 1 */
  //__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
  //__HAL_CAN_Receive_IT(hcan, CAN_FIFO1);
	__HAL_CAN_RESET_HANDLE_STATE(hcan);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
	__HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG | CAN_IT_EPV | CAN_IT_BOF | CAN_IT_LEC | CAN_IT_ERR | CAN_IT_FMP0| CAN_IT_FOV0| CAN_IT_FMP1| CAN_IT_FOV1| CAN_IT_TME);
 8001eec:	6821      	ldr	r1, [r4, #0]
 8001eee:	694b      	ldr	r3, [r1, #20]
 8001ef0:	f443 430f 	orr.w	r3, r3, #36608	; 0x8f00
 8001ef4:	f043 035b 	orr.w	r3, r3, #91	; 0x5b
 8001ef8:	614b      	str	r3, [r1, #20]
	__HAL_UNLOCK(hcan);
 8001efa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 8001efe:	bd10      	pop	{r4, pc}

08001f00 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001f00:	b500      	push	{lr}
 8001f02:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f04:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <MX_DMA_Init+0x40>)
 8001f06:	695a      	ldr	r2, [r3, #20]
 8001f08:	f042 0201 	orr.w	r2, r2, #1
 8001f0c:	615a      	str	r2, [r3, #20]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	200d      	movs	r0, #13
 8001f1e:	f7fe fdd9 	bl	8000ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001f22:	200d      	movs	r0, #13
 8001f24:	f7fe fe0a 	bl	8000b3c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	2010      	movs	r0, #16
 8001f2e:	f7fe fdd1 	bl	8000ad4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001f32:	2010      	movs	r0, #16
 8001f34:	f7fe fe02 	bl	8000b3c <HAL_NVIC_EnableIRQ>

}
 8001f38:	b003      	add	sp, #12
 8001f3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000

08001f44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f48:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f4a:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <MX_GPIO_Init+0x8c>)
 8001f4c:	699a      	ldr	r2, [r3, #24]
 8001f4e:	f042 0220 	orr.w	r2, r2, #32
 8001f52:	619a      	str	r2, [r3, #24]
 8001f54:	699a      	ldr	r2, [r3, #24]
 8001f56:	f002 0220 	and.w	r2, r2, #32
 8001f5a:	9201      	str	r2, [sp, #4]
 8001f5c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5e:	699a      	ldr	r2, [r3, #24]
 8001f60:	f042 0204 	orr.w	r2, r2, #4
 8001f64:	619a      	str	r2, [r3, #24]
 8001f66:	699a      	ldr	r2, [r3, #24]
 8001f68:	f002 0204 	and.w	r2, r2, #4
 8001f6c:	9202      	str	r2, [sp, #8]
 8001f6e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f70:	699a      	ldr	r2, [r3, #24]
 8001f72:	f042 0208 	orr.w	r2, r2, #8
 8001f76:	619a      	str	r2, [r3, #24]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	9303      	str	r3, [sp, #12]
 8001f80:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin|LED_3_Pin|CSN_nRF24_Pin 
 8001f82:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8001fd8 <MX_GPIO_Init+0x94>
 8001f86:	2200      	movs	r2, #0
 8001f88:	f649 7113 	movw	r1, #40723	; 0x9f13
 8001f8c:	4640      	mov	r0, r8
 8001f8e:	f7fe ffa9 	bl	8000ee4 <HAL_GPIO_WritePin>
                          |CE_nRF24_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS_XBEE_Pin|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001f92:	4c10      	ldr	r4, [pc, #64]	; (8001fd4 <MX_GPIO_Init+0x90>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	2139      	movs	r1, #57	; 0x39
 8001f98:	4620      	mov	r0, r4
 8001f9a:	f7fe ffa3 	bl	8000ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PA10 PA11 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|CSN_nRF24_Pin 
 8001f9e:	f649 7313 	movw	r3, #40723	; 0x9f13
 8001fa2:	9304      	str	r3, [sp, #16]
                          |CE_nRF24_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa4:	2701      	movs	r7, #1
 8001fa6:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2600      	movs	r6, #0
 8001faa:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fac:	2502      	movs	r5, #2
 8001fae:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb0:	a904      	add	r1, sp, #16
 8001fb2:	4640      	mov	r0, r8
 8001fb4:	f7fe fe86 	bl	8000cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = SS_XBEE_Pin|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001fb8:	2339      	movs	r3, #57	; 0x39
 8001fba:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fbc:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc0:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc2:	a904      	add	r1, sp, #16
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f7fe fe7d 	bl	8000cc4 <HAL_GPIO_Init>

}
 8001fca:	b008      	add	sp, #32
 8001fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40010c00 	.word	0x40010c00
 8001fd8:	40010800 	.word	0x40010800

08001fdc <brake_bias>:
	return pressao_traseira;

}

int brake_bias(int pressao_dianteira, int pressao_traseira){
 	 int b_bias = (pressao_dianteira / (pressao_dianteira + pressao_traseira))*100;
 8001fdc:	4401      	add	r1, r0
 8001fde:	fb90 f0f1 	sdiv	r0, r0, r1
 	 return b_bias;
}
 8001fe2:	2364      	movs	r3, #100	; 0x64
 8001fe4:	fb03 f000 	mul.w	r0, r3, r0
 8001fe8:	4770      	bx	lr

08001fea <get_individual_flag16>:
	if(entrada & (1<<position))
 8001fea:	fa41 f000 	asr.w	r0, r1, r0
 8001fee:	f010 0001 	ands.w	r0, r0, #1
 8001ff2:	d000      	beq.n	8001ff6 <get_individual_flag16+0xc>
		return 1;   // Ocorre se a entrada, tiver no bit de position i, o valor 1.
 8001ff4:	2001      	movs	r0, #1
}
 8001ff6:	4770      	bx	lr

08001ff8 <uart3MessageReceived>:


void uart3MessageReceived(void)
{
 8001ff8:	b508      	push	{r3, lr}
  /* If the message is to change the nextion page */
  if(uart_user_message[0] == 0x71 && uart_user_message[5] == 0xFF && uart_user_message[6] == 0xFF && uart_user_message[7] == 0xFF)
 8001ffa:	4b23      	ldr	r3, [pc, #140]	; (8002088 <uart3MessageReceived+0x90>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b71      	cmp	r3, #113	; 0x71
 8002000:	d000      	beq.n	8002004 <uart3MessageReceived+0xc>
      actual_page = PAGE5;
      previous_page = PAGE5;
      NexPageShow(PAGE5);
    }
  }
}
 8002002:	bd08      	pop	{r3, pc}
  if(uart_user_message[0] == 0x71 && uart_user_message[5] == 0xFF && uart_user_message[6] == 0xFF && uart_user_message[7] == 0xFF)
 8002004:	4b20      	ldr	r3, [pc, #128]	; (8002088 <uart3MessageReceived+0x90>)
 8002006:	795b      	ldrb	r3, [r3, #5]
 8002008:	2bff      	cmp	r3, #255	; 0xff
 800200a:	d1fa      	bne.n	8002002 <uart3MessageReceived+0xa>
 800200c:	4b1e      	ldr	r3, [pc, #120]	; (8002088 <uart3MessageReceived+0x90>)
 800200e:	799b      	ldrb	r3, [r3, #6]
 8002010:	2bff      	cmp	r3, #255	; 0xff
 8002012:	d1f6      	bne.n	8002002 <uart3MessageReceived+0xa>
 8002014:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <uart3MessageReceived+0x90>)
 8002016:	79db      	ldrb	r3, [r3, #7]
 8002018:	2bff      	cmp	r3, #255	; 0xff
 800201a:	d1f2      	bne.n	8002002 <uart3MessageReceived+0xa>
	  blinkLed3();
 800201c:	f7ff fe1c 	bl	8001c58 <blinkLed3>
    switch(uart_user_message[1])
 8002020:	4b19      	ldr	r3, [pc, #100]	; (8002088 <uart3MessageReceived+0x90>)
 8002022:	785b      	ldrb	r3, [r3, #1]
 8002024:	2b05      	cmp	r3, #5
 8002026:	d8ec      	bhi.n	8002002 <uart3MessageReceived+0xa>
 8002028:	e8df f003 	tbb	[pc, r3]
 800202c:	18110a03 	.word	0x18110a03
 8002030:	261f      	.short	0x261f
      actual_page = PAGE0;
 8002032:	4b16      	ldr	r3, [pc, #88]	; (800208c <uart3MessageReceived+0x94>)
 8002034:	2000      	movs	r0, #0
 8002036:	7018      	strb	r0, [r3, #0]
      previous_page = PAGE0;
 8002038:	7058      	strb	r0, [r3, #1]
      NexPageShow(PAGE0);
 800203a:	f000 fc95 	bl	8002968 <NexPageShow>
      break;
 800203e:	e7e0      	b.n	8002002 <uart3MessageReceived+0xa>
      actual_page = PAGE1;
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <uart3MessageReceived+0x94>)
 8002042:	2001      	movs	r0, #1
 8002044:	7018      	strb	r0, [r3, #0]
      previous_page = PAGE1;
 8002046:	7058      	strb	r0, [r3, #1]
      NexPageShow(PAGE1);
 8002048:	f000 fc8e 	bl	8002968 <NexPageShow>
      break;
 800204c:	e7d9      	b.n	8002002 <uart3MessageReceived+0xa>
      actual_page = PAGE2;
 800204e:	4b0f      	ldr	r3, [pc, #60]	; (800208c <uart3MessageReceived+0x94>)
 8002050:	2002      	movs	r0, #2
 8002052:	7018      	strb	r0, [r3, #0]
      previous_page = PAGE2;
 8002054:	7058      	strb	r0, [r3, #1]
      NexPageShow(PAGE2);
 8002056:	f000 fc87 	bl	8002968 <NexPageShow>
      break;
 800205a:	e7d2      	b.n	8002002 <uart3MessageReceived+0xa>
      actual_page = PAGE3;
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <uart3MessageReceived+0x94>)
 800205e:	2003      	movs	r0, #3
 8002060:	7018      	strb	r0, [r3, #0]
      previous_page = PAGE3;
 8002062:	7058      	strb	r0, [r3, #1]
      NexPageShow(PAGE3);
 8002064:	f000 fc80 	bl	8002968 <NexPageShow>
      break;
 8002068:	e7cb      	b.n	8002002 <uart3MessageReceived+0xa>
      actual_page = PAGE4;
 800206a:	4b08      	ldr	r3, [pc, #32]	; (800208c <uart3MessageReceived+0x94>)
 800206c:	2004      	movs	r0, #4
 800206e:	7018      	strb	r0, [r3, #0]
      previous_page = PAGE4;
 8002070:	7058      	strb	r0, [r3, #1]
      NexPageShow(PAGE4);
 8002072:	f000 fc79 	bl	8002968 <NexPageShow>
      break;
 8002076:	e7c4      	b.n	8002002 <uart3MessageReceived+0xa>
      actual_page = PAGE5;
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <uart3MessageReceived+0x94>)
 800207a:	2005      	movs	r0, #5
 800207c:	7018      	strb	r0, [r3, #0]
      previous_page = PAGE5;
 800207e:	7058      	strb	r0, [r3, #1]
      NexPageShow(PAGE5);
 8002080:	f000 fc72 	bl	8002968 <NexPageShow>
}
 8002084:	e7bd      	b.n	8002002 <uart3MessageReceived+0xa>
 8002086:	bf00      	nop
 8002088:	200000e8 	.word	0x200000e8
 800208c:	200000d0 	.word	0x200000d0

08002090 <nextionLoop>:


void nextionLoop(void)
{
 8002090:	b510      	push	{r4, lr}
//    actual_advice = NO_ADVICE;
//  }
//
//  if(NO_ADVICE)

  switch(actual_page)
 8002092:	4ba7      	ldr	r3, [pc, #668]	; (8002330 <nextionLoop+0x2a0>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	3b01      	subs	r3, #1
 8002098:	2b07      	cmp	r3, #7
 800209a:	f200 8239 	bhi.w	8002510 <nextionLoop+0x480>
 800209e:	e8df f013 	tbh	[pc, r3, lsl #1]
 80020a2:	0008      	.short	0x0008
 80020a4:	00ae0048 	.word	0x00ae0048
 80020a8:	01b90161 	.word	0x01b90161
 80020ac:	027d01cf 	.word	0x027d01cf
 80020b0:	02e7      	.short	0x02e7
      break;
    
    case PAGE1:


      if(_flag_information_to_send == 0){
 80020b2:	4b9f      	ldr	r3, [pc, #636]	; (8002330 <nextionLoop+0x2a0>)
 80020b4:	789b      	ldrb	r3, [r3, #2]
 80020b6:	b17b      	cbz	r3, 80020d8 <nextionLoop+0x48>
        NexNumberSetValue(0, can_vector[52].word_1);  // Battery Percent
      }

      else if(_flag_information_to_send == 1){
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d014      	beq.n	80020e6 <nextionLoop+0x56>
        NexProgressBarSetValue(0, can_vector[52].word_1); // Battery Percent
      }

      else if(_flag_information_to_send == 2){
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d019      	beq.n	80020f4 <nextionLoop+0x64>
        NexXfloatSetValue(1, can_vector[102].word_3); // Hodometer
      }

      else if(_flag_information_to_send == 3){
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d01e      	beq.n	8002102 <nextionLoop+0x72>
      }

      // else if(_flag_information_to_send == 4)
      //   NexNumberSetValue(3, brake_bias); // Brake Bias

      else if(_flag_information_to_send == 5){
 80020c4:	2b05      	cmp	r3, #5
 80020c6:	d023      	beq.n	8002110 <nextionLoop+0x80>
          NexTextSetText(0, "OFF");
        else if(actual_advice == 0)
          NexTextSetText(0, "ON");
      }

      else if(_flag_information_to_send == 6){
 80020c8:	2b06      	cmp	r3, #6
 80020ca:	d02b      	beq.n	8002124 <nextionLoop+0x94>
        NexNumberSetValue(2, can_vector[106].word_0); // Torque
      }

      else{
        _flag_information_to_send = -1;
 80020cc:	4b98      	ldr	r3, [pc, #608]	; (8002330 <nextionLoop+0x2a0>)
 80020ce:	22ff      	movs	r2, #255	; 0xff
 80020d0:	709a      	strb	r2, [r3, #2]
        blinkLed1();
 80020d2:	f7ff fd99 	bl	8001c08 <blinkLed1>
 80020d6:	e21b      	b.n	8002510 <nextionLoop+0x480>
        NexNumberSetValue(0, can_vector[52].word_1);  // Battery Percent
 80020d8:	4b96      	ldr	r3, [pc, #600]	; (8002334 <nextionLoop+0x2a4>)
 80020da:	f8b3 11a2 	ldrh.w	r1, [r3, #418]	; 0x1a2
 80020de:	2000      	movs	r0, #0
 80020e0:	f000 fc84 	bl	80029ec <NexNumberSetValue>
 80020e4:	e214      	b.n	8002510 <nextionLoop+0x480>
        NexProgressBarSetValue(0, can_vector[52].word_1); // Battery Percent
 80020e6:	4b93      	ldr	r3, [pc, #588]	; (8002334 <nextionLoop+0x2a4>)
 80020e8:	f8b3 11a2 	ldrh.w	r1, [r3, #418]	; 0x1a2
 80020ec:	2000      	movs	r0, #0
 80020ee:	f000 fcdd 	bl	8002aac <NexProgressBarSetValue>
 80020f2:	e20d      	b.n	8002510 <nextionLoop+0x480>
        NexXfloatSetValue(1, can_vector[102].word_3); // Hodometer
 80020f4:	4b8f      	ldr	r3, [pc, #572]	; (8002334 <nextionLoop+0x2a4>)
 80020f6:	f8b3 1336 	ldrh.w	r1, [r3, #822]	; 0x336
 80020fa:	2001      	movs	r0, #1
 80020fc:	f000 fca6 	bl	8002a4c <NexXfloatSetValue>
 8002100:	e206      	b.n	8002510 <nextionLoop+0x480>
        NexXfloatSetValue(0, can_vector[105].word_0); // Speed
 8002102:	4b8c      	ldr	r3, [pc, #560]	; (8002334 <nextionLoop+0x2a4>)
 8002104:	f8b3 1348 	ldrh.w	r1, [r3, #840]	; 0x348
 8002108:	2000      	movs	r0, #0
 800210a:	f000 fc9f 	bl	8002a4c <NexXfloatSetValue>
 800210e:	e1ff      	b.n	8002510 <nextionLoop+0x480>
        else if(actual_advice == 0)
 8002110:	4b87      	ldr	r3, [pc, #540]	; (8002330 <nextionLoop+0x2a0>)
 8002112:	78db      	ldrb	r3, [r3, #3]
 8002114:	2b00      	cmp	r3, #0
 8002116:	f040 81fb 	bne.w	8002510 <nextionLoop+0x480>
          NexTextSetText(0, "ON");
 800211a:	4987      	ldr	r1, [pc, #540]	; (8002338 <nextionLoop+0x2a8>)
 800211c:	2000      	movs	r0, #0
 800211e:	f000 fc39 	bl	8002994 <NexTextSetText>
 8002122:	e1f5      	b.n	8002510 <nextionLoop+0x480>
        NexNumberSetValue(2, can_vector[106].word_0); // Torque
 8002124:	4b83      	ldr	r3, [pc, #524]	; (8002334 <nextionLoop+0x2a4>)
 8002126:	f8b3 1350 	ldrh.w	r1, [r3, #848]	; 0x350
 800212a:	2002      	movs	r0, #2
 800212c:	f000 fc5e 	bl	80029ec <NexNumberSetValue>
 8002130:	e1ee      	b.n	8002510 <nextionLoop+0x480>
      break;


    case PAGE2:

      if(_flag_information_to_send == 0){
 8002132:	4b7f      	ldr	r3, [pc, #508]	; (8002330 <nextionLoop+0x2a0>)
 8002134:	789b      	ldrb	r3, [r3, #2]
 8002136:	b1db      	cbz	r3, 8002170 <nextionLoop+0xe0>
         NexNumberSetValue(4, can_vector[52].word_1);  // Battery Percent
      }

      else if(_flag_information_to_send == 1){
 8002138:	2b01      	cmp	r3, #1
 800213a:	d020      	beq.n	800217e <nextionLoop+0xee>
        NexProgressBarSetValue(1, can_vector[52].word_1); // Battery Percent
      }

      else if(_flag_information_to_send == 2){
 800213c:	2b02      	cmp	r3, #2
 800213e:	d025      	beq.n	800218c <nextionLoop+0xfc>
        NexXfloatSetValue(0, can_vector[102].word_3); // Hodometer
      }

      else if(_flag_information_to_send == 3){
 8002140:	2b03      	cmp	r3, #3
 8002142:	d02a      	beq.n	800219a <nextionLoop+0x10a>
        NexXfloatSetValue(1, can_vector[105].word_3); // Speed
      }

      else if(_flag_information_to_send == 4){
 8002144:	2b04      	cmp	r3, #4
 8002146:	d02f      	beq.n	80021a8 <nextionLoop+0x118>
    	  NexNumberSetValue(3, brake_bias); // Brake Bias
      }

      else if(_flag_information_to_send == 5){
 8002148:	2b05      	cmp	r3, #5
 800214a:	d032      	beq.n	80021b2 <nextionLoop+0x122>
          NexTextSetText(0, "OFF");
        else if(actual_advice == 0)
          NexTextSetText(0, "ON");
      }

      else if(_flag_information_to_send == 6){
 800214c:	2b06      	cmp	r3, #6
 800214e:	d03a      	beq.n	80021c6 <nextionLoop+0x136>
        NexNumberSetValue(0, can_vector[106].word_0); // Torque
      }

      else if(_flag_information_to_send == 7){
 8002150:	2b07      	cmp	r3, #7
 8002152:	d14e      	bne.n	80021f2 <nextionLoop+0x162>
        if(can_vector[104].word_3 == 3)   /* Regen Brake High Level */
 8002154:	4b77      	ldr	r3, [pc, #476]	; (8002334 <nextionLoop+0x2a4>)
 8002156:	f8b3 3346 	ldrh.w	r3, [r3, #838]	; 0x346
 800215a:	2b03      	cmp	r3, #3
 800215c:	d03a      	beq.n	80021d4 <nextionLoop+0x144>
          NexProgressBarSetValue(0, 100);
        else if(can_vector[104].word_3 == 2) /* Regen Brake Medium Level */
 800215e:	2b02      	cmp	r3, #2
 8002160:	d03d      	beq.n	80021de <nextionLoop+0x14e>
          NexProgressBarSetValue(0, 67);
        else if(can_vector[104].word_3 == 1) /* Regen Brake Low Level */
 8002162:	2b01      	cmp	r3, #1
 8002164:	d040      	beq.n	80021e8 <nextionLoop+0x158>
          NexProgressBarSetValue(0, 34);
        else  /* Regen Brake off */
          NexProgressBarSetValue(0, 0);
 8002166:	2100      	movs	r1, #0
 8002168:	4608      	mov	r0, r1
 800216a:	f000 fc9f 	bl	8002aac <NexProgressBarSetValue>
 800216e:	e1cf      	b.n	8002510 <nextionLoop+0x480>
         NexNumberSetValue(4, can_vector[52].word_1);  // Battery Percent
 8002170:	4b70      	ldr	r3, [pc, #448]	; (8002334 <nextionLoop+0x2a4>)
 8002172:	f8b3 11a2 	ldrh.w	r1, [r3, #418]	; 0x1a2
 8002176:	2004      	movs	r0, #4
 8002178:	f000 fc38 	bl	80029ec <NexNumberSetValue>
 800217c:	e1c8      	b.n	8002510 <nextionLoop+0x480>
        NexProgressBarSetValue(1, can_vector[52].word_1); // Battery Percent
 800217e:	4b6d      	ldr	r3, [pc, #436]	; (8002334 <nextionLoop+0x2a4>)
 8002180:	f8b3 11a2 	ldrh.w	r1, [r3, #418]	; 0x1a2
 8002184:	2001      	movs	r0, #1
 8002186:	f000 fc91 	bl	8002aac <NexProgressBarSetValue>
 800218a:	e1c1      	b.n	8002510 <nextionLoop+0x480>
        NexXfloatSetValue(0, can_vector[102].word_3); // Hodometer
 800218c:	4b69      	ldr	r3, [pc, #420]	; (8002334 <nextionLoop+0x2a4>)
 800218e:	f8b3 1336 	ldrh.w	r1, [r3, #822]	; 0x336
 8002192:	2000      	movs	r0, #0
 8002194:	f000 fc5a 	bl	8002a4c <NexXfloatSetValue>
 8002198:	e1ba      	b.n	8002510 <nextionLoop+0x480>
        NexXfloatSetValue(1, can_vector[105].word_3); // Speed
 800219a:	4b66      	ldr	r3, [pc, #408]	; (8002334 <nextionLoop+0x2a4>)
 800219c:	f8b3 134e 	ldrh.w	r1, [r3, #846]	; 0x34e
 80021a0:	2001      	movs	r0, #1
 80021a2:	f000 fc53 	bl	8002a4c <NexXfloatSetValue>
 80021a6:	e1b3      	b.n	8002510 <nextionLoop+0x480>
    	  NexNumberSetValue(3, brake_bias); // Brake Bias
 80021a8:	4964      	ldr	r1, [pc, #400]	; (800233c <nextionLoop+0x2ac>)
 80021aa:	2003      	movs	r0, #3
 80021ac:	f000 fc1e 	bl	80029ec <NexNumberSetValue>
 80021b0:	e1ae      	b.n	8002510 <nextionLoop+0x480>
        else if(actual_advice == 0)
 80021b2:	4b5f      	ldr	r3, [pc, #380]	; (8002330 <nextionLoop+0x2a0>)
 80021b4:	78db      	ldrb	r3, [r3, #3]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 81aa 	bne.w	8002510 <nextionLoop+0x480>
          NexTextSetText(0, "ON");
 80021bc:	495e      	ldr	r1, [pc, #376]	; (8002338 <nextionLoop+0x2a8>)
 80021be:	2000      	movs	r0, #0
 80021c0:	f000 fbe8 	bl	8002994 <NexTextSetText>
 80021c4:	e1a4      	b.n	8002510 <nextionLoop+0x480>
        NexNumberSetValue(0, can_vector[106].word_0); // Torque
 80021c6:	4b5b      	ldr	r3, [pc, #364]	; (8002334 <nextionLoop+0x2a4>)
 80021c8:	f8b3 1350 	ldrh.w	r1, [r3, #848]	; 0x350
 80021cc:	2000      	movs	r0, #0
 80021ce:	f000 fc0d 	bl	80029ec <NexNumberSetValue>
 80021d2:	e19d      	b.n	8002510 <nextionLoop+0x480>
          NexProgressBarSetValue(0, 100);
 80021d4:	2164      	movs	r1, #100	; 0x64
 80021d6:	2000      	movs	r0, #0
 80021d8:	f000 fc68 	bl	8002aac <NexProgressBarSetValue>
 80021dc:	e198      	b.n	8002510 <nextionLoop+0x480>
          NexProgressBarSetValue(0, 67);
 80021de:	2143      	movs	r1, #67	; 0x43
 80021e0:	2000      	movs	r0, #0
 80021e2:	f000 fc63 	bl	8002aac <NexProgressBarSetValue>
 80021e6:	e193      	b.n	8002510 <nextionLoop+0x480>
          NexProgressBarSetValue(0, 34);
 80021e8:	2122      	movs	r1, #34	; 0x22
 80021ea:	2000      	movs	r0, #0
 80021ec:	f000 fc5e 	bl	8002aac <NexProgressBarSetValue>
 80021f0:	e18e      	b.n	8002510 <nextionLoop+0x480>
       //CARGA POR DISTÂNCIA

      // }

      else{
        _flag_information_to_send = -1;
 80021f2:	4b4f      	ldr	r3, [pc, #316]	; (8002330 <nextionLoop+0x2a0>)
 80021f4:	22ff      	movs	r2, #255	; 0xff
 80021f6:	709a      	strb	r2, [r3, #2]
        blinkLed1();
 80021f8:	f7ff fd06 	bl	8001c08 <blinkLed1>
 80021fc:	e188      	b.n	8002510 <nextionLoop+0x480>

      break;

    case PAGE3:
    
      if(_flag_information_to_send == 0){
 80021fe:	4b4c      	ldr	r3, [pc, #304]	; (8002330 <nextionLoop+0x2a0>)
 8002200:	789b      	ldrb	r3, [r3, #2]
 8002202:	b1cb      	cbz	r3, 8002238 <nextionLoop+0x1a8>
        NexXfloatSetValue(0, can_vector[53].word_3); /* Max Temperature */
      }

      else if(_flag_information_to_send == 1){
 8002204:	2b01      	cmp	r3, #1
 8002206:	d01e      	beq.n	8002246 <nextionLoop+0x1b6>
        NexXfloatSetValue(1, can_vector[54].word_0); /* Min Voltage */
      }

      else if(_flag_information_to_send == 2){
 8002208:	2b02      	cmp	r3, #2
 800220a:	d023      	beq.n	8002254 <nextionLoop+0x1c4>
        NexXfloatSetValue(2, can_vector[53].word_1); /* Total Voltage */
      }

      else if(_flag_information_to_send == 3){    /* Mode */
 800220c:	2b03      	cmp	r3, #3
 800220e:	d028      	beq.n	8002262 <nextionLoop+0x1d2>
          NexTextSetText(0, "Skidpad");
        else if(can_vector[102].word_0 == 0)
          NexTextSetText(0, "Reverse");
      }

      else if(_flag_information_to_send == 4){  /* Status ECU */
 8002210:	2b04      	cmp	r3, #4
 8002212:	d04d      	beq.n	80022b0 <nextionLoop+0x220>
        else if(can_vector[1].word_2 && 0b0000000000000010 == 2)
          NexTextSetText(1, "Falha Comunicação");
        else NexTextSetText(1, "OK");
      }

      else if(_flag_information_to_send == 5){ /* GLV Voltage */
 8002214:	2b05      	cmp	r3, #5
 8002216:	d058      	beq.n	80022ca <nextionLoop+0x23a>
        NexXfloatSetValue(3, can_vector[52].word_0/100);
      }

      else if(_flag_information_to_send == 6){ /* Total Hodometer */
 8002218:	2b06      	cmp	r3, #6
 800221a:	d061      	beq.n	80022e0 <nextionLoop+0x250>
        NexXfloatSetValue(4, can_vector[102].word_3); 
      }

      else if(_flag_information_to_send == 7){ /* Status Datalog */
 800221c:	2b07      	cmp	r3, #7
 800221e:	d066      	beq.n	80022ee <nextionLoop+0x25e>
        if(can_vector[162].word_3 == 0) NexTextSetText(2, "ERROR");  
        else  NexTextSetText(2, "OK");
      }

      else if(_flag_information_to_send == 8){
 8002220:	2b08      	cmp	r3, #8
 8002222:	d072      	beq.n	800230a <nextionLoop+0x27a>
        NexNumberSetValue(2, 0);  /* Rocker */
      }

      else if(_flag_information_to_send == 9){
 8002224:	2b09      	cmp	r3, #9
 8002226:	d075      	beq.n	8002314 <nextionLoop+0x284>
        NexNumberSetValue(0, can_vector[REAL_CLK_CAN_ID].word_2); /* Hour */
      }

      else if(_flag_information_to_send == 10){
 8002228:	2b0a      	cmp	r3, #10
 800222a:	d07a      	beq.n	8002322 <nextionLoop+0x292>
        NexNumberSetValue(1, can_vector[REAL_CLK_CAN_ID].word_3); /* Minute */
      }

      else{
        _flag_information_to_send = -1;
 800222c:	4b40      	ldr	r3, [pc, #256]	; (8002330 <nextionLoop+0x2a0>)
 800222e:	22ff      	movs	r2, #255	; 0xff
 8002230:	709a      	strb	r2, [r3, #2]
        blinkLed1();
 8002232:	f7ff fce9 	bl	8001c08 <blinkLed1>
 8002236:	e16b      	b.n	8002510 <nextionLoop+0x480>
        NexXfloatSetValue(0, can_vector[53].word_3); /* Max Temperature */
 8002238:	4b3e      	ldr	r3, [pc, #248]	; (8002334 <nextionLoop+0x2a4>)
 800223a:	f8b3 11ae 	ldrh.w	r1, [r3, #430]	; 0x1ae
 800223e:	2000      	movs	r0, #0
 8002240:	f000 fc04 	bl	8002a4c <NexXfloatSetValue>
 8002244:	e164      	b.n	8002510 <nextionLoop+0x480>
        NexXfloatSetValue(1, can_vector[54].word_0); /* Min Voltage */
 8002246:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <nextionLoop+0x2a4>)
 8002248:	f8b3 11b0 	ldrh.w	r1, [r3, #432]	; 0x1b0
 800224c:	2001      	movs	r0, #1
 800224e:	f000 fbfd 	bl	8002a4c <NexXfloatSetValue>
 8002252:	e15d      	b.n	8002510 <nextionLoop+0x480>
        NexXfloatSetValue(2, can_vector[53].word_1); /* Total Voltage */
 8002254:	4b37      	ldr	r3, [pc, #220]	; (8002334 <nextionLoop+0x2a4>)
 8002256:	f8b3 11aa 	ldrh.w	r1, [r3, #426]	; 0x1aa
 800225a:	2002      	movs	r0, #2
 800225c:	f000 fbf6 	bl	8002a4c <NexXfloatSetValue>
 8002260:	e156      	b.n	8002510 <nextionLoop+0x480>
        if(can_vector[102].word_0 == 4)
 8002262:	4b34      	ldr	r3, [pc, #208]	; (8002334 <nextionLoop+0x2a4>)
 8002264:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 8002268:	2b04      	cmp	r3, #4
 800226a:	d00d      	beq.n	8002288 <nextionLoop+0x1f8>
        else if(can_vector[102].word_0 == 1)
 800226c:	2b01      	cmp	r3, #1
 800226e:	d010      	beq.n	8002292 <nextionLoop+0x202>
        else if(can_vector[102].word_0 == 3)
 8002270:	2b03      	cmp	r3, #3
 8002272:	d013      	beq.n	800229c <nextionLoop+0x20c>
        else if(can_vector[102].word_0 == 2)
 8002274:	2b02      	cmp	r3, #2
 8002276:	d016      	beq.n	80022a6 <nextionLoop+0x216>
        else if(can_vector[102].word_0 == 0)
 8002278:	2b00      	cmp	r3, #0
 800227a:	f040 8149 	bne.w	8002510 <nextionLoop+0x480>
          NexTextSetText(0, "Reverse");
 800227e:	4930      	ldr	r1, [pc, #192]	; (8002340 <nextionLoop+0x2b0>)
 8002280:	2000      	movs	r0, #0
 8002282:	f000 fb87 	bl	8002994 <NexTextSetText>
 8002286:	e143      	b.n	8002510 <nextionLoop+0x480>
          NexTextSetText(0, "Enduro");
 8002288:	492e      	ldr	r1, [pc, #184]	; (8002344 <nextionLoop+0x2b4>)
 800228a:	2000      	movs	r0, #0
 800228c:	f000 fb82 	bl	8002994 <NexTextSetText>
 8002290:	e13e      	b.n	8002510 <nextionLoop+0x480>
          NexTextSetText(0, "Accel");
 8002292:	492d      	ldr	r1, [pc, #180]	; (8002348 <nextionLoop+0x2b8>)
 8002294:	2000      	movs	r0, #0
 8002296:	f000 fb7d 	bl	8002994 <NexTextSetText>
 800229a:	e139      	b.n	8002510 <nextionLoop+0x480>
          NexTextSetText(0, "Autoxx");
 800229c:	492b      	ldr	r1, [pc, #172]	; (800234c <nextionLoop+0x2bc>)
 800229e:	2000      	movs	r0, #0
 80022a0:	f000 fb78 	bl	8002994 <NexTextSetText>
 80022a4:	e134      	b.n	8002510 <nextionLoop+0x480>
          NexTextSetText(0, "Skidpad");
 80022a6:	492a      	ldr	r1, [pc, #168]	; (8002350 <nextionLoop+0x2c0>)
 80022a8:	2000      	movs	r0, #0
 80022aa:	f000 fb73 	bl	8002994 <NexTextSetText>
 80022ae:	e12f      	b.n	8002510 <nextionLoop+0x480>
        if(can_vector[1].word_2 && 0b0000000000000001 == 1)
 80022b0:	4b20      	ldr	r3, [pc, #128]	; (8002334 <nextionLoop+0x2a4>)
 80022b2:	899b      	ldrh	r3, [r3, #12]
 80022b4:	b123      	cbz	r3, 80022c0 <nextionLoop+0x230>
          NexTextSetText(1, "APPS ERROR"); 
 80022b6:	4927      	ldr	r1, [pc, #156]	; (8002354 <nextionLoop+0x2c4>)
 80022b8:	2001      	movs	r0, #1
 80022ba:	f000 fb6b 	bl	8002994 <NexTextSetText>
 80022be:	e127      	b.n	8002510 <nextionLoop+0x480>
        else NexTextSetText(1, "OK");
 80022c0:	4925      	ldr	r1, [pc, #148]	; (8002358 <nextionLoop+0x2c8>)
 80022c2:	2001      	movs	r0, #1
 80022c4:	f000 fb66 	bl	8002994 <NexTextSetText>
 80022c8:	e122      	b.n	8002510 <nextionLoop+0x480>
        NexXfloatSetValue(3, can_vector[52].word_0/100);
 80022ca:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <nextionLoop+0x2a4>)
 80022cc:	f8b3 11a0 	ldrh.w	r1, [r3, #416]	; 0x1a0
 80022d0:	4b22      	ldr	r3, [pc, #136]	; (800235c <nextionLoop+0x2cc>)
 80022d2:	fba3 3101 	umull	r3, r1, r3, r1
 80022d6:	0949      	lsrs	r1, r1, #5
 80022d8:	2003      	movs	r0, #3
 80022da:	f000 fbb7 	bl	8002a4c <NexXfloatSetValue>
 80022de:	e117      	b.n	8002510 <nextionLoop+0x480>
        NexXfloatSetValue(4, can_vector[102].word_3); 
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <nextionLoop+0x2a4>)
 80022e2:	f8b3 1336 	ldrh.w	r1, [r3, #822]	; 0x336
 80022e6:	2004      	movs	r0, #4
 80022e8:	f000 fbb0 	bl	8002a4c <NexXfloatSetValue>
 80022ec:	e110      	b.n	8002510 <nextionLoop+0x480>
        if(can_vector[162].word_3 == 0) NexTextSetText(2, "ERROR");  
 80022ee:	4b11      	ldr	r3, [pc, #68]	; (8002334 <nextionLoop+0x2a4>)
 80022f0:	f8b3 3516 	ldrh.w	r3, [r3, #1302]	; 0x516
 80022f4:	b923      	cbnz	r3, 8002300 <nextionLoop+0x270>
 80022f6:	491a      	ldr	r1, [pc, #104]	; (8002360 <nextionLoop+0x2d0>)
 80022f8:	2002      	movs	r0, #2
 80022fa:	f000 fb4b 	bl	8002994 <NexTextSetText>
 80022fe:	e107      	b.n	8002510 <nextionLoop+0x480>
        else  NexTextSetText(2, "OK");
 8002300:	4915      	ldr	r1, [pc, #84]	; (8002358 <nextionLoop+0x2c8>)
 8002302:	2002      	movs	r0, #2
 8002304:	f000 fb46 	bl	8002994 <NexTextSetText>
 8002308:	e102      	b.n	8002510 <nextionLoop+0x480>
        NexNumberSetValue(2, 0);  /* Rocker */
 800230a:	2100      	movs	r1, #0
 800230c:	2002      	movs	r0, #2
 800230e:	f000 fb6d 	bl	80029ec <NexNumberSetValue>
 8002312:	e0fd      	b.n	8002510 <nextionLoop+0x480>
        NexNumberSetValue(0, can_vector[REAL_CLK_CAN_ID].word_2); /* Hour */
 8002314:	4b07      	ldr	r3, [pc, #28]	; (8002334 <nextionLoop+0x2a4>)
 8002316:	f8b3 1054 	ldrh.w	r1, [r3, #84]	; 0x54
 800231a:	2000      	movs	r0, #0
 800231c:	f000 fb66 	bl	80029ec <NexNumberSetValue>
 8002320:	e0f6      	b.n	8002510 <nextionLoop+0x480>
        NexNumberSetValue(1, can_vector[REAL_CLK_CAN_ID].word_3); /* Minute */
 8002322:	4b04      	ldr	r3, [pc, #16]	; (8002334 <nextionLoop+0x2a4>)
 8002324:	f8b3 1056 	ldrh.w	r1, [r3, #86]	; 0x56
 8002328:	2001      	movs	r0, #1
 800232a:	f000 fb5f 	bl	80029ec <NexNumberSetValue>
 800232e:	e0ef      	b.n	8002510 <nextionLoop+0x480>
 8002330:	200000d0 	.word	0x200000d0
 8002334:	200002e8 	.word	0x200002e8
 8002338:	08003ca8 	.word	0x08003ca8
 800233c:	08001fdd 	.word	0x08001fdd
 8002340:	08003ccc 	.word	0x08003ccc
 8002344:	08003cac 	.word	0x08003cac
 8002348:	08003cb4 	.word	0x08003cb4
 800234c:	08003cbc 	.word	0x08003cbc
 8002350:	08003cc4 	.word	0x08003cc4
 8002354:	08003cd4 	.word	0x08003cd4
 8002358:	08003ce0 	.word	0x08003ce0
 800235c:	51eb851f 	.word	0x51eb851f
 8002360:	08003ce4 	.word	0x08003ce4
      break;
  

    case PAGE4:

      if(_flag_information_to_send == 0){
 8002364:	4bbe      	ldr	r3, [pc, #760]	; (8002660 <nextionLoop+0x5d0>)
 8002366:	789b      	ldrb	r3, [r3, #2]
 8002368:	b1ab      	cbz	r3, 8002396 <nextionLoop+0x306>
        NexNumberSetValue(0, can_vector[278].word_0);
      }

      else if(_flag_information_to_send == 1){
 800236a:	2b01      	cmp	r3, #1
 800236c:	d01a      	beq.n	80023a4 <nextionLoop+0x314>
        NexNumberSetValue(5, can_vector[278].word_1);
      }

      else if(_flag_information_to_send == 2){
 800236e:	2b02      	cmp	r3, #2
 8002370:	d01f      	beq.n	80023b2 <nextionLoop+0x322>
        NexNumberSetValue(6, can_vector[278].word_2);
      }

      else if(_flag_information_to_send == 3){
 8002372:	2b03      	cmp	r3, #3
 8002374:	d024      	beq.n	80023c0 <nextionLoop+0x330>
        NexNumberSetValue(1, can_vector[351].word_0);
      }

      else if(_flag_information_to_send == 4){
 8002376:	2b04      	cmp	r3, #4
 8002378:	d029      	beq.n	80023ce <nextionLoop+0x33e>
        NexNumberSetValue(4, can_vector[351].word_1);
      }

      else if(_flag_information_to_send == 5){
 800237a:	2b05      	cmp	r3, #5
 800237c:	d02e      	beq.n	80023dc <nextionLoop+0x34c>
        NexNumberSetValue(7, can_vector[351].word_2);
      }

      else if(_flag_information_to_send == 6){
 800237e:	2b06      	cmp	r3, #6
 8002380:	d033      	beq.n	80023ea <nextionLoop+0x35a>
        NexNumberSetValue(2, can_vector[352].word_0);
      }

      else if(_flag_information_to_send == 7){
 8002382:	2b07      	cmp	r3, #7
 8002384:	d038      	beq.n	80023f8 <nextionLoop+0x368>
        NexNumberSetValue(3, can_vector[352].word_1);
      }

      else if(_flag_information_to_send == 8){
 8002386:	2b08      	cmp	r3, #8
 8002388:	d03d      	beq.n	8002406 <nextionLoop+0x376>
        NexNumberSetValue(8, can_vector[352].word_2);
      }

      else{
        _flag_information_to_send = -1;
 800238a:	4bb5      	ldr	r3, [pc, #724]	; (8002660 <nextionLoop+0x5d0>)
 800238c:	22ff      	movs	r2, #255	; 0xff
 800238e:	709a      	strb	r2, [r3, #2]
        blinkLed1();
 8002390:	f7ff fc3a 	bl	8001c08 <blinkLed1>
 8002394:	e0bc      	b.n	8002510 <nextionLoop+0x480>
        NexNumberSetValue(0, can_vector[278].word_0);
 8002396:	4bb3      	ldr	r3, [pc, #716]	; (8002664 <nextionLoop+0x5d4>)
 8002398:	f8b3 18b0 	ldrh.w	r1, [r3, #2224]	; 0x8b0
 800239c:	2000      	movs	r0, #0
 800239e:	f000 fb25 	bl	80029ec <NexNumberSetValue>
 80023a2:	e0b5      	b.n	8002510 <nextionLoop+0x480>
        NexNumberSetValue(5, can_vector[278].word_1);
 80023a4:	4baf      	ldr	r3, [pc, #700]	; (8002664 <nextionLoop+0x5d4>)
 80023a6:	f8b3 18b2 	ldrh.w	r1, [r3, #2226]	; 0x8b2
 80023aa:	2005      	movs	r0, #5
 80023ac:	f000 fb1e 	bl	80029ec <NexNumberSetValue>
 80023b0:	e0ae      	b.n	8002510 <nextionLoop+0x480>
        NexNumberSetValue(6, can_vector[278].word_2);
 80023b2:	4bac      	ldr	r3, [pc, #688]	; (8002664 <nextionLoop+0x5d4>)
 80023b4:	f8b3 18b4 	ldrh.w	r1, [r3, #2228]	; 0x8b4
 80023b8:	2006      	movs	r0, #6
 80023ba:	f000 fb17 	bl	80029ec <NexNumberSetValue>
 80023be:	e0a7      	b.n	8002510 <nextionLoop+0x480>
        NexNumberSetValue(1, can_vector[351].word_0);
 80023c0:	4ba8      	ldr	r3, [pc, #672]	; (8002664 <nextionLoop+0x5d4>)
 80023c2:	f8b3 1af8 	ldrh.w	r1, [r3, #2808]	; 0xaf8
 80023c6:	2001      	movs	r0, #1
 80023c8:	f000 fb10 	bl	80029ec <NexNumberSetValue>
 80023cc:	e0a0      	b.n	8002510 <nextionLoop+0x480>
        NexNumberSetValue(4, can_vector[351].word_1);
 80023ce:	4ba5      	ldr	r3, [pc, #660]	; (8002664 <nextionLoop+0x5d4>)
 80023d0:	f8b3 1afa 	ldrh.w	r1, [r3, #2810]	; 0xafa
 80023d4:	2004      	movs	r0, #4
 80023d6:	f000 fb09 	bl	80029ec <NexNumberSetValue>
 80023da:	e099      	b.n	8002510 <nextionLoop+0x480>
        NexNumberSetValue(7, can_vector[351].word_2);
 80023dc:	4ba1      	ldr	r3, [pc, #644]	; (8002664 <nextionLoop+0x5d4>)
 80023de:	f8b3 1afc 	ldrh.w	r1, [r3, #2812]	; 0xafc
 80023e2:	2007      	movs	r0, #7
 80023e4:	f000 fb02 	bl	80029ec <NexNumberSetValue>
 80023e8:	e092      	b.n	8002510 <nextionLoop+0x480>
        NexNumberSetValue(2, can_vector[352].word_0);
 80023ea:	4b9e      	ldr	r3, [pc, #632]	; (8002664 <nextionLoop+0x5d4>)
 80023ec:	f8b3 1b00 	ldrh.w	r1, [r3, #2816]	; 0xb00
 80023f0:	2002      	movs	r0, #2
 80023f2:	f000 fafb 	bl	80029ec <NexNumberSetValue>
 80023f6:	e08b      	b.n	8002510 <nextionLoop+0x480>
        NexNumberSetValue(3, can_vector[352].word_1);
 80023f8:	4b9a      	ldr	r3, [pc, #616]	; (8002664 <nextionLoop+0x5d4>)
 80023fa:	f8b3 1b02 	ldrh.w	r1, [r3, #2818]	; 0xb02
 80023fe:	2003      	movs	r0, #3
 8002400:	f000 faf4 	bl	80029ec <NexNumberSetValue>
 8002404:	e084      	b.n	8002510 <nextionLoop+0x480>
        NexNumberSetValue(8, can_vector[352].word_2);
 8002406:	4b97      	ldr	r3, [pc, #604]	; (8002664 <nextionLoop+0x5d4>)
 8002408:	f8b3 1b04 	ldrh.w	r1, [r3, #2820]	; 0xb04
 800240c:	2008      	movs	r0, #8
 800240e:	f000 faed 	bl	80029ec <NexNumberSetValue>
 8002412:	e07d      	b.n	8002510 <nextionLoop+0x480>

      break;

    case PAGE5:
      
      if(actual_advice == GLV){
 8002414:	4b92      	ldr	r3, [pc, #584]	; (8002660 <nextionLoop+0x5d0>)
 8002416:	78db      	ldrb	r3, [r3, #3]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d007      	beq.n	800242c <nextionLoop+0x39c>
        NexTextSetText(0, "GLV");
      }

      else if(actual_advice == BSE){
 800241c:	2b02      	cmp	r3, #2
 800241e:	d00a      	beq.n	8002436 <nextionLoop+0x3a6>
        NexTextSetText(0, "BSE");
      }
      
      else{
        actual_page = previous_page;
 8002420:	4b8f      	ldr	r3, [pc, #572]	; (8002660 <nextionLoop+0x5d0>)
 8002422:	7858      	ldrb	r0, [r3, #1]
 8002424:	7018      	strb	r0, [r3, #0]
        NexPageShow(actual_page);
 8002426:	f000 fa9f 	bl	8002968 <NexPageShow>
 800242a:	e071      	b.n	8002510 <nextionLoop+0x480>
        NexTextSetText(0, "GLV");
 800242c:	498e      	ldr	r1, [pc, #568]	; (8002668 <nextionLoop+0x5d8>)
 800242e:	2000      	movs	r0, #0
 8002430:	f000 fab0 	bl	8002994 <NexTextSetText>
 8002434:	e06c      	b.n	8002510 <nextionLoop+0x480>
        NexTextSetText(0, "BSE");
 8002436:	498d      	ldr	r1, [pc, #564]	; (800266c <nextionLoop+0x5dc>)
 8002438:	2000      	movs	r0, #0
 800243a:	f000 faab 	bl	8002994 <NexTextSetText>
 800243e:	e067      	b.n	8002510 <nextionLoop+0x480>

    case PAGE6:

        	// ECU errors

        	if (get_individual_flag16 (0, can_vector[103].word_0) == 1)
 8002440:	4b88      	ldr	r3, [pc, #544]	; (8002664 <nextionLoop+0x5d4>)
 8002442:	f8b3 1338 	ldrh.w	r1, [r3, #824]	; 0x338
 8002446:	2000      	movs	r0, #0
 8002448:	f7ff fdcf 	bl	8001fea <get_individual_flag16>
 800244c:	2801      	cmp	r0, #1
 800244e:	d064      	beq.n	800251a <nextionLoop+0x48a>
        		NexNumberSetValue(0, 0);

        	if (get_individual_flag16 (1, can_vector[103].word_0) == 1)
 8002450:	4b84      	ldr	r3, [pc, #528]	; (8002664 <nextionLoop+0x5d4>)
 8002452:	f8b3 1338 	ldrh.w	r1, [r3, #824]	; 0x338
 8002456:	2001      	movs	r0, #1
 8002458:	f7ff fdc7 	bl	8001fea <get_individual_flag16>
 800245c:	2801      	cmp	r0, #1
 800245e:	d061      	beq.n	8002524 <nextionLoop+0x494>
        		NexNumberSetValue(1, 1);

        	if (get_individual_flag16 (8, can_vector[103].word_0) == 1)
 8002460:	4b80      	ldr	r3, [pc, #512]	; (8002664 <nextionLoop+0x5d4>)
 8002462:	f8b3 1338 	ldrh.w	r1, [r3, #824]	; 0x338
 8002466:	2008      	movs	r0, #8
 8002468:	f7ff fdbf 	bl	8001fea <get_individual_flag16>
 800246c:	2801      	cmp	r0, #1
 800246e:	d05e      	beq.n	800252e <nextionLoop+0x49e>
        		NexNumberSetValue(2, 8);

        	if (get_individual_flag16 (9, can_vector[103].word_0) == 1)
 8002470:	4b7c      	ldr	r3, [pc, #496]	; (8002664 <nextionLoop+0x5d4>)
 8002472:	f8b3 1338 	ldrh.w	r1, [r3, #824]	; 0x338
 8002476:	2009      	movs	r0, #9
 8002478:	f7ff fdb7 	bl	8001fea <get_individual_flag16>
 800247c:	2801      	cmp	r0, #1
 800247e:	d05b      	beq.n	8002538 <nextionLoop+0x4a8>
        		NexNumberSetValue(3, 9);

        	if (get_individual_flag16 (10, can_vector[103].word_0) == 1)
 8002480:	4b78      	ldr	r3, [pc, #480]	; (8002664 <nextionLoop+0x5d4>)
 8002482:	f8b3 1338 	ldrh.w	r1, [r3, #824]	; 0x338
 8002486:	200a      	movs	r0, #10
 8002488:	f7ff fdaf 	bl	8001fea <get_individual_flag16>
 800248c:	2801      	cmp	r0, #1
 800248e:	d058      	beq.n	8002542 <nextionLoop+0x4b2>
        		NexNumberSetValue(4, 10);

        	// ECU status

        	if (get_individual_flag16 (1, can_vector[103].word_1) == 1)
 8002490:	4b74      	ldr	r3, [pc, #464]	; (8002664 <nextionLoop+0x5d4>)
 8002492:	f8b3 133a 	ldrh.w	r1, [r3, #826]	; 0x33a
 8002496:	2001      	movs	r0, #1
 8002498:	f7ff fda7 	bl	8001fea <get_individual_flag16>
 800249c:	2801      	cmp	r0, #1
 800249e:	d055      	beq.n	800254c <nextionLoop+0x4bc>
        		NexNumberSetValue(8, 1);

        	if (get_individual_flag16 (2, can_vector[103].word_1) == 1)
 80024a0:	4b70      	ldr	r3, [pc, #448]	; (8002664 <nextionLoop+0x5d4>)
 80024a2:	f8b3 133a 	ldrh.w	r1, [r3, #826]	; 0x33a
 80024a6:	2002      	movs	r0, #2
 80024a8:	f7ff fd9f 	bl	8001fea <get_individual_flag16>
 80024ac:	2801      	cmp	r0, #1
 80024ae:	d052      	beq.n	8002556 <nextionLoop+0x4c6>
        		NexNumberSetValue(9, 2);

        	if (get_individual_flag16 (3, can_vector[103].word_1) == 1)
 80024b0:	4b6c      	ldr	r3, [pc, #432]	; (8002664 <nextionLoop+0x5d4>)
 80024b2:	f8b3 133a 	ldrh.w	r1, [r3, #826]	; 0x33a
 80024b6:	2003      	movs	r0, #3
 80024b8:	f7ff fd97 	bl	8001fea <get_individual_flag16>
 80024bc:	2801      	cmp	r0, #1
 80024be:	d04f      	beq.n	8002560 <nextionLoop+0x4d0>
        		NexNumberSetValue(10, 3);

        	if (get_individual_flag16 (4, can_vector[103].word_1) == 1)
 80024c0:	4b68      	ldr	r3, [pc, #416]	; (8002664 <nextionLoop+0x5d4>)
 80024c2:	f8b3 133a 	ldrh.w	r1, [r3, #826]	; 0x33a
 80024c6:	2004      	movs	r0, #4
 80024c8:	f7ff fd8f 	bl	8001fea <get_individual_flag16>
 80024cc:	2801      	cmp	r0, #1
 80024ce:	d04c      	beq.n	800256a <nextionLoop+0x4da>
        		NexNumberSetValue(11, 4);

        	if (get_individual_flag16 (5, can_vector[103].word_1) == 1)
 80024d0:	4b64      	ldr	r3, [pc, #400]	; (8002664 <nextionLoop+0x5d4>)
 80024d2:	f8b3 133a 	ldrh.w	r1, [r3, #826]	; 0x33a
 80024d6:	2005      	movs	r0, #5
 80024d8:	f7ff fd87 	bl	8001fea <get_individual_flag16>
 80024dc:	2801      	cmp	r0, #1
 80024de:	d049      	beq.n	8002574 <nextionLoop+0x4e4>
        		NexNumberSetValue(12, 5);

        	if (get_individual_flag16 (6, can_vector[103].word_1) == 1)
 80024e0:	4b60      	ldr	r3, [pc, #384]	; (8002664 <nextionLoop+0x5d4>)
 80024e2:	f8b3 133a 	ldrh.w	r1, [r3, #826]	; 0x33a
 80024e6:	2006      	movs	r0, #6
 80024e8:	f7ff fd7f 	bl	8001fea <get_individual_flag16>
 80024ec:	2801      	cmp	r0, #1
 80024ee:	d046      	beq.n	800257e <nextionLoop+0x4ee>
        		NexNumberSetValue(13, 6);

        	if (get_individual_flag16 (10, can_vector[103].word_1) == 1)
 80024f0:	4b5c      	ldr	r3, [pc, #368]	; (8002664 <nextionLoop+0x5d4>)
 80024f2:	f8b3 133a 	ldrh.w	r1, [r3, #826]	; 0x33a
 80024f6:	200a      	movs	r0, #10
 80024f8:	f7ff fd77 	bl	8001fea <get_individual_flag16>
 80024fc:	2801      	cmp	r0, #1
 80024fe:	d043      	beq.n	8002588 <nextionLoop+0x4f8>
        		NexNumberSetValue(14, 10);

        	if (get_individual_flag16 (11, can_vector[103].word_1) == 1)
 8002500:	4b58      	ldr	r3, [pc, #352]	; (8002664 <nextionLoop+0x5d4>)
 8002502:	f8b3 133a 	ldrh.w	r1, [r3, #826]	; 0x33a
 8002506:	200b      	movs	r0, #11
 8002508:	f7ff fd6f 	bl	8001fea <get_individual_flag16>
 800250c:	2801      	cmp	r0, #1
 800250e:	d040      	beq.n	8002592 <nextionLoop+0x502>
        		can_vector[188].word_3 = NexNumberGetValue(3);
        		CAN_Transmit2(can_vector,188);
        	}
  }

  _flag_information_to_send++;
 8002510:	4a53      	ldr	r2, [pc, #332]	; (8002660 <nextionLoop+0x5d0>)
 8002512:	7893      	ldrb	r3, [r2, #2]
 8002514:	3301      	adds	r3, #1
 8002516:	7093      	strb	r3, [r2, #2]

}
 8002518:	bd10      	pop	{r4, pc}
        		NexNumberSetValue(0, 0);
 800251a:	2100      	movs	r1, #0
 800251c:	4608      	mov	r0, r1
 800251e:	f000 fa65 	bl	80029ec <NexNumberSetValue>
 8002522:	e795      	b.n	8002450 <nextionLoop+0x3c0>
        		NexNumberSetValue(1, 1);
 8002524:	2101      	movs	r1, #1
 8002526:	4608      	mov	r0, r1
 8002528:	f000 fa60 	bl	80029ec <NexNumberSetValue>
 800252c:	e798      	b.n	8002460 <nextionLoop+0x3d0>
        		NexNumberSetValue(2, 8);
 800252e:	2108      	movs	r1, #8
 8002530:	2002      	movs	r0, #2
 8002532:	f000 fa5b 	bl	80029ec <NexNumberSetValue>
 8002536:	e79b      	b.n	8002470 <nextionLoop+0x3e0>
        		NexNumberSetValue(3, 9);
 8002538:	2109      	movs	r1, #9
 800253a:	2003      	movs	r0, #3
 800253c:	f000 fa56 	bl	80029ec <NexNumberSetValue>
 8002540:	e79e      	b.n	8002480 <nextionLoop+0x3f0>
        		NexNumberSetValue(4, 10);
 8002542:	210a      	movs	r1, #10
 8002544:	2004      	movs	r0, #4
 8002546:	f000 fa51 	bl	80029ec <NexNumberSetValue>
 800254a:	e7a1      	b.n	8002490 <nextionLoop+0x400>
        		NexNumberSetValue(8, 1);
 800254c:	2101      	movs	r1, #1
 800254e:	2008      	movs	r0, #8
 8002550:	f000 fa4c 	bl	80029ec <NexNumberSetValue>
 8002554:	e7a4      	b.n	80024a0 <nextionLoop+0x410>
        		NexNumberSetValue(9, 2);
 8002556:	2102      	movs	r1, #2
 8002558:	2009      	movs	r0, #9
 800255a:	f000 fa47 	bl	80029ec <NexNumberSetValue>
 800255e:	e7a7      	b.n	80024b0 <nextionLoop+0x420>
        		NexNumberSetValue(10, 3);
 8002560:	2103      	movs	r1, #3
 8002562:	200a      	movs	r0, #10
 8002564:	f000 fa42 	bl	80029ec <NexNumberSetValue>
 8002568:	e7aa      	b.n	80024c0 <nextionLoop+0x430>
        		NexNumberSetValue(11, 4);
 800256a:	2104      	movs	r1, #4
 800256c:	200b      	movs	r0, #11
 800256e:	f000 fa3d 	bl	80029ec <NexNumberSetValue>
 8002572:	e7ad      	b.n	80024d0 <nextionLoop+0x440>
        		NexNumberSetValue(12, 5);
 8002574:	2105      	movs	r1, #5
 8002576:	200c      	movs	r0, #12
 8002578:	f000 fa38 	bl	80029ec <NexNumberSetValue>
 800257c:	e7b0      	b.n	80024e0 <nextionLoop+0x450>
        		NexNumberSetValue(13, 6);
 800257e:	2106      	movs	r1, #6
 8002580:	200d      	movs	r0, #13
 8002582:	f000 fa33 	bl	80029ec <NexNumberSetValue>
 8002586:	e7b3      	b.n	80024f0 <nextionLoop+0x460>
        		NexNumberSetValue(14, 10);
 8002588:	210a      	movs	r1, #10
 800258a:	200e      	movs	r0, #14
 800258c:	f000 fa2e 	bl	80029ec <NexNumberSetValue>
 8002590:	e7b6      	b.n	8002500 <nextionLoop+0x470>
        		NexNumberSetValue(15, 11);
 8002592:	210b      	movs	r1, #11
 8002594:	200f      	movs	r0, #15
 8002596:	f000 fa29 	bl	80029ec <NexNumberSetValue>
 800259a:	e7b9      	b.n	8002510 <nextionLoop+0x480>
        	if (NexNumberGetValue(10)==1){
 800259c:	200a      	movs	r0, #10
 800259e:	f000 fa3d 	bl	8002a1c <NexNumberGetValue>
 80025a2:	2801      	cmp	r0, #1
 80025a4:	d1b4      	bne.n	8002510 <nextionLoop+0x480>
        		can_vector[180].word_0 = NexNumberGetValue(0);
 80025a6:	2000      	movs	r0, #0
 80025a8:	f000 fa38 	bl	8002a1c <NexNumberGetValue>
 80025ac:	4c2d      	ldr	r4, [pc, #180]	; (8002664 <nextionLoop+0x5d4>)
 80025ae:	f8a4 05a0 	strh.w	r0, [r4, #1440]	; 0x5a0
        		can_vector[180].word_1 = NexNumberGetValue(1);
 80025b2:	2001      	movs	r0, #1
 80025b4:	f000 fa32 	bl	8002a1c <NexNumberGetValue>
 80025b8:	f8a4 05a2 	strh.w	r0, [r4, #1442]	; 0x5a2
        		can_vector[180].word_2 = NexNumberGetValue(2);
 80025bc:	2002      	movs	r0, #2
 80025be:	f000 fa2d 	bl	8002a1c <NexNumberGetValue>
 80025c2:	f8a4 05a4 	strh.w	r0, [r4, #1444]	; 0x5a4
        		can_vector[180].word_3 = NexNumberGetValue(3);
 80025c6:	2003      	movs	r0, #3
 80025c8:	f000 fa28 	bl	8002a1c <NexNumberGetValue>
 80025cc:	f8a4 05a6 	strh.w	r0, [r4, #1446]	; 0x5a6
        		CAN_Transmit2(can_vector,180);
 80025d0:	21b4      	movs	r1, #180	; 0xb4
 80025d2:	4620      	mov	r0, r4
 80025d4:	f7ff fc2e 	bl	8001e34 <CAN_Transmit2>
        		can_vector[181].word_0 = NexNumberGetValue(4);
 80025d8:	2004      	movs	r0, #4
 80025da:	f000 fa1f 	bl	8002a1c <NexNumberGetValue>
 80025de:	f8a4 05a8 	strh.w	r0, [r4, #1448]	; 0x5a8
        		can_vector[181].word_1 = NexNumberGetValue(5);
 80025e2:	2005      	movs	r0, #5
 80025e4:	f000 fa1a 	bl	8002a1c <NexNumberGetValue>
 80025e8:	f8a4 05aa 	strh.w	r0, [r4, #1450]	; 0x5aa
        		can_vector[181].word_2 = NexNumberGetValue(6);
 80025ec:	2006      	movs	r0, #6
 80025ee:	f000 fa15 	bl	8002a1c <NexNumberGetValue>
 80025f2:	f8a4 05ac 	strh.w	r0, [r4, #1452]	; 0x5ac
        		can_vector[181].word_3 = NexNumberGetValue(7);
 80025f6:	2007      	movs	r0, #7
 80025f8:	f000 fa10 	bl	8002a1c <NexNumberGetValue>
 80025fc:	f8a4 05ae 	strh.w	r0, [r4, #1454]	; 0x5ae
        		CAN_Transmit2(can_vector,181);
 8002600:	21b5      	movs	r1, #181	; 0xb5
 8002602:	4620      	mov	r0, r4
 8002604:	f7ff fc16 	bl	8001e34 <CAN_Transmit2>
        		can_vector[182].word_0 = NexNumberGetValue(8);
 8002608:	2008      	movs	r0, #8
 800260a:	f000 fa07 	bl	8002a1c <NexNumberGetValue>
 800260e:	f8a4 05b0 	strh.w	r0, [r4, #1456]	; 0x5b0
        		can_vector[182].word_1 = NexNumberGetValue(9);
 8002612:	2009      	movs	r0, #9
 8002614:	f000 fa02 	bl	8002a1c <NexNumberGetValue>
 8002618:	f8a4 05b2 	strh.w	r0, [r4, #1458]	; 0x5b2
        		can_vector[182].word_2 = NexCheckboxGetValue(0);
 800261c:	2000      	movs	r0, #0
 800261e:	f000 fa2d 	bl	8002a7c <NexCheckboxGetValue>
 8002622:	f8a4 05b4 	strh.w	r0, [r4, #1460]	; 0x5b4
        		can_vector[182].word_3 = NexCheckboxGetValue(1);
 8002626:	2001      	movs	r0, #1
 8002628:	f000 fa28 	bl	8002a7c <NexCheckboxGetValue>
 800262c:	f8a4 05b6 	strh.w	r0, [r4, #1462]	; 0x5b6
        		CAN_Transmit2(can_vector,182);
 8002630:	21b6      	movs	r1, #182	; 0xb6
 8002632:	4620      	mov	r0, r4
 8002634:	f7ff fbfe 	bl	8001e34 <CAN_Transmit2>
        		can_vector[183].word_0 = NexCheckboxGetValue(2);
 8002638:	2002      	movs	r0, #2
 800263a:	f000 fa1f 	bl	8002a7c <NexCheckboxGetValue>
 800263e:	f8a4 05b8 	strh.w	r0, [r4, #1464]	; 0x5b8
        		can_vector[183].word_1 = NexCheckboxGetValue(4);
 8002642:	2004      	movs	r0, #4
 8002644:	f000 fa1a 	bl	8002a7c <NexCheckboxGetValue>
 8002648:	f8a4 05ba 	strh.w	r0, [r4, #1466]	; 0x5ba
        		can_vector[183].word_2 = NexCheckboxGetValue(5);
 800264c:	2005      	movs	r0, #5
 800264e:	f000 fa15 	bl	8002a7c <NexCheckboxGetValue>
 8002652:	f8a4 05bc 	strh.w	r0, [r4, #1468]	; 0x5bc
        		CAN_Transmit2(can_vector,183);
 8002656:	21b7      	movs	r1, #183	; 0xb7
 8002658:	4620      	mov	r0, r4
 800265a:	f7ff fbeb 	bl	8001e34 <CAN_Transmit2>
 800265e:	e757      	b.n	8002510 <nextionLoop+0x480>
 8002660:	200000d0 	.word	0x200000d0
 8002664:	200002e8 	.word	0x200002e8
 8002668:	08003cec 	.word	0x08003cec
 800266c:	08003cf0 	.word	0x08003cf0
        	if (NexNumberGetValue(10)==1){
 8002670:	200a      	movs	r0, #10
 8002672:	f000 f9d3 	bl	8002a1c <NexNumberGetValue>
 8002676:	2801      	cmp	r0, #1
 8002678:	f47f af4a 	bne.w	8002510 <nextionLoop+0x480>
        		can_vector[184].word_0 = NexCheckboxGetValue(3);
 800267c:	2003      	movs	r0, #3
 800267e:	f000 f9fd 	bl	8002a7c <NexCheckboxGetValue>
 8002682:	4c3b      	ldr	r4, [pc, #236]	; (8002770 <nextionLoop+0x6e0>)
 8002684:	f8a4 05c0 	strh.w	r0, [r4, #1472]	; 0x5c0
        		can_vector[184].word_1 = NexCheckboxGetValue(4);
 8002688:	2004      	movs	r0, #4
 800268a:	f000 f9f7 	bl	8002a7c <NexCheckboxGetValue>
 800268e:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
        		can_vector[184].word_2 = NexCheckboxGetValue(5);
 8002692:	2005      	movs	r0, #5
 8002694:	f000 f9f2 	bl	8002a7c <NexCheckboxGetValue>
 8002698:	f8a4 05c4 	strh.w	r0, [r4, #1476]	; 0x5c4
        		can_vector[184].word_3 = NexCheckboxGetValue(6);
 800269c:	2006      	movs	r0, #6
 800269e:	f000 f9ed 	bl	8002a7c <NexCheckboxGetValue>
 80026a2:	f8a4 05c6 	strh.w	r0, [r4, #1478]	; 0x5c6
        		CAN_Transmit2(can_vector,184);
 80026a6:	21b8      	movs	r1, #184	; 0xb8
 80026a8:	4620      	mov	r0, r4
 80026aa:	f7ff fbc3 	bl	8001e34 <CAN_Transmit2>
        		can_vector[185].word_3 = NexCheckboxGetValue(7);
 80026ae:	2007      	movs	r0, #7
 80026b0:	f000 f9e4 	bl	8002a7c <NexCheckboxGetValue>
 80026b4:	f8a4 05ce 	strh.w	r0, [r4, #1486]	; 0x5ce
        		can_vector[185].word_1 = NexCheckboxGetValue(8);
 80026b8:	2008      	movs	r0, #8
 80026ba:	f000 f9df 	bl	8002a7c <NexCheckboxGetValue>
 80026be:	f8a4 05ca 	strh.w	r0, [r4, #1482]	; 0x5ca
        		can_vector[185].word_2 = NexCheckboxGetValue(9);
 80026c2:	2009      	movs	r0, #9
 80026c4:	f000 f9da 	bl	8002a7c <NexCheckboxGetValue>
 80026c8:	f8a4 05cc 	strh.w	r0, [r4, #1484]	; 0x5cc
        		can_vector[185].word_3 = NexCheckboxGetValue(0);
 80026cc:	2000      	movs	r0, #0
 80026ce:	f000 f9d5 	bl	8002a7c <NexCheckboxGetValue>
 80026d2:	f8a4 05ce 	strh.w	r0, [r4, #1486]	; 0x5ce
        		CAN_Transmit2(can_vector,185);
 80026d6:	21b9      	movs	r1, #185	; 0xb9
 80026d8:	4620      	mov	r0, r4
 80026da:	f7ff fbab 	bl	8001e34 <CAN_Transmit2>
        		can_vector[186].word_0 = NexCheckboxGetValue(1);
 80026de:	2001      	movs	r0, #1
 80026e0:	f000 f9cc 	bl	8002a7c <NexCheckboxGetValue>
 80026e4:	f8a4 05d0 	strh.w	r0, [r4, #1488]	; 0x5d0
        		can_vector[186].word_1 = NexCheckboxGetValue(2);
 80026e8:	2002      	movs	r0, #2
 80026ea:	f000 f9c7 	bl	8002a7c <NexCheckboxGetValue>
 80026ee:	f8a4 05d2 	strh.w	r0, [r4, #1490]	; 0x5d2
        		can_vector[186].word_2 = NexCheckboxGetValue(10);
 80026f2:	200a      	movs	r0, #10
 80026f4:	f000 f9c2 	bl	8002a7c <NexCheckboxGetValue>
 80026f8:	f8a4 05d4 	strh.w	r0, [r4, #1492]	; 0x5d4
        		can_vector[186].word_3 = NexCheckboxGetValue(11);
 80026fc:	200b      	movs	r0, #11
 80026fe:	f000 f9bd 	bl	8002a7c <NexCheckboxGetValue>
 8002702:	f8a4 05d6 	strh.w	r0, [r4, #1494]	; 0x5d6
        		CAN_Transmit2(can_vector,186);
 8002706:	21ba      	movs	r1, #186	; 0xba
 8002708:	4620      	mov	r0, r4
 800270a:	f7ff fb93 	bl	8001e34 <CAN_Transmit2>
        		can_vector[187].word_0 = NexCheckboxGetValue(12);
 800270e:	200c      	movs	r0, #12
 8002710:	f000 f9b4 	bl	8002a7c <NexCheckboxGetValue>
 8002714:	f8a4 05d8 	strh.w	r0, [r4, #1496]	; 0x5d8
        		can_vector[187].word_1 = NexCheckboxGetValue(13);
 8002718:	200d      	movs	r0, #13
 800271a:	f000 f9af 	bl	8002a7c <NexCheckboxGetValue>
 800271e:	f8a4 05da 	strh.w	r0, [r4, #1498]	; 0x5da
        		can_vector[187].word_2 = NexNumberGetValue(4);
 8002722:	2004      	movs	r0, #4
 8002724:	f000 f97a 	bl	8002a1c <NexNumberGetValue>
 8002728:	f8a4 05dc 	strh.w	r0, [r4, #1500]	; 0x5dc
        		can_vector[187].word_3 = NexNumberGetValue(5);
 800272c:	2005      	movs	r0, #5
 800272e:	f000 f975 	bl	8002a1c <NexNumberGetValue>
 8002732:	f8a4 05de 	strh.w	r0, [r4, #1502]	; 0x5de
        		CAN_Transmit2(can_vector,187);
 8002736:	21bb      	movs	r1, #187	; 0xbb
 8002738:	4620      	mov	r0, r4
 800273a:	f7ff fb7b 	bl	8001e34 <CAN_Transmit2>
        		can_vector[188].word_0 = NexNumberGetValue(0);
 800273e:	2000      	movs	r0, #0
 8002740:	f000 f96c 	bl	8002a1c <NexNumberGetValue>
 8002744:	f8a4 05e0 	strh.w	r0, [r4, #1504]	; 0x5e0
        		can_vector[188].word_1 = NexNumberGetValue(1);
 8002748:	2001      	movs	r0, #1
 800274a:	f000 f967 	bl	8002a1c <NexNumberGetValue>
 800274e:	f8a4 05e2 	strh.w	r0, [r4, #1506]	; 0x5e2
        		can_vector[188].word_2 = NexNumberGetValue(2);
 8002752:	2002      	movs	r0, #2
 8002754:	f000 f962 	bl	8002a1c <NexNumberGetValue>
 8002758:	f8a4 05e4 	strh.w	r0, [r4, #1508]	; 0x5e4
        		can_vector[188].word_3 = NexNumberGetValue(3);
 800275c:	2003      	movs	r0, #3
 800275e:	f000 f95d 	bl	8002a1c <NexNumberGetValue>
 8002762:	f8a4 05e6 	strh.w	r0, [r4, #1510]	; 0x5e6
        		CAN_Transmit2(can_vector,188);
 8002766:	21bc      	movs	r1, #188	; 0xbc
 8002768:	4620      	mov	r0, r4
 800276a:	f7ff fb63 	bl	8001e34 <CAN_Transmit2>
 800276e:	e6cf      	b.n	8002510 <nextionLoop+0x480>
 8002770:	200002e8 	.word	0x200002e8

08002774 <_Error_Handler>:
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8002774:	e7fe      	b.n	8002774 <_Error_Handler>
	...

08002778 <SystemClock_Config>:
{
 8002778:	b500      	push	{lr}
 800277a:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800277c:	2201      	movs	r2, #1
 800277e:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002780:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002784:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002786:	2100      	movs	r1, #0
 8002788:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800278a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800278c:	2202      	movs	r2, #2
 800278e:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002790:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002792:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002796:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002798:	a806      	add	r0, sp, #24
 800279a:	f7fe fbc3 	bl	8000f24 <HAL_RCC_OscConfig>
 800279e:	bb08      	cbnz	r0, 80027e4 <SystemClock_Config+0x6c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027a0:	230f      	movs	r3, #15
 80027a2:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027a4:	2102      	movs	r1, #2
 80027a6:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027a8:	2300      	movs	r3, #0
 80027aa:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027b0:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027b2:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027b4:	a801      	add	r0, sp, #4
 80027b6:	f7fe fddb 	bl	8001370 <HAL_RCC_ClockConfig>
 80027ba:	b9b8      	cbnz	r0, 80027ec <SystemClock_Config+0x74>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80027bc:	f7fe fe96 	bl	80014ec <HAL_RCC_GetHCLKFreq>
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <SystemClock_Config+0x7c>)
 80027c2:	fba3 3000 	umull	r3, r0, r3, r0
 80027c6:	0980      	lsrs	r0, r0, #6
 80027c8:	f7fe f9c4 	bl	8000b54 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80027cc:	2004      	movs	r0, #4
 80027ce:	f7fe f9d7 	bl	8000b80 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80027d2:	2200      	movs	r2, #0
 80027d4:	4611      	mov	r1, r2
 80027d6:	f04f 30ff 	mov.w	r0, #4294967295
 80027da:	f7fe f97b 	bl	8000ad4 <HAL_NVIC_SetPriority>
}
 80027de:	b011      	add	sp, #68	; 0x44
 80027e0:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80027e4:	219d      	movs	r1, #157	; 0x9d
 80027e6:	4804      	ldr	r0, [pc, #16]	; (80027f8 <SystemClock_Config+0x80>)
 80027e8:	f7ff ffc4 	bl	8002774 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80027ec:	21ab      	movs	r1, #171	; 0xab
 80027ee:	4802      	ldr	r0, [pc, #8]	; (80027f8 <SystemClock_Config+0x80>)
 80027f0:	f7ff ffc0 	bl	8002774 <_Error_Handler>
 80027f4:	10624dd3 	.word	0x10624dd3
 80027f8:	08003d04 	.word	0x08003d04

080027fc <main>:
{
 80027fc:	b508      	push	{r3, lr}
  HAL_Init();
 80027fe:	f7fd fcd1 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 8002802:	f7ff ffb9 	bl	8002778 <SystemClock_Config>
  MX_GPIO_Init();
 8002806:	f7ff fb9d 	bl	8001f44 <MX_GPIO_Init>
  MX_DMA_Init();
 800280a:	f7ff fb79 	bl	8001f00 <MX_DMA_Init>
  MX_CAN_Init();
 800280e:	f7ff fa73 	bl	8001cf8 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8002812:	f000 fb3d 	bl	8002e90 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002816:	f000 fb59 	bl	8002ecc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800281a:	f000 fb75 	bl	8002f08 <MX_USART3_UART_Init>
  interfaceInit();
 800281e:	f7ff fa23 	bl	8001c68 <interfaceInit>
    telemetrySend();
 8002822:	f000 fb1d 	bl	8002e60 <telemetrySend>
    nextionLoop();
 8002826:	f7ff fc33 	bl	8002090 <nextionLoop>
    timerAtualization();
 800282a:	f7ff fa5d 	bl	8001ce8 <timerAtualization>
  while (1)
 800282e:	e7f8      	b.n	8002822 <main+0x26>

08002830 <sendCommand>:
#define StatusConDinFuncion       11

char ENDTERMS[]={255,255,255};

void sendCommand(const char* cmd)
{
 8002830:	b538      	push	{r3, r4, r5, lr}
 8002832:	4604      	mov	r4, r0
   
   while (__HAL_UART_GET_FLAG (&huart3, UART_FLAG_RXNE))
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <sendCommand+0x38>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	f012 0f20 	tst.w	r2, #32
 800283e:	d001      	beq.n	8002844 <sendCommand+0x14>
   {
      huart3.Instance->DR;
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	e7f7      	b.n	8002834 <sendCommand+0x4>
   }

   HAL_UART_Transmit (&huart3, (uint8_t*) cmd, strlen (cmd), 50);
 8002844:	4620      	mov	r0, r4
 8002846:	f7fd fc81 	bl	800014c <strlen>
 800284a:	4d07      	ldr	r5, [pc, #28]	; (8002868 <sendCommand+0x38>)
 800284c:	2332      	movs	r3, #50	; 0x32
 800284e:	b282      	uxth	r2, r0
 8002850:	4621      	mov	r1, r4
 8002852:	4628      	mov	r0, r5
 8002854:	f7fe ffc1 	bl	80017da <HAL_UART_Transmit>
   HAL_UART_Transmit (&huart3, (uint8_t*)&ENDTERMS, 3, 50);
 8002858:	2332      	movs	r3, #50	; 0x32
 800285a:	2203      	movs	r2, #3
 800285c:	4903      	ldr	r1, [pc, #12]	; (800286c <sendCommand+0x3c>)
 800285e:	4628      	mov	r0, r5
 8002860:	f7fe ffbb 	bl	80017da <HAL_UART_Transmit>
}
 8002864:	bd38      	pop	{r3, r4, r5, pc}
 8002866:	bf00      	nop
 8002868:	20000f80 	.word	0x20000f80
 800286c:	20000008 	.word	0x20000008

08002870 <recvRetCommandFinished>:

int recvRetCommandFinished(void)
{
 8002870:	b500      	push	{lr}
 8002872:	b083      	sub	sp, #12
   
   int ret=0;
   uint8_t temp[4]={0};
 8002874:	2300      	movs	r3, #0
 8002876:	9301      	str	r3, [sp, #4]
   HAL_UART_Receive (&huart3, (uint8_t*)&temp, 4, 100);
 8002878:	2364      	movs	r3, #100	; 0x64
 800287a:	2204      	movs	r2, #4
 800287c:	eb0d 0102 	add.w	r1, sp, r2
 8002880:	480f      	ldr	r0, [pc, #60]	; (80028c0 <recvRetCommandFinished+0x50>)
 8002882:	f7ff f81a 	bl	80018ba <HAL_UART_Receive>

   if (temp[0] == NEX_RET_CMD_FINISHED && temp[1]==0xFF && temp[2]==0xFF && temp[3]==0xFF)
 8002886:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d003      	beq.n	8002896 <recvRetCommandFinished+0x26>
   int ret=0;
 800288e:	2000      	movs	r0, #0
   {
      ret=1;
   }

   return ret;
}
 8002890:	b003      	add	sp, #12
 8002892:	f85d fb04 	ldr.w	pc, [sp], #4
   if (temp[0] == NEX_RET_CMD_FINISHED && temp[1]==0xFF && temp[2]==0xFF && temp[3]==0xFF)
 8002896:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800289a:	2bff      	cmp	r3, #255	; 0xff
 800289c:	d001      	beq.n	80028a2 <recvRetCommandFinished+0x32>
   int ret=0;
 800289e:	2000      	movs	r0, #0
 80028a0:	e7f6      	b.n	8002890 <recvRetCommandFinished+0x20>
   if (temp[0] == NEX_RET_CMD_FINISHED && temp[1]==0xFF && temp[2]==0xFF && temp[3]==0xFF)
 80028a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80028a6:	2bff      	cmp	r3, #255	; 0xff
 80028a8:	d001      	beq.n	80028ae <recvRetCommandFinished+0x3e>
   int ret=0;
 80028aa:	2000      	movs	r0, #0
 80028ac:	e7f0      	b.n	8002890 <recvRetCommandFinished+0x20>
   if (temp[0] == NEX_RET_CMD_FINISHED && temp[1]==0xFF && temp[2]==0xFF && temp[3]==0xFF)
 80028ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80028b2:	2bff      	cmp	r3, #255	; 0xff
 80028b4:	d001      	beq.n	80028ba <recvRetCommandFinished+0x4a>
   int ret=0;
 80028b6:	2000      	movs	r0, #0
 80028b8:	e7ea      	b.n	8002890 <recvRetCommandFinished+0x20>
      ret=1;
 80028ba:	2001      	movs	r0, #1
   return ret;
 80028bc:	e7e8      	b.n	8002890 <recvRetCommandFinished+0x20>
 80028be:	bf00      	nop
 80028c0:	20000f80 	.word	0x20000f80

080028c4 <recvRetNumber>:

int recvRetNumber(void)
{
 80028c4:	b500      	push	{lr}
 80028c6:	b083      	sub	sp, #12
   int number=0;
   uint8_t temp[8]={0};
 80028c8:	2300      	movs	r3, #0
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	9301      	str	r3, [sp, #4]
   HAL_UART_Receive (&huart3, (uint8_t*)&temp, 8, 50);
 80028ce:	2332      	movs	r3, #50	; 0x32
 80028d0:	2208      	movs	r2, #8
 80028d2:	4669      	mov	r1, sp
 80028d4:	4815      	ldr	r0, [pc, #84]	; (800292c <recvRetNumber+0x68>)
 80028d6:	f7fe fff0 	bl	80018ba <HAL_UART_Receive>

   if (temp[0] == NEX_RET_NUMBER_HEAD && temp[5]==0xFF && temp[6]==0xFF && temp[7]==0xFF )
 80028da:	f89d 3000 	ldrb.w	r3, [sp]
 80028de:	2b71      	cmp	r3, #113	; 0x71
 80028e0:	d003      	beq.n	80028ea <recvRetNumber+0x26>
   int number=0;
 80028e2:	2000      	movs	r0, #0
   {
      number= ((uint32_t)temp[4]<<24)|((uint32_t)temp[3]<<16)|(temp[2]<<8)|(temp[1]);
   }

   return number;
}
 80028e4:	b003      	add	sp, #12
 80028e6:	f85d fb04 	ldr.w	pc, [sp], #4
   if (temp[0] == NEX_RET_NUMBER_HEAD && temp[5]==0xFF && temp[6]==0xFF && temp[7]==0xFF )
 80028ea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80028ee:	2bff      	cmp	r3, #255	; 0xff
 80028f0:	d001      	beq.n	80028f6 <recvRetNumber+0x32>
   int number=0;
 80028f2:	2000      	movs	r0, #0
 80028f4:	e7f6      	b.n	80028e4 <recvRetNumber+0x20>
   if (temp[0] == NEX_RET_NUMBER_HEAD && temp[5]==0xFF && temp[6]==0xFF && temp[7]==0xFF )
 80028f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80028fa:	2bff      	cmp	r3, #255	; 0xff
 80028fc:	d001      	beq.n	8002902 <recvRetNumber+0x3e>
   int number=0;
 80028fe:	2000      	movs	r0, #0
 8002900:	e7f0      	b.n	80028e4 <recvRetNumber+0x20>
   if (temp[0] == NEX_RET_NUMBER_HEAD && temp[5]==0xFF && temp[6]==0xFF && temp[7]==0xFF )
 8002902:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002906:	2bff      	cmp	r3, #255	; 0xff
 8002908:	d001      	beq.n	800290e <recvRetNumber+0x4a>
   int number=0;
 800290a:	2000      	movs	r0, #0
   return number;
 800290c:	e7ea      	b.n	80028e4 <recvRetNumber+0x20>
      number= ((uint32_t)temp[4]<<24)|((uint32_t)temp[3]<<16)|(temp[2]<<8)|(temp[1]);
 800290e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002912:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002916:	0400      	lsls	r0, r0, #16
 8002918:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800291c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8002920:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8002924:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8002928:	4318      	orrs	r0, r3
 800292a:	e7db      	b.n	80028e4 <recvRetNumber+0x20>
 800292c:	20000f80 	.word	0x20000f80

08002930 <nexInit>:
   strncpy (buffer, temp, pointer);
   return ret;
}

int nexInit(void)
{
 8002930:	b510      	push	{r4, lr}
   int ret1=0;
   int ret2=0;
   
   sendCommand ("");
 8002932:	480a      	ldr	r0, [pc, #40]	; (800295c <nexInit+0x2c>)
 8002934:	f7ff ff7c 	bl	8002830 <sendCommand>
   sendCommand ("bkcmd=1");
 8002938:	4809      	ldr	r0, [pc, #36]	; (8002960 <nexInit+0x30>)
 800293a:	f7ff ff79 	bl	8002830 <sendCommand>
   ret1=recvRetCommandFinished  ()  ;
 800293e:	f7ff ff97 	bl	8002870 <recvRetCommandFinished>
 8002942:	4604      	mov	r4, r0
   sendCommand ("page 0");
 8002944:	4807      	ldr	r0, [pc, #28]	; (8002964 <nexInit+0x34>)
 8002946:	f7ff ff73 	bl	8002830 <sendCommand>
   ret2=recvRetCommandFinished  ()  ;
 800294a:	f7ff ff91 	bl	8002870 <recvRetCommandFinished>
   return ret1&&ret2;
 800294e:	b114      	cbz	r4, 8002956 <nexInit+0x26>
 8002950:	b110      	cbz	r0, 8002958 <nexInit+0x28>
 8002952:	2001      	movs	r0, #1
 8002954:	e000      	b.n	8002958 <nexInit+0x28>
 8002956:	2000      	movs	r0, #0
}
 8002958:	bd10      	pop	{r4, pc}
 800295a:	bf00      	nop
 800295c:	08003c94 	.word	0x08003c94
 8002960:	08003d14 	.word	0x08003d14
 8002964:	08003d1c 	.word	0x08003d1c

08002968 <NexPageShow>:

int NexPageShow(int Page)
{
 8002968:	b500      	push	{lr}
 800296a:	b085      	sub	sp, #20
 800296c:	4602      	mov	r2, r0
   char buffer[10]={0};
 800296e:	2300      	movs	r3, #0
 8002970:	9301      	str	r3, [sp, #4]
 8002972:	9302      	str	r3, [sp, #8]
 8002974:	f8ad 300c 	strh.w	r3, [sp, #12]
   sprintf (buffer, "page %d", Page);
 8002978:	4905      	ldr	r1, [pc, #20]	; (8002990 <NexPageShow+0x28>)
 800297a:	a801      	add	r0, sp, #4
 800297c:	f000 fd28 	bl	80033d0 <siprintf>
   sendCommand (buffer);
 8002980:	a801      	add	r0, sp, #4
 8002982:	f7ff ff55 	bl	8002830 <sendCommand>
   return recvRetCommandFinished ();
 8002986:	f7ff ff73 	bl	8002870 <recvRetCommandFinished>
}
 800298a:	b005      	add	sp, #20
 800298c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002990:	08003d24 	.word	0x08003d24

08002994 <NexTextSetText>:

int NexTextSetText(int Text,const char *buffer)
{
 8002994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002996:	b09b      	sub	sp, #108	; 0x6c
 8002998:	4606      	mov	r6, r0
 800299a:	460d      	mov	r5, r1
   char cmd[50]={0}, buff[50]={0};
 800299c:	2400      	movs	r4, #0
 800299e:	940d      	str	r4, [sp, #52]	; 0x34
 80029a0:	272e      	movs	r7, #46	; 0x2e
 80029a2:	463a      	mov	r2, r7
 80029a4:	4621      	mov	r1, r4
 80029a6:	a80e      	add	r0, sp, #56	; 0x38
 80029a8:	f000 fd0a 	bl	80033c0 <memset>
 80029ac:	9400      	str	r4, [sp, #0]
 80029ae:	463a      	mov	r2, r7
 80029b0:	4621      	mov	r1, r4
 80029b2:	a801      	add	r0, sp, #4
 80029b4:	f000 fd04 	bl	80033c0 <memset>
   for (int i=0; i<20; i++) buff[i]=buffer[i];
 80029b8:	4623      	mov	r3, r4
 80029ba:	e005      	b.n	80029c8 <NexTextSetText+0x34>
 80029bc:	5cec      	ldrb	r4, [r5, r3]
 80029be:	aa1a      	add	r2, sp, #104	; 0x68
 80029c0:	441a      	add	r2, r3
 80029c2:	f802 4c68 	strb.w	r4, [r2, #-104]
 80029c6:	3301      	adds	r3, #1
 80029c8:	2b13      	cmp	r3, #19
 80029ca:	ddf7      	ble.n	80029bc <NexTextSetText+0x28>
   sprintf (cmd, "t%d.txt=\"%s\"",  Text,  buff);
 80029cc:	466b      	mov	r3, sp
 80029ce:	4632      	mov	r2, r6
 80029d0:	4905      	ldr	r1, [pc, #20]	; (80029e8 <NexTextSetText+0x54>)
 80029d2:	a80d      	add	r0, sp, #52	; 0x34
 80029d4:	f000 fcfc 	bl	80033d0 <siprintf>
   sendCommand (cmd);
 80029d8:	a80d      	add	r0, sp, #52	; 0x34
 80029da:	f7ff ff29 	bl	8002830 <sendCommand>
   return recvRetCommandFinished ();
 80029de:	f7ff ff47 	bl	8002870 <recvRetCommandFinished>
}
 80029e2:	b01b      	add	sp, #108	; 0x6c
 80029e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029e6:	bf00      	nop
 80029e8:	08003d2c 	.word	0x08003d2c

080029ec <NexNumberSetValue>:
   sendCommand (cmd);
   return recvRetString (buffer, len);
}

int NexNumberSetValue(int Number, int value)
{
 80029ec:	b510      	push	{r4, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
   char cmd[15]={0};
 80029f4:	2400      	movs	r4, #0
 80029f6:	9400      	str	r4, [sp, #0]
 80029f8:	9401      	str	r4, [sp, #4]
 80029fa:	9402      	str	r4, [sp, #8]
 80029fc:	f8cd 400b 	str.w	r4, [sp, #11]
   sprintf (cmd, "n%d.val=%d", Number, value) ;
 8002a00:	4905      	ldr	r1, [pc, #20]	; (8002a18 <NexNumberSetValue+0x2c>)
 8002a02:	4668      	mov	r0, sp
 8002a04:	f000 fce4 	bl	80033d0 <siprintf>
   sendCommand (cmd);
 8002a08:	4668      	mov	r0, sp
 8002a0a:	f7ff ff11 	bl	8002830 <sendCommand>
   return recvRetCommandFinished ();
 8002a0e:	f7ff ff2f 	bl	8002870 <recvRetCommandFinished>
}
 8002a12:	b004      	add	sp, #16
 8002a14:	bd10      	pop	{r4, pc}
 8002a16:	bf00      	nop
 8002a18:	08003d48 	.word	0x08003d48

08002a1c <NexNumberGetValue>:

int NexNumberGetValue(int Number)
{
 8002a1c:	b500      	push	{lr}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	4602      	mov	r2, r0
   char cmd[15]={0};
 8002a22:	2300      	movs	r3, #0
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	9301      	str	r3, [sp, #4]
 8002a28:	9302      	str	r3, [sp, #8]
 8002a2a:	f8cd 300b 	str.w	r3, [sp, #11]
   sprintf (cmd, "get n%d.val", Number);
 8002a2e:	4906      	ldr	r1, [pc, #24]	; (8002a48 <NexNumberGetValue+0x2c>)
 8002a30:	4668      	mov	r0, sp
 8002a32:	f000 fccd 	bl	80033d0 <siprintf>
   sendCommand (cmd);
 8002a36:	4668      	mov	r0, sp
 8002a38:	f7ff fefa 	bl	8002830 <sendCommand>
   return recvRetNumber ();
 8002a3c:	f7ff ff42 	bl	80028c4 <recvRetNumber>
}
 8002a40:	b005      	add	sp, #20
 8002a42:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a46:	bf00      	nop
 8002a48:	08003d54 	.word	0x08003d54

08002a4c <NexXfloatSetValue>:

int NexXfloatSetValue(int Number, int value)
{
 8002a4c:	b510      	push	{r4, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
   char cmd[15]={0};
 8002a54:	2400      	movs	r4, #0
 8002a56:	9400      	str	r4, [sp, #0]
 8002a58:	9401      	str	r4, [sp, #4]
 8002a5a:	9402      	str	r4, [sp, #8]
 8002a5c:	f8cd 400b 	str.w	r4, [sp, #11]
   sprintf (cmd, "x%d.val=%d", Number, value) ;
 8002a60:	4905      	ldr	r1, [pc, #20]	; (8002a78 <NexXfloatSetValue+0x2c>)
 8002a62:	4668      	mov	r0, sp
 8002a64:	f000 fcb4 	bl	80033d0 <siprintf>
   sendCommand (cmd);
 8002a68:	4668      	mov	r0, sp
 8002a6a:	f7ff fee1 	bl	8002830 <sendCommand>
   return recvRetCommandFinished ();
 8002a6e:	f7ff feff 	bl	8002870 <recvRetCommandFinished>
}
 8002a72:	b004      	add	sp, #16
 8002a74:	bd10      	pop	{r4, pc}
 8002a76:	bf00      	nop
 8002a78:	08003d60 	.word	0x08003d60

08002a7c <NexCheckboxGetValue>:
   sendCommand (cmd);
   return recvRetCommandFinished ();
}

int NexCheckboxGetValue(int Checkbox)
{
 8002a7c:	b500      	push	{lr}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	4602      	mov	r2, r0
   char cmd[15]={0};
 8002a82:	2300      	movs	r3, #0
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	9301      	str	r3, [sp, #4]
 8002a88:	9302      	str	r3, [sp, #8]
 8002a8a:	f8cd 300b 	str.w	r3, [sp, #11]
   sprintf (cmd, "get c%d.val", Checkbox);
 8002a8e:	4906      	ldr	r1, [pc, #24]	; (8002aa8 <NexCheckboxGetValue+0x2c>)
 8002a90:	4668      	mov	r0, sp
 8002a92:	f000 fc9d 	bl	80033d0 <siprintf>
   sendCommand (cmd);
 8002a96:	4668      	mov	r0, sp
 8002a98:	f7ff feca 	bl	8002830 <sendCommand>
   return recvRetNumber ();
 8002a9c:	f7ff ff12 	bl	80028c4 <recvRetNumber>
}
 8002aa0:	b005      	add	sp, #20
 8002aa2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002aa6:	bf00      	nop
 8002aa8:	08003d94 	.word	0x08003d94

08002aac <NexProgressBarSetValue>:
   sendCommand (cmd);
   return recvRetNumber ();
}

int NexProgressBarSetValue(int ProgressBar,int value)
{
 8002aac:	b510      	push	{r4, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
   char cmd[15]={0};
 8002ab4:	2400      	movs	r4, #0
 8002ab6:	9400      	str	r4, [sp, #0]
 8002ab8:	9401      	str	r4, [sp, #4]
 8002aba:	9402      	str	r4, [sp, #8]
 8002abc:	f8cd 400b 	str.w	r4, [sp, #11]
   sprintf (cmd,"j%d.val=%d",ProgressBar,value) ;
 8002ac0:	4905      	ldr	r1, [pc, #20]	; (8002ad8 <NexProgressBarSetValue+0x2c>)
 8002ac2:	4668      	mov	r0, sp
 8002ac4:	f000 fc84 	bl	80033d0 <siprintf>
   sendCommand (cmd);
 8002ac8:	4668      	mov	r0, sp
 8002aca:	f7ff feb1 	bl	8002830 <sendCommand>
   return recvRetCommandFinished ();
 8002ace:	f7ff fecf 	bl	8002870 <recvRetCommandFinished>
}
 8002ad2:	b004      	add	sp, #16
 8002ad4:	bd10      	pop	{r4, pc}
 8002ad6:	bf00      	nop
 8002ad8:	08003e0c 	.word	0x08003e0c

08002adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002adc:	b500      	push	{lr}
 8002ade:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ae0:	4b24      	ldr	r3, [pc, #144]	; (8002b74 <HAL_MspInit+0x98>)
 8002ae2:	699a      	ldr	r2, [r3, #24]
 8002ae4:	f042 0201 	orr.w	r2, r2, #1
 8002ae8:	619a      	str	r2, [r3, #24]
 8002aea:	699a      	ldr	r2, [r3, #24]
 8002aec:	f002 0201 	and.w	r2, r2, #1
 8002af0:	9200      	str	r2, [sp, #0]
 8002af2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002af4:	69da      	ldr	r2, [r3, #28]
 8002af6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002afa:	61da      	str	r2, [r3, #28]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b02:	9301      	str	r3, [sp, #4]
 8002b04:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b06:	2003      	movs	r0, #3
 8002b08:	f7fd ffd2 	bl	8000ab0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	4611      	mov	r1, r2
 8002b10:	f06f 000b 	mvn.w	r0, #11
 8002b14:	f7fd ffde 	bl	8000ad4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	f06f 000a 	mvn.w	r0, #10
 8002b20:	f7fd ffd8 	bl	8000ad4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002b24:	2200      	movs	r2, #0
 8002b26:	4611      	mov	r1, r2
 8002b28:	f06f 0009 	mvn.w	r0, #9
 8002b2c:	f7fd ffd2 	bl	8000ad4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002b30:	2200      	movs	r2, #0
 8002b32:	4611      	mov	r1, r2
 8002b34:	f06f 0004 	mvn.w	r0, #4
 8002b38:	f7fd ffcc 	bl	8000ad4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	4611      	mov	r1, r2
 8002b40:	f06f 0003 	mvn.w	r0, #3
 8002b44:	f7fd ffc6 	bl	8000ad4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	f06f 0001 	mvn.w	r0, #1
 8002b50:	f7fd ffc0 	bl	8000ad4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002b54:	2200      	movs	r2, #0
 8002b56:	4611      	mov	r1, r2
 8002b58:	f04f 30ff 	mov.w	r0, #4294967295
 8002b5c:	f7fd ffba 	bl	8000ad4 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b60:	4a05      	ldr	r2, [pc, #20]	; (8002b78 <HAL_MspInit+0x9c>)
 8002b62:	6853      	ldr	r3, [r2, #4]
 8002b64:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002b68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b6e:	b003      	add	sp, #12
 8002b70:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40010000 	.word	0x40010000

08002b7c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b7c:	4770      	bx	lr

08002b7e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b7e:	e7fe      	b.n	8002b7e <HardFault_Handler>

08002b80 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b80:	e7fe      	b.n	8002b80 <MemManage_Handler>

08002b82 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b82:	e7fe      	b.n	8002b82 <BusFault_Handler>

08002b84 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b84:	e7fe      	b.n	8002b84 <UsageFault_Handler>

08002b86 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b86:	4770      	bx	lr

08002b88 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b88:	4770      	bx	lr

08002b8a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b8a:	4770      	bx	lr

08002b8c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002b8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b8e:	f7fd fb1b 	bl	80001c8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002b92:	f7fe f806 	bl	8000ba2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b96:	bd08      	pop	{r3, pc}

08002b98 <DMA1_Channel3_IRQHandler>:

/**
* @brief This function handles DMA1 channel3 global interrupt.
*/
void DMA1_Channel3_IRQHandler(void)
{
 8002b98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_usart3_rx);
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
  DMA_IrqHandler(&hdma_usart3_rx, &huart3);
 8002b9a:	4902      	ldr	r1, [pc, #8]	; (8002ba4 <DMA1_Channel3_IRQHandler+0xc>)
 8002b9c:	4802      	ldr	r0, [pc, #8]	; (8002ba8 <DMA1_Channel3_IRQHandler+0x10>)
 8002b9e:	f7fe ffbf 	bl	8001b20 <DMA_IrqHandler>

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002ba2:	bd08      	pop	{r3, pc}
 8002ba4:	20000f80 	.word	0x20000f80
 8002ba8:	20000f3c 	.word	0x20000f3c

08002bac <DMA1_Channel6_IRQHandler>:

/**
* @brief This function handles DMA1 channel6 global interrupt.
*/
void DMA1_Channel6_IRQHandler(void)
{
 8002bac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
  DMA_IrqHandler(&hdma_usart2_rx, &huart2);
 8002bae:	4902      	ldr	r1, [pc, #8]	; (8002bb8 <DMA1_Channel6_IRQHandler+0xc>)
 8002bb0:	4802      	ldr	r0, [pc, #8]	; (8002bbc <DMA1_Channel6_IRQHandler+0x10>)
 8002bb2:	f7fe ffb5 	bl	8001b20 <DMA_IrqHandler>

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002bb6:	bd08      	pop	{r3, pc}
 8002bb8:	20001000 	.word	0x20001000
 8002bbc:	20000ef8 	.word	0x20000ef8

08002bc0 <USB_HP_CAN1_TX_IRQHandler>:

/**
* @brief This function handles USB high priority or CAN TX interrupts.
*/
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8002bc0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002bc2:	4802      	ldr	r0, [pc, #8]	; (8002bcc <USB_HP_CAN1_TX_IRQHandler+0xc>)
 8002bc4:	f7fd fe78 	bl	80008b8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8002bc8:	bd08      	pop	{r3, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000eb4 	.word	0x20000eb4

08002bd0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
* @brief This function handles USB low priority or CAN RX0 interrupts.
*/
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002bd0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002bd2:	4c06      	ldr	r4, [pc, #24]	; (8002bec <USB_LP_CAN1_RX0_IRQHandler+0x1c>)
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	f7fd fe6f 	bl	80008b8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
  canMessageReceived(hcan.pRxMsg->StdId, hcan.pRxMsg->Data);
 8002bda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002bdc:	f831 0b14 	ldrh.w	r0, [r1], #20
 8002be0:	f7ff f81a 	bl	8001c18 <canMessageReceived>
  CAN_Receive_IT();
 8002be4:	f7ff f916 	bl	8001e14 <CAN_Receive_IT>

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002be8:	bd10      	pop	{r4, pc}
 8002bea:	bf00      	nop
 8002bec:	20000eb4 	.word	0x20000eb4

08002bf0 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8002bf0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  //HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
  USART_IrqHandler(&huart2, &hdma_usart2_rx);
 8002bf2:	4902      	ldr	r1, [pc, #8]	; (8002bfc <USART2_IRQHandler+0xc>)
 8002bf4:	4802      	ldr	r0, [pc, #8]	; (8002c00 <USART2_IRQHandler+0x10>)
 8002bf6:	f7fe ffed 	bl	8001bd4 <USART_IrqHandler>
  //uart2MessageReceived();

  /* USER CODE END USART2_IRQn 1 */
}
 8002bfa:	bd08      	pop	{r3, pc}
 8002bfc:	20000ef8 	.word	0x20000ef8
 8002c00:	20001000 	.word	0x20001000

08002c04 <USART3_IRQHandler>:

/**
* @brief This function handles USART3 global interrupt.
*/
void USART3_IRQHandler(void)
{
 8002c04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  //HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
  USART_IrqHandler(&huart3, &hdma_usart3_rx);
 8002c06:	4903      	ldr	r1, [pc, #12]	; (8002c14 <USART3_IRQHandler+0x10>)
 8002c08:	4803      	ldr	r0, [pc, #12]	; (8002c18 <USART3_IRQHandler+0x14>)
 8002c0a:	f7fe ffe3 	bl	8001bd4 <USART_IrqHandler>
  uart3MessageReceived();
 8002c0e:	f7ff f9f3 	bl	8001ff8 <uart3MessageReceived>

  /* USER CODE END USART3_IRQn 1 */
}
 8002c12:	bd08      	pop	{r3, pc}
 8002c14:	20000f3c 	.word	0x20000f3c
 8002c18:	20000f80 	.word	0x20000f80

08002c1c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <SystemInit+0x40>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	f042 0201 	orr.w	r2, r2, #1
 8002c24:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002c26:	6859      	ldr	r1, [r3, #4]
 8002c28:	4a0d      	ldr	r2, [pc, #52]	; (8002c60 <SystemInit+0x44>)
 8002c2a:	400a      	ands	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002c34:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c38:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c40:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002c48:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002c4a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002c4e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002c50:	4b04      	ldr	r3, [pc, #16]	; (8002c64 <SystemInit+0x48>)
 8002c52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c56:	609a      	str	r2, [r3, #8]
#endif 
}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	f8ff0000 	.word	0xf8ff0000
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <xbeePacks>:
  can_vet_tx[7] = can_vector[REAL_CLK_CAN_ID].word_3 >> 8;
  CAN_Transmit(can_vet_tx, REAL_CLK_CAN_ID);
}

void xbeePacks(void)
{
 8002c68:	b510      	push	{r4, lr}
 8002c6a:	b082      	sub	sp, #8
  uint16_t i;

  /*Pack 0*/
  for(i = 260; i < 264; i++)
 8002c6c:	f44f 7482 	mov.w	r4, #260	; 0x104
 8002c70:	e00d      	b.n	8002c8e <xbeePacks+0x26>
    xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1, can_vector[i].word_2, can_vector[i].word_3);
 8002c72:	493b      	ldr	r1, [pc, #236]	; (8002d60 <xbeePacks+0xf8>)
 8002c74:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
 8002c78:	88d3      	ldrh	r3, [r2, #6]
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	8893      	ldrh	r3, [r2, #4]
 8002c7e:	8852      	ldrh	r2, [r2, #2]
 8002c80:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 8002c84:	4620      	mov	r0, r4
 8002c86:	f000 fac9 	bl	800321c <xbeeSend>
  for(i = 260; i < 264; i++)
 8002c8a:	3401      	adds	r4, #1
 8002c8c:	b2a4      	uxth	r4, r4
 8002c8e:	f5b4 7f84 	cmp.w	r4, #264	; 0x108
 8002c92:	d3ee      	bcc.n	8002c72 <xbeePacks+0xa>

  /*Pack 1*/
  for(i = 265; i < 269; i++)
 8002c94:	f240 1409 	movw	r4, #265	; 0x109
 8002c98:	e00d      	b.n	8002cb6 <xbeePacks+0x4e>
    xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1, can_vector[i].word_2, can_vector[i].word_3);
 8002c9a:	4931      	ldr	r1, [pc, #196]	; (8002d60 <xbeePacks+0xf8>)
 8002c9c:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
 8002ca0:	88d3      	ldrh	r3, [r2, #6]
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	8893      	ldrh	r3, [r2, #4]
 8002ca6:	8852      	ldrh	r2, [r2, #2]
 8002ca8:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 8002cac:	4620      	mov	r0, r4
 8002cae:	f000 fab5 	bl	800321c <xbeeSend>
  for(i = 265; i < 269; i++)
 8002cb2:	3401      	adds	r4, #1
 8002cb4:	b2a4      	uxth	r4, r4
 8002cb6:	f5b4 7f86 	cmp.w	r4, #268	; 0x10c
 8002cba:	d9ee      	bls.n	8002c9a <xbeePacks+0x32>

  /*Pack 2*/
  for(i = 270; i < 274; i++)
 8002cbc:	f44f 7487 	mov.w	r4, #270	; 0x10e
 8002cc0:	e00d      	b.n	8002cde <xbeePacks+0x76>
    xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1, can_vector[i].word_2, can_vector[i].word_3);
 8002cc2:	4927      	ldr	r1, [pc, #156]	; (8002d60 <xbeePacks+0xf8>)
 8002cc4:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
 8002cc8:	88d3      	ldrh	r3, [r2, #6]
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	8893      	ldrh	r3, [r2, #4]
 8002cce:	8852      	ldrh	r2, [r2, #2]
 8002cd0:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	f000 faa1 	bl	800321c <xbeeSend>
  for(i = 270; i < 274; i++)
 8002cda:	3401      	adds	r4, #1
 8002cdc:	b2a4      	uxth	r4, r4
 8002cde:	f5b4 7f89 	cmp.w	r4, #274	; 0x112
 8002ce2:	d3ee      	bcc.n	8002cc2 <xbeePacks+0x5a>

  /*Pack 3*/
  for(i = 275; i < 279; i++)
 8002ce4:	f240 1413 	movw	r4, #275	; 0x113
 8002ce8:	e00d      	b.n	8002d06 <xbeePacks+0x9e>
    xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1, can_vector[i].word_2, can_vector[i].word_3);
 8002cea:	491d      	ldr	r1, [pc, #116]	; (8002d60 <xbeePacks+0xf8>)
 8002cec:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
 8002cf0:	88d3      	ldrh	r3, [r2, #6]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	8893      	ldrh	r3, [r2, #4]
 8002cf6:	8852      	ldrh	r2, [r2, #2]
 8002cf8:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	f000 fa8d 	bl	800321c <xbeeSend>
  for(i = 275; i < 279; i++)
 8002d02:	3401      	adds	r4, #1
 8002d04:	b2a4      	uxth	r4, r4
 8002d06:	f5b4 7f8b 	cmp.w	r4, #278	; 0x116
 8002d0a:	d9ee      	bls.n	8002cea <xbeePacks+0x82>

  /*Pack 4*/
  for(i = 280; i < 284; i++)
 8002d0c:	f44f 748c 	mov.w	r4, #280	; 0x118
 8002d10:	e00d      	b.n	8002d2e <xbeePacks+0xc6>
    xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1, can_vector[i].word_2, can_vector[i].word_3);
 8002d12:	4913      	ldr	r1, [pc, #76]	; (8002d60 <xbeePacks+0xf8>)
 8002d14:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
 8002d18:	88d3      	ldrh	r3, [r2, #6]
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	8893      	ldrh	r3, [r2, #4]
 8002d1e:	8852      	ldrh	r2, [r2, #2]
 8002d20:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 8002d24:	4620      	mov	r0, r4
 8002d26:	f000 fa79 	bl	800321c <xbeeSend>
  for(i = 280; i < 284; i++)
 8002d2a:	3401      	adds	r4, #1
 8002d2c:	b2a4      	uxth	r4, r4
 8002d2e:	f5b4 7f8e 	cmp.w	r4, #284	; 0x11c
 8002d32:	d3ee      	bcc.n	8002d12 <xbeePacks+0xaa>

  /*Pack 5*/
  for(i = 285; i < 289; i++)
 8002d34:	f240 141d 	movw	r4, #285	; 0x11d
 8002d38:	e00d      	b.n	8002d56 <xbeePacks+0xee>
    xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1, can_vector[i].word_2, can_vector[i].word_3);
 8002d3a:	4909      	ldr	r1, [pc, #36]	; (8002d60 <xbeePacks+0xf8>)
 8002d3c:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
 8002d40:	88d3      	ldrh	r3, [r2, #6]
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	8893      	ldrh	r3, [r2, #4]
 8002d46:	8852      	ldrh	r2, [r2, #2]
 8002d48:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	f000 fa65 	bl	800321c <xbeeSend>
  for(i = 285; i < 289; i++)
 8002d52:	3401      	adds	r4, #1
 8002d54:	b2a4      	uxth	r4, r4
 8002d56:	f5b4 7f90 	cmp.w	r4, #288	; 0x120
 8002d5a:	d9ee      	bls.n	8002d3a <xbeePacks+0xd2>
}
 8002d5c:	b002      	add	sp, #8
 8002d5e:	bd10      	pop	{r4, pc}
 8002d60:	200002e8 	.word	0x200002e8

08002d64 <xbeeGeneral>:

void xbeeGeneral(void)
{
 8002d64:	b510      	push	{r4, lr}
 8002d66:	b082      	sub	sp, #8
  uint16_t i;

	/*Bateria General Information*/
	xbeeSend(0, can_vector[0].word_0, 0, 0, 0);
 8002d68:	2000      	movs	r0, #0
 8002d6a:	9000      	str	r0, [sp, #0]
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	4602      	mov	r2, r0
 8002d70:	493a      	ldr	r1, [pc, #232]	; (8002e5c <xbeeGeneral+0xf8>)
 8002d72:	8809      	ldrh	r1, [r1, #0]
 8002d74:	f000 fa52 	bl	800321c <xbeeSend>
  for(i = 51; i < 55; i++)
 8002d78:	2433      	movs	r4, #51	; 0x33
 8002d7a:	e00d      	b.n	8002d98 <xbeeGeneral+0x34>
    xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1, can_vector[i].word_2, can_vector[i].word_3);
 8002d7c:	4937      	ldr	r1, [pc, #220]	; (8002e5c <xbeeGeneral+0xf8>)
 8002d7e:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
 8002d82:	88d3      	ldrh	r3, [r2, #6]
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	8893      	ldrh	r3, [r2, #4]
 8002d88:	8852      	ldrh	r2, [r2, #2]
 8002d8a:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 8002d8e:	4620      	mov	r0, r4
 8002d90:	f000 fa44 	bl	800321c <xbeeSend>
  for(i = 51; i < 55; i++)
 8002d94:	3401      	adds	r4, #1
 8002d96:	b2a4      	uxth	r4, r4
 8002d98:	2c36      	cmp	r4, #54	; 0x36
 8002d9a:	d9ef      	bls.n	8002d7c <xbeeGeneral+0x18>



	/*Aquisição General Information*/
  xbeeSend(170, can_vector[170].word_0, can_vector[170].word_1, can_vector[170].word_2, can_vector[170].word_3);
 8002d9c:	4c2f      	ldr	r4, [pc, #188]	; (8002e5c <xbeeGeneral+0xf8>)
 8002d9e:	f8b4 3556 	ldrh.w	r3, [r4, #1366]	; 0x556
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	f8b4 3554 	ldrh.w	r3, [r4, #1364]	; 0x554
 8002da8:	f8b4 2552 	ldrh.w	r2, [r4, #1362]	; 0x552
 8002dac:	f8b4 1550 	ldrh.w	r1, [r4, #1360]	; 0x550
 8002db0:	20aa      	movs	r0, #170	; 0xaa
 8002db2:	f000 fa33 	bl	800321c <xbeeSend>
  xbeeSend(171, can_vector[171].word_0, can_vector[171].word_1, can_vector[171].word_2, can_vector[171].word_3);
 8002db6:	f8b4 355e 	ldrh.w	r3, [r4, #1374]	; 0x55e
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	f8b4 355c 	ldrh.w	r3, [r4, #1372]	; 0x55c
 8002dc0:	f8b4 255a 	ldrh.w	r2, [r4, #1370]	; 0x55a
 8002dc4:	f8b4 1558 	ldrh.w	r1, [r4, #1368]	; 0x558
 8002dc8:	20ab      	movs	r0, #171	; 0xab
 8002dca:	f000 fa27 	bl	800321c <xbeeSend>
  xbeeSend(161, can_vector[161].word_0, can_vector[161].word_1, can_vector[161].word_2, can_vector[161].word_3);
 8002dce:	f8b4 350e 	ldrh.w	r3, [r4, #1294]	; 0x50e
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	f8b4 350c 	ldrh.w	r3, [r4, #1292]	; 0x50c
 8002dd8:	f8b4 250a 	ldrh.w	r2, [r4, #1290]	; 0x50a
 8002ddc:	f8b4 1508 	ldrh.w	r1, [r4, #1288]	; 0x508
 8002de0:	20a1      	movs	r0, #161	; 0xa1
 8002de2:	f000 fa1b 	bl	800321c <xbeeSend>
  xbeeSend(162, can_vector[161].word_0, can_vector[161].word_1, can_vector[161].word_2, can_vector[161].word_3);
 8002de6:	f8b4 350e 	ldrh.w	r3, [r4, #1294]	; 0x50e
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	f8b4 350c 	ldrh.w	r3, [r4, #1292]	; 0x50c
 8002df0:	f8b4 250a 	ldrh.w	r2, [r4, #1290]	; 0x50a
 8002df4:	f8b4 1508 	ldrh.w	r1, [r4, #1288]	; 0x508
 8002df8:	20a2      	movs	r0, #162	; 0xa2
 8002dfa:	f000 fa0f 	bl	800321c <xbeeSend>
  for(i = 156; i < 160; i++)
 8002dfe:	249c      	movs	r4, #156	; 0x9c
 8002e00:	e00d      	b.n	8002e1e <xbeeGeneral+0xba>
    xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1, can_vector[i].word_2, can_vector[i].word_3);
 8002e02:	4916      	ldr	r1, [pc, #88]	; (8002e5c <xbeeGeneral+0xf8>)
 8002e04:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
 8002e08:	88d3      	ldrh	r3, [r2, #6]
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	8893      	ldrh	r3, [r2, #4]
 8002e0e:	8852      	ldrh	r2, [r2, #2]
 8002e10:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 8002e14:	4620      	mov	r0, r4
 8002e16:	f000 fa01 	bl	800321c <xbeeSend>
  for(i = 156; i < 160; i++)
 8002e1a:	3401      	adds	r4, #1
 8002e1c:	b2a4      	uxth	r4, r4
 8002e1e:	2c9f      	cmp	r4, #159	; 0x9f
 8002e20:	d9ef      	bls.n	8002e02 <xbeeGeneral+0x9e>


  
	/*Controle Information*/
  xbeeSend(1, can_vector[1].word_0, can_vector[1].word_1, can_vector[1].word_2, can_vector[1].word_3);
 8002e22:	490e      	ldr	r1, [pc, #56]	; (8002e5c <xbeeGeneral+0xf8>)
 8002e24:	89cb      	ldrh	r3, [r1, #14]
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	898b      	ldrh	r3, [r1, #12]
 8002e2a:	894a      	ldrh	r2, [r1, #10]
 8002e2c:	8909      	ldrh	r1, [r1, #8]
 8002e2e:	2001      	movs	r0, #1
 8002e30:	f000 f9f4 	bl	800321c <xbeeSend>
  for(i = 101; i < 108; i++)
 8002e34:	2465      	movs	r4, #101	; 0x65
 8002e36:	e00d      	b.n	8002e54 <xbeeGeneral+0xf0>
    xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1, can_vector[i].word_2, can_vector[i].word_3);
 8002e38:	4908      	ldr	r1, [pc, #32]	; (8002e5c <xbeeGeneral+0xf8>)
 8002e3a:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
 8002e3e:	88d3      	ldrh	r3, [r2, #6]
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	8893      	ldrh	r3, [r2, #4]
 8002e44:	8852      	ldrh	r2, [r2, #2]
 8002e46:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	f000 f9e6 	bl	800321c <xbeeSend>
  for(i = 101; i < 108; i++)
 8002e50:	3401      	adds	r4, #1
 8002e52:	b2a4      	uxth	r4, r4
 8002e54:	2c6b      	cmp	r4, #107	; 0x6b
 8002e56:	d9ef      	bls.n	8002e38 <xbeeGeneral+0xd4>
}
 8002e58:	b002      	add	sp, #8
 8002e5a:	bd10      	pop	{r4, pc}
 8002e5c:	200002e8 	.word	0x200002e8

08002e60 <telemetrySend>:

void telemetrySend(void)
{
 8002e60:	b508      	push	{r3, lr}
  if((actualTimer-packTimer.previous)>packTimer.interval){
 8002e62:	4a09      	ldr	r2, [pc, #36]	; (8002e88 <telemetrySend+0x28>)
 8002e64:	6811      	ldr	r1, [r2, #0]
 8002e66:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <telemetrySend+0x2c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	1a5b      	subs	r3, r3, r1
 8002e6c:	8892      	ldrh	r2, [r2, #4]
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d802      	bhi.n	8002e78 <telemetrySend+0x18>
    xbeePacks();
    packTimer.previous = HAL_GetTick();
  }
  xbeeGeneral();
 8002e72:	f7ff ff77 	bl	8002d64 <xbeeGeneral>
}
 8002e76:	bd08      	pop	{r3, pc}
    xbeePacks();
 8002e78:	f7ff fef6 	bl	8002c68 <xbeePacks>
    packTimer.previous = HAL_GetTick();
 8002e7c:	f7fd f9b0 	bl	80001e0 <HAL_GetTick>
 8002e80:	4b01      	ldr	r3, [pc, #4]	; (8002e88 <telemetrySend+0x28>)
 8002e82:	6018      	str	r0, [r3, #0]
 8002e84:	e7f5      	b.n	8002e72 <telemetrySend+0x12>
 8002e86:	bf00      	nop
 8002e88:	20000e2c 	.word	0x20000e2c
 8002e8c:	20000e28 	.word	0x20000e28

08002e90 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e90:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8002e92:	480b      	ldr	r0, [pc, #44]	; (8002ec0 <MX_USART1_UART_Init+0x30>)
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <MX_USART1_UART_Init+0x34>)
 8002e96:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8002e98:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002e9c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ea2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ea4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8002ea6:	2208      	movs	r2, #8
 8002ea8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eaa:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eac:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002eae:	f7fe fc65 	bl	800177c <HAL_UART_Init>
 8002eb2:	b900      	cbnz	r0, 8002eb6 <MX_USART1_UART_Init+0x26>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8002eb4:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8002eb6:	2147      	movs	r1, #71	; 0x47
 8002eb8:	4803      	ldr	r0, [pc, #12]	; (8002ec8 <MX_USART1_UART_Init+0x38>)
 8002eba:	f7ff fc5b 	bl	8002774 <_Error_Handler>
}
 8002ebe:	e7f9      	b.n	8002eb4 <MX_USART1_UART_Init+0x24>
 8002ec0:	20000fc0 	.word	0x20000fc0
 8002ec4:	40013800 	.word	0x40013800
 8002ec8:	08003e6c 	.word	0x08003e6c

08002ecc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ecc:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8002ece:	480b      	ldr	r0, [pc, #44]	; (8002efc <MX_USART2_UART_Init+0x30>)
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <MX_USART2_UART_Init+0x34>)
 8002ed2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8002ed4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002ed8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002eda:	2300      	movs	r3, #0
 8002edc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ede:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ee0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ee2:	220c      	movs	r2, #12
 8002ee4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ee6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ee8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002eea:	f7fe fc47 	bl	800177c <HAL_UART_Init>
 8002eee:	b900      	cbnz	r0, 8002ef2 <MX_USART2_UART_Init+0x26>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8002ef0:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8002ef2:	215a      	movs	r1, #90	; 0x5a
 8002ef4:	4803      	ldr	r0, [pc, #12]	; (8002f04 <MX_USART2_UART_Init+0x38>)
 8002ef6:	f7ff fc3d 	bl	8002774 <_Error_Handler>
}
 8002efa:	e7f9      	b.n	8002ef0 <MX_USART2_UART_Init+0x24>
 8002efc:	20001000 	.word	0x20001000
 8002f00:	40004400 	.word	0x40004400
 8002f04:	08003e6c 	.word	0x08003e6c

08002f08 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002f08:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8002f0a:	480b      	ldr	r0, [pc, #44]	; (8002f38 <MX_USART3_UART_Init+0x30>)
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <MX_USART3_UART_Init+0x34>)
 8002f0e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8002f10:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002f14:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f16:	2300      	movs	r3, #0
 8002f18:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f1a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f1c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f1e:	220c      	movs	r2, #12
 8002f20:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f22:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f24:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f26:	f7fe fc29 	bl	800177c <HAL_UART_Init>
 8002f2a:	b900      	cbnz	r0, 8002f2e <MX_USART3_UART_Init+0x26>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8002f2c:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8002f2e:	216d      	movs	r1, #109	; 0x6d
 8002f30:	4803      	ldr	r0, [pc, #12]	; (8002f40 <MX_USART3_UART_Init+0x38>)
 8002f32:	f7ff fc1f 	bl	8002774 <_Error_Handler>
}
 8002f36:	e7f9      	b.n	8002f2c <MX_USART3_UART_Init+0x24>
 8002f38:	20000f80 	.word	0x20000f80
 8002f3c:	40004800 	.word	0x40004800
 8002f40:	08003e6c 	.word	0x08003e6c

08002f44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f44:	b570      	push	{r4, r5, r6, lr}
 8002f46:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8002f48:	6803      	ldr	r3, [r0, #0]
 8002f4a:	4a58      	ldr	r2, [pc, #352]	; (80030ac <HAL_UART_MspInit+0x168>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d008      	beq.n	8002f62 <HAL_UART_MspInit+0x1e>
 8002f50:	4604      	mov	r4, r0

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002f52:	4a57      	ldr	r2, [pc, #348]	; (80030b0 <HAL_UART_MspInit+0x16c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d02a      	beq.n	8002fae <HAL_UART_MspInit+0x6a>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8002f58:	4a56      	ldr	r2, [pc, #344]	; (80030b4 <HAL_UART_MspInit+0x170>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d066      	beq.n	800302c <HAL_UART_MspInit+0xe8>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002f5e:	b008      	add	sp, #32
 8002f60:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f62:	4b55      	ldr	r3, [pc, #340]	; (80030b8 <HAL_UART_MspInit+0x174>)
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f6a:	619a      	str	r2, [r3, #24]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f72:	9301      	str	r3, [sp, #4]
 8002f74:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f76:	2340      	movs	r3, #64	; 0x40
 8002f78:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f82:	4c4e      	ldr	r4, [pc, #312]	; (80030bc <HAL_UART_MspInit+0x178>)
 8002f84:	a904      	add	r1, sp, #16
 8002f86:	4620      	mov	r0, r4
 8002f88:	f7fd fe9c 	bl	8000cc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f90:	2300      	movs	r3, #0
 8002f92:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f96:	a904      	add	r1, sp, #16
 8002f98:	4620      	mov	r0, r4
 8002f9a:	f7fd fe93 	bl	8000cc4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002f9e:	4a48      	ldr	r2, [pc, #288]	; (80030c0 <HAL_UART_MspInit+0x17c>)
 8002fa0:	6853      	ldr	r3, [r2, #4]
 8002fa2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002fa6:	f043 0304 	orr.w	r3, r3, #4
 8002faa:	6053      	str	r3, [r2, #4]
 8002fac:	e7d7      	b.n	8002f5e <HAL_UART_MspInit+0x1a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fae:	4b42      	ldr	r3, [pc, #264]	; (80030b8 <HAL_UART_MspInit+0x174>)
 8002fb0:	69da      	ldr	r2, [r3, #28]
 8002fb2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002fb6:	61da      	str	r2, [r3, #28]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	9302      	str	r3, [sp, #8]
 8002fc0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fce:	4e3d      	ldr	r6, [pc, #244]	; (80030c4 <HAL_UART_MspInit+0x180>)
 8002fd0:	a904      	add	r1, sp, #16
 8002fd2:	4630      	mov	r0, r6
 8002fd4:	f7fd fe76 	bl	8000cc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002fd8:	2308      	movs	r3, #8
 8002fda:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fdc:	2500      	movs	r5, #0
 8002fde:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe0:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe2:	a904      	add	r1, sp, #16
 8002fe4:	4630      	mov	r0, r6
 8002fe6:	f7fd fe6d 	bl	8000cc4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002fea:	4837      	ldr	r0, [pc, #220]	; (80030c8 <HAL_UART_MspInit+0x184>)
 8002fec:	4b37      	ldr	r3, [pc, #220]	; (80030cc <HAL_UART_MspInit+0x188>)
 8002fee:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ff0:	6045      	str	r5, [r0, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ff2:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ff4:	2380      	movs	r3, #128	; 0x80
 8002ff6:	60c3      	str	r3, [r0, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ff8:	6105      	str	r5, [r0, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ffa:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002ffc:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003002:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003004:	f7fd fde8 	bl	8000bd8 <HAL_DMA_Init>
 8003008:	b958      	cbnz	r0, 8003022 <HAL_UART_MspInit+0xde>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800300a:	4b2f      	ldr	r3, [pc, #188]	; (80030c8 <HAL_UART_MspInit+0x184>)
 800300c:	6363      	str	r3, [r4, #52]	; 0x34
 800300e:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003010:	2200      	movs	r2, #0
 8003012:	4611      	mov	r1, r2
 8003014:	2026      	movs	r0, #38	; 0x26
 8003016:	f7fd fd5d 	bl	8000ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800301a:	2026      	movs	r0, #38	; 0x26
 800301c:	f7fd fd8e 	bl	8000b3c <HAL_NVIC_EnableIRQ>
 8003020:	e79d      	b.n	8002f5e <HAL_UART_MspInit+0x1a>
      _Error_Handler(__FILE__, __LINE__);
 8003022:	21b4      	movs	r1, #180	; 0xb4
 8003024:	482a      	ldr	r0, [pc, #168]	; (80030d0 <HAL_UART_MspInit+0x18c>)
 8003026:	f7ff fba5 	bl	8002774 <_Error_Handler>
 800302a:	e7ee      	b.n	800300a <HAL_UART_MspInit+0xc6>
    __HAL_RCC_USART3_CLK_ENABLE();
 800302c:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <HAL_UART_MspInit+0x174>)
 800302e:	69da      	ldr	r2, [r3, #28]
 8003030:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003034:	61da      	str	r2, [r3, #28]
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800303c:	9303      	str	r3, [sp, #12]
 800303e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003044:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003046:	2302      	movs	r3, #2
 8003048:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800304a:	2303      	movs	r3, #3
 800304c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800304e:	4e1b      	ldr	r6, [pc, #108]	; (80030bc <HAL_UART_MspInit+0x178>)
 8003050:	a904      	add	r1, sp, #16
 8003052:	4630      	mov	r0, r6
 8003054:	f7fd fe36 	bl	8000cc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003058:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800305c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800305e:	2500      	movs	r5, #0
 8003060:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003062:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003064:	a904      	add	r1, sp, #16
 8003066:	4630      	mov	r0, r6
 8003068:	f7fd fe2c 	bl	8000cc4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800306c:	4819      	ldr	r0, [pc, #100]	; (80030d4 <HAL_UART_MspInit+0x190>)
 800306e:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <HAL_UART_MspInit+0x194>)
 8003070:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003072:	6045      	str	r5, [r0, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003074:	6085      	str	r5, [r0, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	60c3      	str	r3, [r0, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800307a:	6105      	str	r5, [r0, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800307c:	6145      	str	r5, [r0, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800307e:	6185      	str	r5, [r0, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003080:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003082:	f7fd fda9 	bl	8000bd8 <HAL_DMA_Init>
 8003086:	b958      	cbnz	r0, 80030a0 <HAL_UART_MspInit+0x15c>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003088:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <HAL_UART_MspInit+0x190>)
 800308a:	6363      	str	r3, [r4, #52]	; 0x34
 800308c:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800308e:	2200      	movs	r2, #0
 8003090:	4611      	mov	r1, r2
 8003092:	2027      	movs	r0, #39	; 0x27
 8003094:	f7fd fd1e 	bl	8000ad4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003098:	2027      	movs	r0, #39	; 0x27
 800309a:	f7fd fd4f 	bl	8000b3c <HAL_NVIC_EnableIRQ>
}
 800309e:	e75e      	b.n	8002f5e <HAL_UART_MspInit+0x1a>
      _Error_Handler(__FILE__, __LINE__);
 80030a0:	21e2      	movs	r1, #226	; 0xe2
 80030a2:	480b      	ldr	r0, [pc, #44]	; (80030d0 <HAL_UART_MspInit+0x18c>)
 80030a4:	f7ff fb66 	bl	8002774 <_Error_Handler>
 80030a8:	e7ee      	b.n	8003088 <HAL_UART_MspInit+0x144>
 80030aa:	bf00      	nop
 80030ac:	40013800 	.word	0x40013800
 80030b0:	40004400 	.word	0x40004400
 80030b4:	40004800 	.word	0x40004800
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40010c00 	.word	0x40010c00
 80030c0:	40010000 	.word	0x40010000
 80030c4:	40010800 	.word	0x40010800
 80030c8:	20000ef8 	.word	0x20000ef8
 80030cc:	4002006c 	.word	0x4002006c
 80030d0:	08003e6c 	.word	0x08003e6c
 80030d4:	20000f3c 	.word	0x20000f3c
 80030d8:	40020030 	.word	0x40020030

080030dc <xbeeApiModeSend>:
SendMode_e mode = BYTES_API;
//uint8_t api_buffer[256];
//uint16_t previous_checksum = 0;

 uint8_t xbeeApiModeSend(char *xbeeBuffer, int buff_size)
 {
 80030dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030de:	b089      	sub	sp, #36	; 0x24
 80030e0:	4605      	mov	r5, r0
 80030e2:	460c      	mov	r4, r1
     /*Send chars through UART (Max 255 chars)*/
     /*Frame with specified address*/
     const char api_start = '\x7E';
 80030e4:	237e      	movs	r3, #126	; 0x7e
 80030e6:	f88d 301f 	strb.w	r3, [sp, #31]
     const char api_frame_type = '\x10';
 80030ea:	2310      	movs	r3, #16
 80030ec:	f88d 301e 	strb.w	r3, [sp, #30]
     const char api_frame_id = '\x00';	/* No response is requested */
 80030f0:	2700      	movs	r7, #0
 80030f2:	f88d 701d 	strb.w	r7, [sp, #29]
     const char api_dest_address_64b[9] = "\x00\x13\xA2\x00\x41\x93\x2D\xE3";
 80030f6:	4e47      	ldr	r6, [pc, #284]	; (8003214 <xbeeApiModeSend+0x138>)
 80030f8:	ab05      	add	r3, sp, #20
 80030fa:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80030fe:	c303      	stmia	r3!, {r0, r1}
 8003100:	701a      	strb	r2, [r3, #0]
     const char api_dest_address_16b[3] = "\x00\x00";
 8003102:	68f3      	ldr	r3, [r6, #12]
 8003104:	f8ad 3010 	strh.w	r3, [sp, #16]
 8003108:	0c1b      	lsrs	r3, r3, #16
 800310a:	f88d 3012 	strb.w	r3, [sp, #18]
     const char api_broad_radius = '\x00';
 800310e:	f88d 700f 	strb.w	r7, [sp, #15]
     const char api_options = '\x00';
 8003112:	f88d 700e 	strb.w	r7, [sp, #14]
    
     /*Aux variables*/
     int i, length_0;
    
     /*If the buff size is larger than 255, return 'fail'*/
     if (buff_size > 255)  return 0;
 8003116:	2cff      	cmp	r4, #255	; 0xff
 8003118:	dc79      	bgt.n	800320e <xbeeApiModeSend+0x132>
     length = buff_size + 14; /*The frame length is 14 bytes + msg size*/
 800311a:	f104 060e 	add.w	r6, r4, #14

     /*Checksum calc step by step*/
     checksum = api_frame_type + api_frame_id; /*Sum 'type' and 'ID'*/
 800311e:	2310      	movs	r3, #16
 8003120:	9302      	str	r3, [sp, #8]
     for(i = 0; i < 8; i++)  checksum += api_dest_address_64b[i];  /*Sum the 64b address*/
 8003122:	463b      	mov	r3, r7
 8003124:	e007      	b.n	8003136 <xbeeApiModeSend+0x5a>
 8003126:	aa08      	add	r2, sp, #32
 8003128:	441a      	add	r2, r3
 800312a:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 800312e:	9a02      	ldr	r2, [sp, #8]
 8003130:	440a      	add	r2, r1
 8003132:	9202      	str	r2, [sp, #8]
 8003134:	3301      	adds	r3, #1
 8003136:	2b07      	cmp	r3, #7
 8003138:	ddf5      	ble.n	8003126 <xbeeApiModeSend+0x4a>
     for(i = 0; i < 2; i++)  checksum += api_dest_address_16b[i];  /*Sum the 16b address*/
 800313a:	2300      	movs	r3, #0
 800313c:	e007      	b.n	800314e <xbeeApiModeSend+0x72>
 800313e:	aa08      	add	r2, sp, #32
 8003140:	441a      	add	r2, r3
 8003142:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8003146:	9a02      	ldr	r2, [sp, #8]
 8003148:	440a      	add	r2, r1
 800314a:	9202      	str	r2, [sp, #8]
 800314c:	3301      	adds	r3, #1
 800314e:	2b01      	cmp	r3, #1
 8003150:	ddf5      	ble.n	800313e <xbeeApiModeSend+0x62>
     checksum += api_broad_radius + api_options;  /*Sum 'BroadcastRadius' and 'options'*/
     for(i = 0; i < buff_size; i++)  checksum += (int)xbeeBuffer[i];  /*Sum the message*/
 8003152:	2300      	movs	r3, #0
 8003154:	e004      	b.n	8003160 <xbeeApiModeSend+0x84>
 8003156:	5ce9      	ldrb	r1, [r5, r3]
 8003158:	9a02      	ldr	r2, [sp, #8]
 800315a:	440a      	add	r2, r1
 800315c:	9202      	str	r2, [sp, #8]
 800315e:	3301      	adds	r3, #1
 8003160:	42a3      	cmp	r3, r4
 8003162:	dbf8      	blt.n	8003156 <xbeeApiModeSend+0x7a>
     checksum = checksum & 0xFF; /*keep only the lowest 8 bits*/
 8003164:	f89d 3008 	ldrb.w	r3, [sp, #8]
     checksum = 255 - checksum;  /*Negate it and get checksum*/
 8003168:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800316c:	9302      	str	r3, [sp, #8]
    
     HAL_UART_Transmit (&huart2, &api_start, 1, 100); /*Send 'start*/
 800316e:	4f2a      	ldr	r7, [pc, #168]	; (8003218 <xbeeApiModeSend+0x13c>)
 8003170:	2364      	movs	r3, #100	; 0x64
 8003172:	2201      	movs	r2, #1
 8003174:	f10d 011f 	add.w	r1, sp, #31
 8003178:	4638      	mov	r0, r7
 800317a:	f7fe fb2e 	bl	80017da <HAL_UART_Transmit>
     length_0 = 0xFF00 & length;
 800317e:	f406 437f 	and.w	r3, r6, #65280	; 0xff00
 8003182:	9301      	str	r3, [sp, #4]
     HAL_UART_Transmit (&huart2, &(length_0), 1, 100); /*Send 'length' first byte*/
 8003184:	2364      	movs	r3, #100	; 0x64
 8003186:	2201      	movs	r2, #1
 8003188:	a901      	add	r1, sp, #4
 800318a:	4638      	mov	r0, r7
 800318c:	f7fe fb25 	bl	80017da <HAL_UART_Transmit>
     length_0 = 0xFF & length;
 8003190:	b2f6      	uxtb	r6, r6
 8003192:	9601      	str	r6, [sp, #4]
     HAL_UART_Transmit (&huart2, &(length_0), 1, 100); /*Send 'length' second byte*/
 8003194:	2364      	movs	r3, #100	; 0x64
 8003196:	2201      	movs	r2, #1
 8003198:	a901      	add	r1, sp, #4
 800319a:	4638      	mov	r0, r7
 800319c:	f7fe fb1d 	bl	80017da <HAL_UART_Transmit>
     HAL_UART_Transmit (&huart2, &api_frame_type, 1, 100); /*Send 'freme type'*/
 80031a0:	2364      	movs	r3, #100	; 0x64
 80031a2:	2201      	movs	r2, #1
 80031a4:	f10d 011e 	add.w	r1, sp, #30
 80031a8:	4638      	mov	r0, r7
 80031aa:	f7fe fb16 	bl	80017da <HAL_UART_Transmit>
     HAL_UART_Transmit (&huart2, &api_frame_id, 1, 100); /*Send 'freme id'*/
 80031ae:	2364      	movs	r3, #100	; 0x64
 80031b0:	2201      	movs	r2, #1
 80031b2:	f10d 011d 	add.w	r1, sp, #29
 80031b6:	4638      	mov	r0, r7
 80031b8:	f7fe fb0f 	bl	80017da <HAL_UART_Transmit>
     HAL_UART_Transmit (&huart2, api_dest_address_64b, 8, 100); /*Send '64b address'*/
 80031bc:	2364      	movs	r3, #100	; 0x64
 80031be:	2208      	movs	r2, #8
 80031c0:	a905      	add	r1, sp, #20
 80031c2:	4638      	mov	r0, r7
 80031c4:	f7fe fb09 	bl	80017da <HAL_UART_Transmit>
     HAL_UART_Transmit (&huart2, api_dest_address_16b, 2, 100); /*Send '16b address'*/
 80031c8:	2364      	movs	r3, #100	; 0x64
 80031ca:	2202      	movs	r2, #2
 80031cc:	a904      	add	r1, sp, #16
 80031ce:	4638      	mov	r0, r7
 80031d0:	f7fe fb03 	bl	80017da <HAL_UART_Transmit>
     HAL_UART_Transmit (&huart2, &api_broad_radius, 1, 100); /*Send 'freme type'*/
 80031d4:	2364      	movs	r3, #100	; 0x64
 80031d6:	2201      	movs	r2, #1
 80031d8:	f10d 010f 	add.w	r1, sp, #15
 80031dc:	4638      	mov	r0, r7
 80031de:	f7fe fafc 	bl	80017da <HAL_UART_Transmit>
     HAL_UART_Transmit (&huart2, &api_options, 1, 100); /*Send 'options'*/
 80031e2:	2364      	movs	r3, #100	; 0x64
 80031e4:	2201      	movs	r2, #1
 80031e6:	f10d 010e 	add.w	r1, sp, #14
 80031ea:	4638      	mov	r0, r7
 80031ec:	f7fe faf5 	bl	80017da <HAL_UART_Transmit>
     HAL_UART_Transmit (&huart2, xbeeBuffer, buff_size, 100); /*Send the message*/
 80031f0:	2364      	movs	r3, #100	; 0x64
 80031f2:	b2a2      	uxth	r2, r4
 80031f4:	4629      	mov	r1, r5
 80031f6:	4638      	mov	r0, r7
 80031f8:	f7fe faef 	bl	80017da <HAL_UART_Transmit>
     HAL_UART_Transmit (&huart2, &checksum, 1, 100); /*Send 'checksum'*/
 80031fc:	2364      	movs	r3, #100	; 0x64
 80031fe:	2201      	movs	r2, #1
 8003200:	a902      	add	r1, sp, #8
 8003202:	4638      	mov	r0, r7
 8003204:	f7fe fae9 	bl	80017da <HAL_UART_Transmit>
    
     return 1;  /*Return 'success'*/
 8003208:	2001      	movs	r0, #1
 }
 800320a:	b009      	add	sp, #36	; 0x24
 800320c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     if (buff_size > 255)  return 0;
 800320e:	2000      	movs	r0, #0
 8003210:	e7fb      	b.n	800320a <xbeeApiModeSend+0x12e>
 8003212:	bf00      	nop
 8003214:	08003c74 	.word	0x08003c74
 8003218:	20001000 	.word	0x20001000

0800321c <xbeeSend>:
//
//    return 1;  /*Return 'success'*/
//}

void xbeeSend(int id, ...)
{
 800321c:	b40f      	push	{r0, r1, r2, r3}
 800321e:	b500      	push	{lr}
 8003220:	b0a9      	sub	sp, #164	; 0xa4
 8003222:	ab2a      	add	r3, sp, #168	; 0xa8
 8003224:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, id);
 8003228:	9327      	str	r3, [sp, #156]	; 0x9c

    uint16_t data_word[4];

    for (int i = 0; i < 4; i++) {
 800322a:	2300      	movs	r3, #0
 800322c:	e009      	b.n	8003242 <xbeeSend+0x26>
        data_word[i] = (uint16_t) va_arg(args, int);
 800322e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8003230:	1d08      	adds	r0, r1, #4
 8003232:	9027      	str	r0, [sp, #156]	; 0x9c
 8003234:	8808      	ldrh	r0, [r1, #0]
 8003236:	a928      	add	r1, sp, #160	; 0xa0
 8003238:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800323c:	f821 0c0c 	strh.w	r0, [r1, #-12]
    for (int i = 0; i < 4; i++) {
 8003240:	3301      	adds	r3, #1
 8003242:	2b03      	cmp	r3, #3
 8003244:	ddf3      	ble.n	800322e <xbeeSend+0x12>
    }
    va_end(args);

    uint8_t xbeeBuffer[128];
    int len;
    switch(mode) 
 8003246:	4b2e      	ldr	r3, [pc, #184]	; (8003300 <xbeeSend+0xe4>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b03      	cmp	r3, #3
 800324c:	d812      	bhi.n	8003274 <xbeeSend+0x58>
 800324e:	e8df f003 	tbb	[pc, r3]
 8003252:	1902      	.short	0x1902
 8003254:	432d      	.short	0x432d
    {
    case BYTES_API:
        xbeeBuffer[0] = (id);
 8003256:	f88d 2014 	strb.w	r2, [sp, #20]
        xbeeBuffer[1] = (id >> 8);
 800325a:	1212      	asrs	r2, r2, #8
 800325c:	f88d 2015 	strb.w	r2, [sp, #21]
        memcpy(xbeeBuffer+2, data_word, 8);
 8003260:	ab25      	add	r3, sp, #148	; 0x94
 8003262:	cb03      	ldmia	r3!, {r0, r1}
 8003264:	f8cd 0016 	str.w	r0, [sp, #22]
 8003268:	f8cd 101a 	str.w	r1, [sp, #26]
        len = 10;
        xbeeApiModeSend(xbeeBuffer, len);
 800326c:	210a      	movs	r1, #10
 800326e:	a805      	add	r0, sp, #20
 8003270:	f7ff ff34 	bl	80030dc <xbeeApiModeSend>
        memcpy(xbeeBuffer+2, data_word, sizeof(uint16_t)*4);
        memcpy(xbeeBuffer+10, '\n', 1);
        HAL_UART_Transmit (&huart2, xbeeBuffer, 11, 100);
    }

    HAL_Delay(DELAY_XBEE);
 8003274:	2000      	movs	r0, #0
 8003276:	f7fc ffb9 	bl	80001ec <HAL_Delay>
}
 800327a:	b029      	add	sp, #164	; 0xa4
 800327c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003280:	b004      	add	sp, #16
 8003282:	4770      	bx	lr
        len = sprintf(xbeeBuffer, "%u\t%u\t%u\t%u\t%u", id, data_word[0], data_word[1], data_word[2], data_word[3]);
 8003284:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
 8003288:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 800328c:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
 8003290:	9002      	str	r0, [sp, #8]
 8003292:	9101      	str	r1, [sp, #4]
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 800329a:	491a      	ldr	r1, [pc, #104]	; (8003304 <xbeeSend+0xe8>)
 800329c:	a805      	add	r0, sp, #20
 800329e:	f000 f897 	bl	80033d0 <siprintf>
 80032a2:	4601      	mov	r1, r0
        xbeeApiModeSend(xbeeBuffer, len);
 80032a4:	a805      	add	r0, sp, #20
 80032a6:	f7ff ff19 	bl	80030dc <xbeeApiModeSend>
        break;
 80032aa:	e7e3      	b.n	8003274 <xbeeSend+0x58>
        len = sprintf(xbeeBuffer, "%u\t%u\t%u\t%u\t%u\n", id, data_word[0], data_word[1], data_word[2], data_word[3]);
 80032ac:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
 80032b0:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 80032b4:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
 80032b8:	9002      	str	r0, [sp, #8]
 80032ba:	9101      	str	r1, [sp, #4]
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 80032c2:	4911      	ldr	r1, [pc, #68]	; (8003308 <xbeeSend+0xec>)
 80032c4:	a805      	add	r0, sp, #20
 80032c6:	f000 f883 	bl	80033d0 <siprintf>
        HAL_UART_Transmit (&huart2, xbeeBuffer, len, 100);
 80032ca:	2364      	movs	r3, #100	; 0x64
 80032cc:	b282      	uxth	r2, r0
 80032ce:	a905      	add	r1, sp, #20
 80032d0:	480e      	ldr	r0, [pc, #56]	; (800330c <xbeeSend+0xf0>)
 80032d2:	f7fe fa82 	bl	80017da <HAL_UART_Transmit>
        break;
 80032d6:	e7cd      	b.n	8003274 <xbeeSend+0x58>
        memcpy(xbeeBuffer, id, sizeof(uint16_t));
 80032d8:	8813      	ldrh	r3, [r2, #0]
 80032da:	f8ad 3014 	strh.w	r3, [sp, #20]
        memcpy(xbeeBuffer+2, data_word, sizeof(uint16_t)*4);
 80032de:	ab25      	add	r3, sp, #148	; 0x94
 80032e0:	cb03      	ldmia	r3!, {r0, r1}
 80032e2:	f8cd 0016 	str.w	r0, [sp, #22]
 80032e6:	f8cd 101a 	str.w	r1, [sp, #26]
        memcpy(xbeeBuffer+10, '\n', 1);
 80032ea:	230a      	movs	r3, #10
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	f88d 301e 	strb.w	r3, [sp, #30]
        HAL_UART_Transmit (&huart2, xbeeBuffer, 11, 100);
 80032f2:	2364      	movs	r3, #100	; 0x64
 80032f4:	220b      	movs	r2, #11
 80032f6:	a905      	add	r1, sp, #20
 80032f8:	4804      	ldr	r0, [pc, #16]	; (800330c <xbeeSend+0xf0>)
 80032fa:	f7fe fa6e 	bl	80017da <HAL_UART_Transmit>
 80032fe:	e7b9      	b.n	8003274 <xbeeSend+0x58>
 8003300:	200000d4 	.word	0x200000d4
 8003304:	08003e7c 	.word	0x08003e7c
 8003308:	08003e8c 	.word	0x08003e8c
 800330c:	20001000 	.word	0x20001000

08003310 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003310:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003312:	e003      	b.n	800331c <LoopCopyDataInit>

08003314 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003316:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003318:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800331a:	3104      	adds	r1, #4

0800331c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800331c:	480a      	ldr	r0, [pc, #40]	; (8003348 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800331e:	4b0b      	ldr	r3, [pc, #44]	; (800334c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003320:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003322:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003324:	d3f6      	bcc.n	8003314 <CopyDataInit>
  ldr r2, =_sbss
 8003326:	4a0a      	ldr	r2, [pc, #40]	; (8003350 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003328:	e002      	b.n	8003330 <LoopFillZerobss>

0800332a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800332a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800332c:	f842 3b04 	str.w	r3, [r2], #4

08003330 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003330:	4b08      	ldr	r3, [pc, #32]	; (8003354 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003332:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003334:	d3f9      	bcc.n	800332a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003336:	f7ff fc71 	bl	8002c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800333a:	f000 f80f 	bl	800335c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800333e:	f7ff fa5d 	bl	80027fc <main>
  bx lr
 8003342:	4770      	bx	lr
  ldr r3, =_sidata
 8003344:	08003ed8 	.word	0x08003ed8
  ldr r0, =_sdata
 8003348:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800334c:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8003350:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8003354:	20001050 	.word	0x20001050

08003358 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003358:	e7fe      	b.n	8003358 <ADC1_2_IRQHandler>
	...

0800335c <__libc_init_array>:
 800335c:	b570      	push	{r4, r5, r6, lr}
 800335e:	2600      	movs	r6, #0
 8003360:	4d0c      	ldr	r5, [pc, #48]	; (8003394 <__libc_init_array+0x38>)
 8003362:	4c0d      	ldr	r4, [pc, #52]	; (8003398 <__libc_init_array+0x3c>)
 8003364:	1b64      	subs	r4, r4, r5
 8003366:	10a4      	asrs	r4, r4, #2
 8003368:	42a6      	cmp	r6, r4
 800336a:	d109      	bne.n	8003380 <__libc_init_array+0x24>
 800336c:	f000 fc6a 	bl	8003c44 <_init>
 8003370:	2600      	movs	r6, #0
 8003372:	4d0a      	ldr	r5, [pc, #40]	; (800339c <__libc_init_array+0x40>)
 8003374:	4c0a      	ldr	r4, [pc, #40]	; (80033a0 <__libc_init_array+0x44>)
 8003376:	1b64      	subs	r4, r4, r5
 8003378:	10a4      	asrs	r4, r4, #2
 800337a:	42a6      	cmp	r6, r4
 800337c:	d105      	bne.n	800338a <__libc_init_array+0x2e>
 800337e:	bd70      	pop	{r4, r5, r6, pc}
 8003380:	f855 3b04 	ldr.w	r3, [r5], #4
 8003384:	4798      	blx	r3
 8003386:	3601      	adds	r6, #1
 8003388:	e7ee      	b.n	8003368 <__libc_init_array+0xc>
 800338a:	f855 3b04 	ldr.w	r3, [r5], #4
 800338e:	4798      	blx	r3
 8003390:	3601      	adds	r6, #1
 8003392:	e7f2      	b.n	800337a <__libc_init_array+0x1e>
 8003394:	08003ed0 	.word	0x08003ed0
 8003398:	08003ed0 	.word	0x08003ed0
 800339c:	08003ed0 	.word	0x08003ed0
 80033a0:	08003ed4 	.word	0x08003ed4

080033a4 <memcpy>:
 80033a4:	440a      	add	r2, r1
 80033a6:	4291      	cmp	r1, r2
 80033a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80033ac:	d100      	bne.n	80033b0 <memcpy+0xc>
 80033ae:	4770      	bx	lr
 80033b0:	b510      	push	{r4, lr}
 80033b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033b6:	4291      	cmp	r1, r2
 80033b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033bc:	d1f9      	bne.n	80033b2 <memcpy+0xe>
 80033be:	bd10      	pop	{r4, pc}

080033c0 <memset>:
 80033c0:	4603      	mov	r3, r0
 80033c2:	4402      	add	r2, r0
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d100      	bne.n	80033ca <memset+0xa>
 80033c8:	4770      	bx	lr
 80033ca:	f803 1b01 	strb.w	r1, [r3], #1
 80033ce:	e7f9      	b.n	80033c4 <memset+0x4>

080033d0 <siprintf>:
 80033d0:	b40e      	push	{r1, r2, r3}
 80033d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033d6:	b500      	push	{lr}
 80033d8:	b09c      	sub	sp, #112	; 0x70
 80033da:	ab1d      	add	r3, sp, #116	; 0x74
 80033dc:	9002      	str	r0, [sp, #8]
 80033de:	9006      	str	r0, [sp, #24]
 80033e0:	9107      	str	r1, [sp, #28]
 80033e2:	9104      	str	r1, [sp, #16]
 80033e4:	4808      	ldr	r0, [pc, #32]	; (8003408 <siprintf+0x38>)
 80033e6:	4909      	ldr	r1, [pc, #36]	; (800340c <siprintf+0x3c>)
 80033e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80033ec:	9105      	str	r1, [sp, #20]
 80033ee:	6800      	ldr	r0, [r0, #0]
 80033f0:	a902      	add	r1, sp, #8
 80033f2:	9301      	str	r3, [sp, #4]
 80033f4:	f000 f868 	bl	80034c8 <_svfiprintf_r>
 80033f8:	2200      	movs	r2, #0
 80033fa:	9b02      	ldr	r3, [sp, #8]
 80033fc:	701a      	strb	r2, [r3, #0]
 80033fe:	b01c      	add	sp, #112	; 0x70
 8003400:	f85d eb04 	ldr.w	lr, [sp], #4
 8003404:	b003      	add	sp, #12
 8003406:	4770      	bx	lr
 8003408:	20000010 	.word	0x20000010
 800340c:	ffff0208 	.word	0xffff0208

08003410 <__ssputs_r>:
 8003410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003414:	688e      	ldr	r6, [r1, #8]
 8003416:	4682      	mov	sl, r0
 8003418:	429e      	cmp	r6, r3
 800341a:	460c      	mov	r4, r1
 800341c:	4690      	mov	r8, r2
 800341e:	461f      	mov	r7, r3
 8003420:	d838      	bhi.n	8003494 <__ssputs_r+0x84>
 8003422:	898a      	ldrh	r2, [r1, #12]
 8003424:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003428:	d032      	beq.n	8003490 <__ssputs_r+0x80>
 800342a:	6825      	ldr	r5, [r4, #0]
 800342c:	6909      	ldr	r1, [r1, #16]
 800342e:	3301      	adds	r3, #1
 8003430:	eba5 0901 	sub.w	r9, r5, r1
 8003434:	6965      	ldr	r5, [r4, #20]
 8003436:	444b      	add	r3, r9
 8003438:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800343c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003440:	106d      	asrs	r5, r5, #1
 8003442:	429d      	cmp	r5, r3
 8003444:	bf38      	it	cc
 8003446:	461d      	movcc	r5, r3
 8003448:	0553      	lsls	r3, r2, #21
 800344a:	d531      	bpl.n	80034b0 <__ssputs_r+0xa0>
 800344c:	4629      	mov	r1, r5
 800344e:	f000 fb45 	bl	8003adc <_malloc_r>
 8003452:	4606      	mov	r6, r0
 8003454:	b950      	cbnz	r0, 800346c <__ssputs_r+0x5c>
 8003456:	230c      	movs	r3, #12
 8003458:	f04f 30ff 	mov.w	r0, #4294967295
 800345c:	f8ca 3000 	str.w	r3, [sl]
 8003460:	89a3      	ldrh	r3, [r4, #12]
 8003462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003466:	81a3      	strh	r3, [r4, #12]
 8003468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800346c:	464a      	mov	r2, r9
 800346e:	6921      	ldr	r1, [r4, #16]
 8003470:	f7ff ff98 	bl	80033a4 <memcpy>
 8003474:	89a3      	ldrh	r3, [r4, #12]
 8003476:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800347a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800347e:	81a3      	strh	r3, [r4, #12]
 8003480:	6126      	str	r6, [r4, #16]
 8003482:	444e      	add	r6, r9
 8003484:	6026      	str	r6, [r4, #0]
 8003486:	463e      	mov	r6, r7
 8003488:	6165      	str	r5, [r4, #20]
 800348a:	eba5 0509 	sub.w	r5, r5, r9
 800348e:	60a5      	str	r5, [r4, #8]
 8003490:	42be      	cmp	r6, r7
 8003492:	d900      	bls.n	8003496 <__ssputs_r+0x86>
 8003494:	463e      	mov	r6, r7
 8003496:	4632      	mov	r2, r6
 8003498:	4641      	mov	r1, r8
 800349a:	6820      	ldr	r0, [r4, #0]
 800349c:	f000 fab8 	bl	8003a10 <memmove>
 80034a0:	68a3      	ldr	r3, [r4, #8]
 80034a2:	6822      	ldr	r2, [r4, #0]
 80034a4:	1b9b      	subs	r3, r3, r6
 80034a6:	4432      	add	r2, r6
 80034a8:	2000      	movs	r0, #0
 80034aa:	60a3      	str	r3, [r4, #8]
 80034ac:	6022      	str	r2, [r4, #0]
 80034ae:	e7db      	b.n	8003468 <__ssputs_r+0x58>
 80034b0:	462a      	mov	r2, r5
 80034b2:	f000 fb6d 	bl	8003b90 <_realloc_r>
 80034b6:	4606      	mov	r6, r0
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d1e1      	bne.n	8003480 <__ssputs_r+0x70>
 80034bc:	4650      	mov	r0, sl
 80034be:	6921      	ldr	r1, [r4, #16]
 80034c0:	f000 fac0 	bl	8003a44 <_free_r>
 80034c4:	e7c7      	b.n	8003456 <__ssputs_r+0x46>
	...

080034c8 <_svfiprintf_r>:
 80034c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034cc:	4698      	mov	r8, r3
 80034ce:	898b      	ldrh	r3, [r1, #12]
 80034d0:	4607      	mov	r7, r0
 80034d2:	061b      	lsls	r3, r3, #24
 80034d4:	460d      	mov	r5, r1
 80034d6:	4614      	mov	r4, r2
 80034d8:	b09d      	sub	sp, #116	; 0x74
 80034da:	d50e      	bpl.n	80034fa <_svfiprintf_r+0x32>
 80034dc:	690b      	ldr	r3, [r1, #16]
 80034de:	b963      	cbnz	r3, 80034fa <_svfiprintf_r+0x32>
 80034e0:	2140      	movs	r1, #64	; 0x40
 80034e2:	f000 fafb 	bl	8003adc <_malloc_r>
 80034e6:	6028      	str	r0, [r5, #0]
 80034e8:	6128      	str	r0, [r5, #16]
 80034ea:	b920      	cbnz	r0, 80034f6 <_svfiprintf_r+0x2e>
 80034ec:	230c      	movs	r3, #12
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295
 80034f4:	e0d1      	b.n	800369a <_svfiprintf_r+0x1d2>
 80034f6:	2340      	movs	r3, #64	; 0x40
 80034f8:	616b      	str	r3, [r5, #20]
 80034fa:	2300      	movs	r3, #0
 80034fc:	9309      	str	r3, [sp, #36]	; 0x24
 80034fe:	2320      	movs	r3, #32
 8003500:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003504:	2330      	movs	r3, #48	; 0x30
 8003506:	f04f 0901 	mov.w	r9, #1
 800350a:	f8cd 800c 	str.w	r8, [sp, #12]
 800350e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80036b4 <_svfiprintf_r+0x1ec>
 8003512:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003516:	4623      	mov	r3, r4
 8003518:	469a      	mov	sl, r3
 800351a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800351e:	b10a      	cbz	r2, 8003524 <_svfiprintf_r+0x5c>
 8003520:	2a25      	cmp	r2, #37	; 0x25
 8003522:	d1f9      	bne.n	8003518 <_svfiprintf_r+0x50>
 8003524:	ebba 0b04 	subs.w	fp, sl, r4
 8003528:	d00b      	beq.n	8003542 <_svfiprintf_r+0x7a>
 800352a:	465b      	mov	r3, fp
 800352c:	4622      	mov	r2, r4
 800352e:	4629      	mov	r1, r5
 8003530:	4638      	mov	r0, r7
 8003532:	f7ff ff6d 	bl	8003410 <__ssputs_r>
 8003536:	3001      	adds	r0, #1
 8003538:	f000 80aa 	beq.w	8003690 <_svfiprintf_r+0x1c8>
 800353c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800353e:	445a      	add	r2, fp
 8003540:	9209      	str	r2, [sp, #36]	; 0x24
 8003542:	f89a 3000 	ldrb.w	r3, [sl]
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 80a2 	beq.w	8003690 <_svfiprintf_r+0x1c8>
 800354c:	2300      	movs	r3, #0
 800354e:	f04f 32ff 	mov.w	r2, #4294967295
 8003552:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003556:	f10a 0a01 	add.w	sl, sl, #1
 800355a:	9304      	str	r3, [sp, #16]
 800355c:	9307      	str	r3, [sp, #28]
 800355e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003562:	931a      	str	r3, [sp, #104]	; 0x68
 8003564:	4654      	mov	r4, sl
 8003566:	2205      	movs	r2, #5
 8003568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800356c:	4851      	ldr	r0, [pc, #324]	; (80036b4 <_svfiprintf_r+0x1ec>)
 800356e:	f000 fa41 	bl	80039f4 <memchr>
 8003572:	9a04      	ldr	r2, [sp, #16]
 8003574:	b9d8      	cbnz	r0, 80035ae <_svfiprintf_r+0xe6>
 8003576:	06d0      	lsls	r0, r2, #27
 8003578:	bf44      	itt	mi
 800357a:	2320      	movmi	r3, #32
 800357c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003580:	0711      	lsls	r1, r2, #28
 8003582:	bf44      	itt	mi
 8003584:	232b      	movmi	r3, #43	; 0x2b
 8003586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800358a:	f89a 3000 	ldrb.w	r3, [sl]
 800358e:	2b2a      	cmp	r3, #42	; 0x2a
 8003590:	d015      	beq.n	80035be <_svfiprintf_r+0xf6>
 8003592:	4654      	mov	r4, sl
 8003594:	2000      	movs	r0, #0
 8003596:	f04f 0c0a 	mov.w	ip, #10
 800359a:	9a07      	ldr	r2, [sp, #28]
 800359c:	4621      	mov	r1, r4
 800359e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035a2:	3b30      	subs	r3, #48	; 0x30
 80035a4:	2b09      	cmp	r3, #9
 80035a6:	d94e      	bls.n	8003646 <_svfiprintf_r+0x17e>
 80035a8:	b1b0      	cbz	r0, 80035d8 <_svfiprintf_r+0x110>
 80035aa:	9207      	str	r2, [sp, #28]
 80035ac:	e014      	b.n	80035d8 <_svfiprintf_r+0x110>
 80035ae:	eba0 0308 	sub.w	r3, r0, r8
 80035b2:	fa09 f303 	lsl.w	r3, r9, r3
 80035b6:	4313      	orrs	r3, r2
 80035b8:	46a2      	mov	sl, r4
 80035ba:	9304      	str	r3, [sp, #16]
 80035bc:	e7d2      	b.n	8003564 <_svfiprintf_r+0x9c>
 80035be:	9b03      	ldr	r3, [sp, #12]
 80035c0:	1d19      	adds	r1, r3, #4
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	9103      	str	r1, [sp, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	bfbb      	ittet	lt
 80035ca:	425b      	neglt	r3, r3
 80035cc:	f042 0202 	orrlt.w	r2, r2, #2
 80035d0:	9307      	strge	r3, [sp, #28]
 80035d2:	9307      	strlt	r3, [sp, #28]
 80035d4:	bfb8      	it	lt
 80035d6:	9204      	strlt	r2, [sp, #16]
 80035d8:	7823      	ldrb	r3, [r4, #0]
 80035da:	2b2e      	cmp	r3, #46	; 0x2e
 80035dc:	d10c      	bne.n	80035f8 <_svfiprintf_r+0x130>
 80035de:	7863      	ldrb	r3, [r4, #1]
 80035e0:	2b2a      	cmp	r3, #42	; 0x2a
 80035e2:	d135      	bne.n	8003650 <_svfiprintf_r+0x188>
 80035e4:	9b03      	ldr	r3, [sp, #12]
 80035e6:	3402      	adds	r4, #2
 80035e8:	1d1a      	adds	r2, r3, #4
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	9203      	str	r2, [sp, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	bfb8      	it	lt
 80035f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80035f6:	9305      	str	r3, [sp, #20]
 80035f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80036c4 <_svfiprintf_r+0x1fc>
 80035fc:	2203      	movs	r2, #3
 80035fe:	4650      	mov	r0, sl
 8003600:	7821      	ldrb	r1, [r4, #0]
 8003602:	f000 f9f7 	bl	80039f4 <memchr>
 8003606:	b140      	cbz	r0, 800361a <_svfiprintf_r+0x152>
 8003608:	2340      	movs	r3, #64	; 0x40
 800360a:	eba0 000a 	sub.w	r0, r0, sl
 800360e:	fa03 f000 	lsl.w	r0, r3, r0
 8003612:	9b04      	ldr	r3, [sp, #16]
 8003614:	3401      	adds	r4, #1
 8003616:	4303      	orrs	r3, r0
 8003618:	9304      	str	r3, [sp, #16]
 800361a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800361e:	2206      	movs	r2, #6
 8003620:	4825      	ldr	r0, [pc, #148]	; (80036b8 <_svfiprintf_r+0x1f0>)
 8003622:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003626:	f000 f9e5 	bl	80039f4 <memchr>
 800362a:	2800      	cmp	r0, #0
 800362c:	d038      	beq.n	80036a0 <_svfiprintf_r+0x1d8>
 800362e:	4b23      	ldr	r3, [pc, #140]	; (80036bc <_svfiprintf_r+0x1f4>)
 8003630:	bb1b      	cbnz	r3, 800367a <_svfiprintf_r+0x1b2>
 8003632:	9b03      	ldr	r3, [sp, #12]
 8003634:	3307      	adds	r3, #7
 8003636:	f023 0307 	bic.w	r3, r3, #7
 800363a:	3308      	adds	r3, #8
 800363c:	9303      	str	r3, [sp, #12]
 800363e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003640:	4433      	add	r3, r6
 8003642:	9309      	str	r3, [sp, #36]	; 0x24
 8003644:	e767      	b.n	8003516 <_svfiprintf_r+0x4e>
 8003646:	460c      	mov	r4, r1
 8003648:	2001      	movs	r0, #1
 800364a:	fb0c 3202 	mla	r2, ip, r2, r3
 800364e:	e7a5      	b.n	800359c <_svfiprintf_r+0xd4>
 8003650:	2300      	movs	r3, #0
 8003652:	f04f 0c0a 	mov.w	ip, #10
 8003656:	4619      	mov	r1, r3
 8003658:	3401      	adds	r4, #1
 800365a:	9305      	str	r3, [sp, #20]
 800365c:	4620      	mov	r0, r4
 800365e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003662:	3a30      	subs	r2, #48	; 0x30
 8003664:	2a09      	cmp	r2, #9
 8003666:	d903      	bls.n	8003670 <_svfiprintf_r+0x1a8>
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0c5      	beq.n	80035f8 <_svfiprintf_r+0x130>
 800366c:	9105      	str	r1, [sp, #20]
 800366e:	e7c3      	b.n	80035f8 <_svfiprintf_r+0x130>
 8003670:	4604      	mov	r4, r0
 8003672:	2301      	movs	r3, #1
 8003674:	fb0c 2101 	mla	r1, ip, r1, r2
 8003678:	e7f0      	b.n	800365c <_svfiprintf_r+0x194>
 800367a:	ab03      	add	r3, sp, #12
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	462a      	mov	r2, r5
 8003680:	4638      	mov	r0, r7
 8003682:	4b0f      	ldr	r3, [pc, #60]	; (80036c0 <_svfiprintf_r+0x1f8>)
 8003684:	a904      	add	r1, sp, #16
 8003686:	f3af 8000 	nop.w
 800368a:	1c42      	adds	r2, r0, #1
 800368c:	4606      	mov	r6, r0
 800368e:	d1d6      	bne.n	800363e <_svfiprintf_r+0x176>
 8003690:	89ab      	ldrh	r3, [r5, #12]
 8003692:	065b      	lsls	r3, r3, #25
 8003694:	f53f af2c 	bmi.w	80034f0 <_svfiprintf_r+0x28>
 8003698:	9809      	ldr	r0, [sp, #36]	; 0x24
 800369a:	b01d      	add	sp, #116	; 0x74
 800369c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036a0:	ab03      	add	r3, sp, #12
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	462a      	mov	r2, r5
 80036a6:	4638      	mov	r0, r7
 80036a8:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <_svfiprintf_r+0x1f8>)
 80036aa:	a904      	add	r1, sp, #16
 80036ac:	f000 f87c 	bl	80037a8 <_printf_i>
 80036b0:	e7eb      	b.n	800368a <_svfiprintf_r+0x1c2>
 80036b2:	bf00      	nop
 80036b4:	08003e9c 	.word	0x08003e9c
 80036b8:	08003ea6 	.word	0x08003ea6
 80036bc:	00000000 	.word	0x00000000
 80036c0:	08003411 	.word	0x08003411
 80036c4:	08003ea2 	.word	0x08003ea2

080036c8 <_printf_common>:
 80036c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036cc:	4616      	mov	r6, r2
 80036ce:	4699      	mov	r9, r3
 80036d0:	688a      	ldr	r2, [r1, #8]
 80036d2:	690b      	ldr	r3, [r1, #16]
 80036d4:	4607      	mov	r7, r0
 80036d6:	4293      	cmp	r3, r2
 80036d8:	bfb8      	it	lt
 80036da:	4613      	movlt	r3, r2
 80036dc:	6033      	str	r3, [r6, #0]
 80036de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036e2:	460c      	mov	r4, r1
 80036e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036e8:	b10a      	cbz	r2, 80036ee <_printf_common+0x26>
 80036ea:	3301      	adds	r3, #1
 80036ec:	6033      	str	r3, [r6, #0]
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	0699      	lsls	r1, r3, #26
 80036f2:	bf42      	ittt	mi
 80036f4:	6833      	ldrmi	r3, [r6, #0]
 80036f6:	3302      	addmi	r3, #2
 80036f8:	6033      	strmi	r3, [r6, #0]
 80036fa:	6825      	ldr	r5, [r4, #0]
 80036fc:	f015 0506 	ands.w	r5, r5, #6
 8003700:	d106      	bne.n	8003710 <_printf_common+0x48>
 8003702:	f104 0a19 	add.w	sl, r4, #25
 8003706:	68e3      	ldr	r3, [r4, #12]
 8003708:	6832      	ldr	r2, [r6, #0]
 800370a:	1a9b      	subs	r3, r3, r2
 800370c:	42ab      	cmp	r3, r5
 800370e:	dc28      	bgt.n	8003762 <_printf_common+0x9a>
 8003710:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003714:	1e13      	subs	r3, r2, #0
 8003716:	6822      	ldr	r2, [r4, #0]
 8003718:	bf18      	it	ne
 800371a:	2301      	movne	r3, #1
 800371c:	0692      	lsls	r2, r2, #26
 800371e:	d42d      	bmi.n	800377c <_printf_common+0xb4>
 8003720:	4649      	mov	r1, r9
 8003722:	4638      	mov	r0, r7
 8003724:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003728:	47c0      	blx	r8
 800372a:	3001      	adds	r0, #1
 800372c:	d020      	beq.n	8003770 <_printf_common+0xa8>
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	68e5      	ldr	r5, [r4, #12]
 8003732:	f003 0306 	and.w	r3, r3, #6
 8003736:	2b04      	cmp	r3, #4
 8003738:	bf18      	it	ne
 800373a:	2500      	movne	r5, #0
 800373c:	6832      	ldr	r2, [r6, #0]
 800373e:	f04f 0600 	mov.w	r6, #0
 8003742:	68a3      	ldr	r3, [r4, #8]
 8003744:	bf08      	it	eq
 8003746:	1aad      	subeq	r5, r5, r2
 8003748:	6922      	ldr	r2, [r4, #16]
 800374a:	bf08      	it	eq
 800374c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003750:	4293      	cmp	r3, r2
 8003752:	bfc4      	itt	gt
 8003754:	1a9b      	subgt	r3, r3, r2
 8003756:	18ed      	addgt	r5, r5, r3
 8003758:	341a      	adds	r4, #26
 800375a:	42b5      	cmp	r5, r6
 800375c:	d11a      	bne.n	8003794 <_printf_common+0xcc>
 800375e:	2000      	movs	r0, #0
 8003760:	e008      	b.n	8003774 <_printf_common+0xac>
 8003762:	2301      	movs	r3, #1
 8003764:	4652      	mov	r2, sl
 8003766:	4649      	mov	r1, r9
 8003768:	4638      	mov	r0, r7
 800376a:	47c0      	blx	r8
 800376c:	3001      	adds	r0, #1
 800376e:	d103      	bne.n	8003778 <_printf_common+0xb0>
 8003770:	f04f 30ff 	mov.w	r0, #4294967295
 8003774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003778:	3501      	adds	r5, #1
 800377a:	e7c4      	b.n	8003706 <_printf_common+0x3e>
 800377c:	2030      	movs	r0, #48	; 0x30
 800377e:	18e1      	adds	r1, r4, r3
 8003780:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800378a:	4422      	add	r2, r4
 800378c:	3302      	adds	r3, #2
 800378e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003792:	e7c5      	b.n	8003720 <_printf_common+0x58>
 8003794:	2301      	movs	r3, #1
 8003796:	4622      	mov	r2, r4
 8003798:	4649      	mov	r1, r9
 800379a:	4638      	mov	r0, r7
 800379c:	47c0      	blx	r8
 800379e:	3001      	adds	r0, #1
 80037a0:	d0e6      	beq.n	8003770 <_printf_common+0xa8>
 80037a2:	3601      	adds	r6, #1
 80037a4:	e7d9      	b.n	800375a <_printf_common+0x92>
	...

080037a8 <_printf_i>:
 80037a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037ac:	460c      	mov	r4, r1
 80037ae:	7e27      	ldrb	r7, [r4, #24]
 80037b0:	4691      	mov	r9, r2
 80037b2:	2f78      	cmp	r7, #120	; 0x78
 80037b4:	4680      	mov	r8, r0
 80037b6:	469a      	mov	sl, r3
 80037b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80037ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037be:	d807      	bhi.n	80037d0 <_printf_i+0x28>
 80037c0:	2f62      	cmp	r7, #98	; 0x62
 80037c2:	d80a      	bhi.n	80037da <_printf_i+0x32>
 80037c4:	2f00      	cmp	r7, #0
 80037c6:	f000 80d9 	beq.w	800397c <_printf_i+0x1d4>
 80037ca:	2f58      	cmp	r7, #88	; 0x58
 80037cc:	f000 80a4 	beq.w	8003918 <_printf_i+0x170>
 80037d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80037d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037d8:	e03a      	b.n	8003850 <_printf_i+0xa8>
 80037da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037de:	2b15      	cmp	r3, #21
 80037e0:	d8f6      	bhi.n	80037d0 <_printf_i+0x28>
 80037e2:	a001      	add	r0, pc, #4	; (adr r0, 80037e8 <_printf_i+0x40>)
 80037e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80037e8:	08003841 	.word	0x08003841
 80037ec:	08003855 	.word	0x08003855
 80037f0:	080037d1 	.word	0x080037d1
 80037f4:	080037d1 	.word	0x080037d1
 80037f8:	080037d1 	.word	0x080037d1
 80037fc:	080037d1 	.word	0x080037d1
 8003800:	08003855 	.word	0x08003855
 8003804:	080037d1 	.word	0x080037d1
 8003808:	080037d1 	.word	0x080037d1
 800380c:	080037d1 	.word	0x080037d1
 8003810:	080037d1 	.word	0x080037d1
 8003814:	08003963 	.word	0x08003963
 8003818:	08003885 	.word	0x08003885
 800381c:	08003945 	.word	0x08003945
 8003820:	080037d1 	.word	0x080037d1
 8003824:	080037d1 	.word	0x080037d1
 8003828:	08003985 	.word	0x08003985
 800382c:	080037d1 	.word	0x080037d1
 8003830:	08003885 	.word	0x08003885
 8003834:	080037d1 	.word	0x080037d1
 8003838:	080037d1 	.word	0x080037d1
 800383c:	0800394d 	.word	0x0800394d
 8003840:	680b      	ldr	r3, [r1, #0]
 8003842:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003846:	1d1a      	adds	r2, r3, #4
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	600a      	str	r2, [r1, #0]
 800384c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003850:	2301      	movs	r3, #1
 8003852:	e0a4      	b.n	800399e <_printf_i+0x1f6>
 8003854:	6825      	ldr	r5, [r4, #0]
 8003856:	6808      	ldr	r0, [r1, #0]
 8003858:	062e      	lsls	r6, r5, #24
 800385a:	f100 0304 	add.w	r3, r0, #4
 800385e:	d50a      	bpl.n	8003876 <_printf_i+0xce>
 8003860:	6805      	ldr	r5, [r0, #0]
 8003862:	600b      	str	r3, [r1, #0]
 8003864:	2d00      	cmp	r5, #0
 8003866:	da03      	bge.n	8003870 <_printf_i+0xc8>
 8003868:	232d      	movs	r3, #45	; 0x2d
 800386a:	426d      	negs	r5, r5
 800386c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003870:	230a      	movs	r3, #10
 8003872:	485e      	ldr	r0, [pc, #376]	; (80039ec <_printf_i+0x244>)
 8003874:	e019      	b.n	80038aa <_printf_i+0x102>
 8003876:	f015 0f40 	tst.w	r5, #64	; 0x40
 800387a:	6805      	ldr	r5, [r0, #0]
 800387c:	600b      	str	r3, [r1, #0]
 800387e:	bf18      	it	ne
 8003880:	b22d      	sxthne	r5, r5
 8003882:	e7ef      	b.n	8003864 <_printf_i+0xbc>
 8003884:	680b      	ldr	r3, [r1, #0]
 8003886:	6825      	ldr	r5, [r4, #0]
 8003888:	1d18      	adds	r0, r3, #4
 800388a:	6008      	str	r0, [r1, #0]
 800388c:	0628      	lsls	r0, r5, #24
 800388e:	d501      	bpl.n	8003894 <_printf_i+0xec>
 8003890:	681d      	ldr	r5, [r3, #0]
 8003892:	e002      	b.n	800389a <_printf_i+0xf2>
 8003894:	0669      	lsls	r1, r5, #25
 8003896:	d5fb      	bpl.n	8003890 <_printf_i+0xe8>
 8003898:	881d      	ldrh	r5, [r3, #0]
 800389a:	2f6f      	cmp	r7, #111	; 0x6f
 800389c:	bf0c      	ite	eq
 800389e:	2308      	moveq	r3, #8
 80038a0:	230a      	movne	r3, #10
 80038a2:	4852      	ldr	r0, [pc, #328]	; (80039ec <_printf_i+0x244>)
 80038a4:	2100      	movs	r1, #0
 80038a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038aa:	6866      	ldr	r6, [r4, #4]
 80038ac:	2e00      	cmp	r6, #0
 80038ae:	bfa8      	it	ge
 80038b0:	6821      	ldrge	r1, [r4, #0]
 80038b2:	60a6      	str	r6, [r4, #8]
 80038b4:	bfa4      	itt	ge
 80038b6:	f021 0104 	bicge.w	r1, r1, #4
 80038ba:	6021      	strge	r1, [r4, #0]
 80038bc:	b90d      	cbnz	r5, 80038c2 <_printf_i+0x11a>
 80038be:	2e00      	cmp	r6, #0
 80038c0:	d04d      	beq.n	800395e <_printf_i+0x1b6>
 80038c2:	4616      	mov	r6, r2
 80038c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80038c8:	fb03 5711 	mls	r7, r3, r1, r5
 80038cc:	5dc7      	ldrb	r7, [r0, r7]
 80038ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038d2:	462f      	mov	r7, r5
 80038d4:	42bb      	cmp	r3, r7
 80038d6:	460d      	mov	r5, r1
 80038d8:	d9f4      	bls.n	80038c4 <_printf_i+0x11c>
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d10b      	bne.n	80038f6 <_printf_i+0x14e>
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	07df      	lsls	r7, r3, #31
 80038e2:	d508      	bpl.n	80038f6 <_printf_i+0x14e>
 80038e4:	6923      	ldr	r3, [r4, #16]
 80038e6:	6861      	ldr	r1, [r4, #4]
 80038e8:	4299      	cmp	r1, r3
 80038ea:	bfde      	ittt	le
 80038ec:	2330      	movle	r3, #48	; 0x30
 80038ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038f6:	1b92      	subs	r2, r2, r6
 80038f8:	6122      	str	r2, [r4, #16]
 80038fa:	464b      	mov	r3, r9
 80038fc:	4621      	mov	r1, r4
 80038fe:	4640      	mov	r0, r8
 8003900:	f8cd a000 	str.w	sl, [sp]
 8003904:	aa03      	add	r2, sp, #12
 8003906:	f7ff fedf 	bl	80036c8 <_printf_common>
 800390a:	3001      	adds	r0, #1
 800390c:	d14c      	bne.n	80039a8 <_printf_i+0x200>
 800390e:	f04f 30ff 	mov.w	r0, #4294967295
 8003912:	b004      	add	sp, #16
 8003914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003918:	4834      	ldr	r0, [pc, #208]	; (80039ec <_printf_i+0x244>)
 800391a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800391e:	680e      	ldr	r6, [r1, #0]
 8003920:	6823      	ldr	r3, [r4, #0]
 8003922:	f856 5b04 	ldr.w	r5, [r6], #4
 8003926:	061f      	lsls	r7, r3, #24
 8003928:	600e      	str	r6, [r1, #0]
 800392a:	d514      	bpl.n	8003956 <_printf_i+0x1ae>
 800392c:	07d9      	lsls	r1, r3, #31
 800392e:	bf44      	itt	mi
 8003930:	f043 0320 	orrmi.w	r3, r3, #32
 8003934:	6023      	strmi	r3, [r4, #0]
 8003936:	b91d      	cbnz	r5, 8003940 <_printf_i+0x198>
 8003938:	6823      	ldr	r3, [r4, #0]
 800393a:	f023 0320 	bic.w	r3, r3, #32
 800393e:	6023      	str	r3, [r4, #0]
 8003940:	2310      	movs	r3, #16
 8003942:	e7af      	b.n	80038a4 <_printf_i+0xfc>
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	f043 0320 	orr.w	r3, r3, #32
 800394a:	6023      	str	r3, [r4, #0]
 800394c:	2378      	movs	r3, #120	; 0x78
 800394e:	4828      	ldr	r0, [pc, #160]	; (80039f0 <_printf_i+0x248>)
 8003950:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003954:	e7e3      	b.n	800391e <_printf_i+0x176>
 8003956:	065e      	lsls	r6, r3, #25
 8003958:	bf48      	it	mi
 800395a:	b2ad      	uxthmi	r5, r5
 800395c:	e7e6      	b.n	800392c <_printf_i+0x184>
 800395e:	4616      	mov	r6, r2
 8003960:	e7bb      	b.n	80038da <_printf_i+0x132>
 8003962:	680b      	ldr	r3, [r1, #0]
 8003964:	6826      	ldr	r6, [r4, #0]
 8003966:	1d1d      	adds	r5, r3, #4
 8003968:	6960      	ldr	r0, [r4, #20]
 800396a:	600d      	str	r5, [r1, #0]
 800396c:	0635      	lsls	r5, r6, #24
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	d501      	bpl.n	8003976 <_printf_i+0x1ce>
 8003972:	6018      	str	r0, [r3, #0]
 8003974:	e002      	b.n	800397c <_printf_i+0x1d4>
 8003976:	0671      	lsls	r1, r6, #25
 8003978:	d5fb      	bpl.n	8003972 <_printf_i+0x1ca>
 800397a:	8018      	strh	r0, [r3, #0]
 800397c:	2300      	movs	r3, #0
 800397e:	4616      	mov	r6, r2
 8003980:	6123      	str	r3, [r4, #16]
 8003982:	e7ba      	b.n	80038fa <_printf_i+0x152>
 8003984:	680b      	ldr	r3, [r1, #0]
 8003986:	1d1a      	adds	r2, r3, #4
 8003988:	600a      	str	r2, [r1, #0]
 800398a:	681e      	ldr	r6, [r3, #0]
 800398c:	2100      	movs	r1, #0
 800398e:	4630      	mov	r0, r6
 8003990:	6862      	ldr	r2, [r4, #4]
 8003992:	f000 f82f 	bl	80039f4 <memchr>
 8003996:	b108      	cbz	r0, 800399c <_printf_i+0x1f4>
 8003998:	1b80      	subs	r0, r0, r6
 800399a:	6060      	str	r0, [r4, #4]
 800399c:	6863      	ldr	r3, [r4, #4]
 800399e:	6123      	str	r3, [r4, #16]
 80039a0:	2300      	movs	r3, #0
 80039a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039a6:	e7a8      	b.n	80038fa <_printf_i+0x152>
 80039a8:	4632      	mov	r2, r6
 80039aa:	4649      	mov	r1, r9
 80039ac:	4640      	mov	r0, r8
 80039ae:	6923      	ldr	r3, [r4, #16]
 80039b0:	47d0      	blx	sl
 80039b2:	3001      	adds	r0, #1
 80039b4:	d0ab      	beq.n	800390e <_printf_i+0x166>
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	079b      	lsls	r3, r3, #30
 80039ba:	d413      	bmi.n	80039e4 <_printf_i+0x23c>
 80039bc:	68e0      	ldr	r0, [r4, #12]
 80039be:	9b03      	ldr	r3, [sp, #12]
 80039c0:	4298      	cmp	r0, r3
 80039c2:	bfb8      	it	lt
 80039c4:	4618      	movlt	r0, r3
 80039c6:	e7a4      	b.n	8003912 <_printf_i+0x16a>
 80039c8:	2301      	movs	r3, #1
 80039ca:	4632      	mov	r2, r6
 80039cc:	4649      	mov	r1, r9
 80039ce:	4640      	mov	r0, r8
 80039d0:	47d0      	blx	sl
 80039d2:	3001      	adds	r0, #1
 80039d4:	d09b      	beq.n	800390e <_printf_i+0x166>
 80039d6:	3501      	adds	r5, #1
 80039d8:	68e3      	ldr	r3, [r4, #12]
 80039da:	9903      	ldr	r1, [sp, #12]
 80039dc:	1a5b      	subs	r3, r3, r1
 80039de:	42ab      	cmp	r3, r5
 80039e0:	dcf2      	bgt.n	80039c8 <_printf_i+0x220>
 80039e2:	e7eb      	b.n	80039bc <_printf_i+0x214>
 80039e4:	2500      	movs	r5, #0
 80039e6:	f104 0619 	add.w	r6, r4, #25
 80039ea:	e7f5      	b.n	80039d8 <_printf_i+0x230>
 80039ec:	08003ead 	.word	0x08003ead
 80039f0:	08003ebe 	.word	0x08003ebe

080039f4 <memchr>:
 80039f4:	4603      	mov	r3, r0
 80039f6:	b510      	push	{r4, lr}
 80039f8:	b2c9      	uxtb	r1, r1
 80039fa:	4402      	add	r2, r0
 80039fc:	4293      	cmp	r3, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	d101      	bne.n	8003a06 <memchr+0x12>
 8003a02:	2000      	movs	r0, #0
 8003a04:	e003      	b.n	8003a0e <memchr+0x1a>
 8003a06:	7804      	ldrb	r4, [r0, #0]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	428c      	cmp	r4, r1
 8003a0c:	d1f6      	bne.n	80039fc <memchr+0x8>
 8003a0e:	bd10      	pop	{r4, pc}

08003a10 <memmove>:
 8003a10:	4288      	cmp	r0, r1
 8003a12:	b510      	push	{r4, lr}
 8003a14:	eb01 0402 	add.w	r4, r1, r2
 8003a18:	d902      	bls.n	8003a20 <memmove+0x10>
 8003a1a:	4284      	cmp	r4, r0
 8003a1c:	4623      	mov	r3, r4
 8003a1e:	d807      	bhi.n	8003a30 <memmove+0x20>
 8003a20:	1e43      	subs	r3, r0, #1
 8003a22:	42a1      	cmp	r1, r4
 8003a24:	d008      	beq.n	8003a38 <memmove+0x28>
 8003a26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a2e:	e7f8      	b.n	8003a22 <memmove+0x12>
 8003a30:	4601      	mov	r1, r0
 8003a32:	4402      	add	r2, r0
 8003a34:	428a      	cmp	r2, r1
 8003a36:	d100      	bne.n	8003a3a <memmove+0x2a>
 8003a38:	bd10      	pop	{r4, pc}
 8003a3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a42:	e7f7      	b.n	8003a34 <memmove+0x24>

08003a44 <_free_r>:
 8003a44:	b538      	push	{r3, r4, r5, lr}
 8003a46:	4605      	mov	r5, r0
 8003a48:	2900      	cmp	r1, #0
 8003a4a:	d043      	beq.n	8003ad4 <_free_r+0x90>
 8003a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a50:	1f0c      	subs	r4, r1, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	bfb8      	it	lt
 8003a56:	18e4      	addlt	r4, r4, r3
 8003a58:	f000 f8d0 	bl	8003bfc <__malloc_lock>
 8003a5c:	4a1e      	ldr	r2, [pc, #120]	; (8003ad8 <_free_r+0x94>)
 8003a5e:	6813      	ldr	r3, [r2, #0]
 8003a60:	4610      	mov	r0, r2
 8003a62:	b933      	cbnz	r3, 8003a72 <_free_r+0x2e>
 8003a64:	6063      	str	r3, [r4, #4]
 8003a66:	6014      	str	r4, [r2, #0]
 8003a68:	4628      	mov	r0, r5
 8003a6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a6e:	f000 b8cb 	b.w	8003c08 <__malloc_unlock>
 8003a72:	42a3      	cmp	r3, r4
 8003a74:	d90a      	bls.n	8003a8c <_free_r+0x48>
 8003a76:	6821      	ldr	r1, [r4, #0]
 8003a78:	1862      	adds	r2, r4, r1
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	bf01      	itttt	eq
 8003a7e:	681a      	ldreq	r2, [r3, #0]
 8003a80:	685b      	ldreq	r3, [r3, #4]
 8003a82:	1852      	addeq	r2, r2, r1
 8003a84:	6022      	streq	r2, [r4, #0]
 8003a86:	6063      	str	r3, [r4, #4]
 8003a88:	6004      	str	r4, [r0, #0]
 8003a8a:	e7ed      	b.n	8003a68 <_free_r+0x24>
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	b10b      	cbz	r3, 8003a96 <_free_r+0x52>
 8003a92:	42a3      	cmp	r3, r4
 8003a94:	d9fa      	bls.n	8003a8c <_free_r+0x48>
 8003a96:	6811      	ldr	r1, [r2, #0]
 8003a98:	1850      	adds	r0, r2, r1
 8003a9a:	42a0      	cmp	r0, r4
 8003a9c:	d10b      	bne.n	8003ab6 <_free_r+0x72>
 8003a9e:	6820      	ldr	r0, [r4, #0]
 8003aa0:	4401      	add	r1, r0
 8003aa2:	1850      	adds	r0, r2, r1
 8003aa4:	4283      	cmp	r3, r0
 8003aa6:	6011      	str	r1, [r2, #0]
 8003aa8:	d1de      	bne.n	8003a68 <_free_r+0x24>
 8003aaa:	6818      	ldr	r0, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	4401      	add	r1, r0
 8003ab0:	6011      	str	r1, [r2, #0]
 8003ab2:	6053      	str	r3, [r2, #4]
 8003ab4:	e7d8      	b.n	8003a68 <_free_r+0x24>
 8003ab6:	d902      	bls.n	8003abe <_free_r+0x7a>
 8003ab8:	230c      	movs	r3, #12
 8003aba:	602b      	str	r3, [r5, #0]
 8003abc:	e7d4      	b.n	8003a68 <_free_r+0x24>
 8003abe:	6820      	ldr	r0, [r4, #0]
 8003ac0:	1821      	adds	r1, r4, r0
 8003ac2:	428b      	cmp	r3, r1
 8003ac4:	bf01      	itttt	eq
 8003ac6:	6819      	ldreq	r1, [r3, #0]
 8003ac8:	685b      	ldreq	r3, [r3, #4]
 8003aca:	1809      	addeq	r1, r1, r0
 8003acc:	6021      	streq	r1, [r4, #0]
 8003ace:	6063      	str	r3, [r4, #4]
 8003ad0:	6054      	str	r4, [r2, #4]
 8003ad2:	e7c9      	b.n	8003a68 <_free_r+0x24>
 8003ad4:	bd38      	pop	{r3, r4, r5, pc}
 8003ad6:	bf00      	nop
 8003ad8:	200000d8 	.word	0x200000d8

08003adc <_malloc_r>:
 8003adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ade:	1ccd      	adds	r5, r1, #3
 8003ae0:	f025 0503 	bic.w	r5, r5, #3
 8003ae4:	3508      	adds	r5, #8
 8003ae6:	2d0c      	cmp	r5, #12
 8003ae8:	bf38      	it	cc
 8003aea:	250c      	movcc	r5, #12
 8003aec:	2d00      	cmp	r5, #0
 8003aee:	4606      	mov	r6, r0
 8003af0:	db01      	blt.n	8003af6 <_malloc_r+0x1a>
 8003af2:	42a9      	cmp	r1, r5
 8003af4:	d903      	bls.n	8003afe <_malloc_r+0x22>
 8003af6:	230c      	movs	r3, #12
 8003af8:	6033      	str	r3, [r6, #0]
 8003afa:	2000      	movs	r0, #0
 8003afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003afe:	f000 f87d 	bl	8003bfc <__malloc_lock>
 8003b02:	4921      	ldr	r1, [pc, #132]	; (8003b88 <_malloc_r+0xac>)
 8003b04:	680a      	ldr	r2, [r1, #0]
 8003b06:	4614      	mov	r4, r2
 8003b08:	b99c      	cbnz	r4, 8003b32 <_malloc_r+0x56>
 8003b0a:	4f20      	ldr	r7, [pc, #128]	; (8003b8c <_malloc_r+0xb0>)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	b923      	cbnz	r3, 8003b1a <_malloc_r+0x3e>
 8003b10:	4621      	mov	r1, r4
 8003b12:	4630      	mov	r0, r6
 8003b14:	f000 f862 	bl	8003bdc <_sbrk_r>
 8003b18:	6038      	str	r0, [r7, #0]
 8003b1a:	4629      	mov	r1, r5
 8003b1c:	4630      	mov	r0, r6
 8003b1e:	f000 f85d 	bl	8003bdc <_sbrk_r>
 8003b22:	1c43      	adds	r3, r0, #1
 8003b24:	d123      	bne.n	8003b6e <_malloc_r+0x92>
 8003b26:	230c      	movs	r3, #12
 8003b28:	4630      	mov	r0, r6
 8003b2a:	6033      	str	r3, [r6, #0]
 8003b2c:	f000 f86c 	bl	8003c08 <__malloc_unlock>
 8003b30:	e7e3      	b.n	8003afa <_malloc_r+0x1e>
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	1b5b      	subs	r3, r3, r5
 8003b36:	d417      	bmi.n	8003b68 <_malloc_r+0x8c>
 8003b38:	2b0b      	cmp	r3, #11
 8003b3a:	d903      	bls.n	8003b44 <_malloc_r+0x68>
 8003b3c:	6023      	str	r3, [r4, #0]
 8003b3e:	441c      	add	r4, r3
 8003b40:	6025      	str	r5, [r4, #0]
 8003b42:	e004      	b.n	8003b4e <_malloc_r+0x72>
 8003b44:	6863      	ldr	r3, [r4, #4]
 8003b46:	42a2      	cmp	r2, r4
 8003b48:	bf0c      	ite	eq
 8003b4a:	600b      	streq	r3, [r1, #0]
 8003b4c:	6053      	strne	r3, [r2, #4]
 8003b4e:	4630      	mov	r0, r6
 8003b50:	f000 f85a 	bl	8003c08 <__malloc_unlock>
 8003b54:	f104 000b 	add.w	r0, r4, #11
 8003b58:	1d23      	adds	r3, r4, #4
 8003b5a:	f020 0007 	bic.w	r0, r0, #7
 8003b5e:	1ac2      	subs	r2, r0, r3
 8003b60:	d0cc      	beq.n	8003afc <_malloc_r+0x20>
 8003b62:	1a1b      	subs	r3, r3, r0
 8003b64:	50a3      	str	r3, [r4, r2]
 8003b66:	e7c9      	b.n	8003afc <_malloc_r+0x20>
 8003b68:	4622      	mov	r2, r4
 8003b6a:	6864      	ldr	r4, [r4, #4]
 8003b6c:	e7cc      	b.n	8003b08 <_malloc_r+0x2c>
 8003b6e:	1cc4      	adds	r4, r0, #3
 8003b70:	f024 0403 	bic.w	r4, r4, #3
 8003b74:	42a0      	cmp	r0, r4
 8003b76:	d0e3      	beq.n	8003b40 <_malloc_r+0x64>
 8003b78:	1a21      	subs	r1, r4, r0
 8003b7a:	4630      	mov	r0, r6
 8003b7c:	f000 f82e 	bl	8003bdc <_sbrk_r>
 8003b80:	3001      	adds	r0, #1
 8003b82:	d1dd      	bne.n	8003b40 <_malloc_r+0x64>
 8003b84:	e7cf      	b.n	8003b26 <_malloc_r+0x4a>
 8003b86:	bf00      	nop
 8003b88:	200000d8 	.word	0x200000d8
 8003b8c:	200000dc 	.word	0x200000dc

08003b90 <_realloc_r>:
 8003b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b92:	4607      	mov	r7, r0
 8003b94:	4614      	mov	r4, r2
 8003b96:	460e      	mov	r6, r1
 8003b98:	b921      	cbnz	r1, 8003ba4 <_realloc_r+0x14>
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003ba0:	f7ff bf9c 	b.w	8003adc <_malloc_r>
 8003ba4:	b922      	cbnz	r2, 8003bb0 <_realloc_r+0x20>
 8003ba6:	f7ff ff4d 	bl	8003a44 <_free_r>
 8003baa:	4625      	mov	r5, r4
 8003bac:	4628      	mov	r0, r5
 8003bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bb0:	f000 f830 	bl	8003c14 <_malloc_usable_size_r>
 8003bb4:	42a0      	cmp	r0, r4
 8003bb6:	d20f      	bcs.n	8003bd8 <_realloc_r+0x48>
 8003bb8:	4621      	mov	r1, r4
 8003bba:	4638      	mov	r0, r7
 8003bbc:	f7ff ff8e 	bl	8003adc <_malloc_r>
 8003bc0:	4605      	mov	r5, r0
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	d0f2      	beq.n	8003bac <_realloc_r+0x1c>
 8003bc6:	4631      	mov	r1, r6
 8003bc8:	4622      	mov	r2, r4
 8003bca:	f7ff fbeb 	bl	80033a4 <memcpy>
 8003bce:	4631      	mov	r1, r6
 8003bd0:	4638      	mov	r0, r7
 8003bd2:	f7ff ff37 	bl	8003a44 <_free_r>
 8003bd6:	e7e9      	b.n	8003bac <_realloc_r+0x1c>
 8003bd8:	4635      	mov	r5, r6
 8003bda:	e7e7      	b.n	8003bac <_realloc_r+0x1c>

08003bdc <_sbrk_r>:
 8003bdc:	b538      	push	{r3, r4, r5, lr}
 8003bde:	2300      	movs	r3, #0
 8003be0:	4d05      	ldr	r5, [pc, #20]	; (8003bf8 <_sbrk_r+0x1c>)
 8003be2:	4604      	mov	r4, r0
 8003be4:	4608      	mov	r0, r1
 8003be6:	602b      	str	r3, [r5, #0]
 8003be8:	f000 f81e 	bl	8003c28 <_sbrk>
 8003bec:	1c43      	adds	r3, r0, #1
 8003bee:	d102      	bne.n	8003bf6 <_sbrk_r+0x1a>
 8003bf0:	682b      	ldr	r3, [r5, #0]
 8003bf2:	b103      	cbz	r3, 8003bf6 <_sbrk_r+0x1a>
 8003bf4:	6023      	str	r3, [r4, #0]
 8003bf6:	bd38      	pop	{r3, r4, r5, pc}
 8003bf8:	20001040 	.word	0x20001040

08003bfc <__malloc_lock>:
 8003bfc:	4801      	ldr	r0, [pc, #4]	; (8003c04 <__malloc_lock+0x8>)
 8003bfe:	f000 b811 	b.w	8003c24 <__retarget_lock_acquire_recursive>
 8003c02:	bf00      	nop
 8003c04:	20001048 	.word	0x20001048

08003c08 <__malloc_unlock>:
 8003c08:	4801      	ldr	r0, [pc, #4]	; (8003c10 <__malloc_unlock+0x8>)
 8003c0a:	f000 b80c 	b.w	8003c26 <__retarget_lock_release_recursive>
 8003c0e:	bf00      	nop
 8003c10:	20001048 	.word	0x20001048

08003c14 <_malloc_usable_size_r>:
 8003c14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c18:	1f18      	subs	r0, r3, #4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bfbc      	itt	lt
 8003c1e:	580b      	ldrlt	r3, [r1, r0]
 8003c20:	18c0      	addlt	r0, r0, r3
 8003c22:	4770      	bx	lr

08003c24 <__retarget_lock_acquire_recursive>:
 8003c24:	4770      	bx	lr

08003c26 <__retarget_lock_release_recursive>:
 8003c26:	4770      	bx	lr

08003c28 <_sbrk>:
 8003c28:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <_sbrk+0x14>)
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	6819      	ldr	r1, [r3, #0]
 8003c2e:	b909      	cbnz	r1, 8003c34 <_sbrk+0xc>
 8003c30:	4903      	ldr	r1, [pc, #12]	; (8003c40 <_sbrk+0x18>)
 8003c32:	6019      	str	r1, [r3, #0]
 8003c34:	6818      	ldr	r0, [r3, #0]
 8003c36:	4402      	add	r2, r0
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	4770      	bx	lr
 8003c3c:	200000e0 	.word	0x200000e0
 8003c40:	20001050 	.word	0x20001050

08003c44 <_init>:
 8003c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c46:	bf00      	nop
 8003c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c4a:	bc08      	pop	{r3}
 8003c4c:	469e      	mov	lr, r3
 8003c4e:	4770      	bx	lr

08003c50 <_fini>:
 8003c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c52:	bf00      	nop
 8003c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c56:	bc08      	pop	{r3}
 8003c58:	469e      	mov	lr, r3
 8003c5a:	4770      	bx	lr
