
Interface_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cc4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08003dd0  08003dd0  00013dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003fc0  08003fc0  00013fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003fc4  08003fc4  00013fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  20000000  08003fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001080  20000094  0800405c  00020094  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20001114  0800405c  00021114  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  9 .debug_info   00016691  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003acc  00000000  00000000  0003674e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0000dd76  00000000  00000000  0003a21a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011d0  00000000  00000000  00047f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000010a0  00000000  00000000  00049160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0001a2fd  00000000  00000000  0004a200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001af9b  00000000  00000000  000644fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0008f174  00000000  00000000  0007f498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0010e60c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003348  00000000  00000000  0010e65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08003db8 	.word	0x08003db8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08003db8 	.word	0x08003db8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b510      	push	{r4, lr}
 800015e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000160:	4b0e      	ldr	r3, [pc, #56]	; (800019c <HAL_InitTick+0x40>)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0c      	ldr	r2, [pc, #48]	; (80001a0 <HAL_InitTick+0x44>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 fbf0 	bl	8000958 <HAL_SYSTICK_Config>
 8000178:	b968      	cbnz	r0, 8000196 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017a:	2c0f      	cmp	r4, #15
 800017c:	d901      	bls.n	8000182 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800017e:	2001      	movs	r0, #1
 8000180:	e00a      	b.n	8000198 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000182:	2200      	movs	r2, #0
 8000184:	4621      	mov	r1, r4
 8000186:	f04f 30ff 	mov.w	r0, #4294967295
 800018a:	f000 fb9f 	bl	80008cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018e:	4b03      	ldr	r3, [pc, #12]	; (800019c <HAL_InitTick+0x40>)
 8000190:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000192:	2000      	movs	r0, #0
 8000194:	e000      	b.n	8000198 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000196:	2001      	movs	r0, #1
}
 8000198:	bd10      	pop	{r4, pc}
 800019a:	bf00      	nop
 800019c:	20000000 	.word	0x20000000
 80001a0:	2000002c 	.word	0x2000002c

080001a4 <HAL_Init>:
{
 80001a4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a6:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
 80001a8:	6813      	ldr	r3, [r2, #0]
 80001aa:	f043 0310 	orr.w	r3, r3, #16
 80001ae:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b0:	2003      	movs	r0, #3
 80001b2:	f000 fb79 	bl	80008a8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f002 fc7a 	bl	8002ab4 <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	6811      	ldr	r1, [r2, #0]
 80001cc:	4b03      	ldr	r3, [pc, #12]	; (80001dc <HAL_IncTick+0x14>)
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200000b0 	.word	0x200000b0
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	200000b0 	.word	0x200000b0

080001ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001ec:	b538      	push	{r3, r4, r5, lr}
 80001ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f0:	f7ff fff6 	bl	80001e0 <HAL_GetTick>
 80001f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001f6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80001fa:	d002      	beq.n	8000202 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <HAL_Delay+0x24>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000202:	f7ff ffed 	bl	80001e0 <HAL_GetTick>
 8000206:	1b40      	subs	r0, r0, r5
 8000208:	42a0      	cmp	r0, r4
 800020a:	d3fa      	bcc.n	8000202 <HAL_Delay+0x16>
  {
  }
}
 800020c:	bd38      	pop	{r3, r4, r5, pc}
 800020e:	bf00      	nop
 8000210:	20000000 	.word	0x20000000

08000214 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000214:	2800      	cmp	r0, #0
 8000216:	f000 80a1 	beq.w	800035c <HAL_CAN_Init+0x148>
{
 800021a:	b538      	push	{r3, r4, r5, lr}
 800021c:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800021e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000222:	b1d3      	cbz	r3, 800025a <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000224:	6822      	ldr	r2, [r4, #0]
 8000226:	6813      	ldr	r3, [r2, #0]
 8000228:	f043 0301 	orr.w	r3, r3, #1
 800022c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800022e:	f7ff ffd7 	bl	80001e0 <HAL_GetTick>
 8000232:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000234:	6823      	ldr	r3, [r4, #0]
 8000236:	685a      	ldr	r2, [r3, #4]
 8000238:	f012 0f01 	tst.w	r2, #1
 800023c:	d110      	bne.n	8000260 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800023e:	f7ff ffcf 	bl	80001e0 <HAL_GetTick>
 8000242:	1b40      	subs	r0, r0, r5
 8000244:	280a      	cmp	r0, #10
 8000246:	d9f5      	bls.n	8000234 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800024a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800024e:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000250:	2305      	movs	r3, #5
 8000252:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8000256:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8000258:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800025a:	f002 f8bf 	bl	80023dc <HAL_CAN_MspInit>
 800025e:	e7e1      	b.n	8000224 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	f022 0202 	bic.w	r2, r2, #2
 8000266:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000268:	f7ff ffba 	bl	80001e0 <HAL_GetTick>
 800026c:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800026e:	6823      	ldr	r3, [r4, #0]
 8000270:	685a      	ldr	r2, [r3, #4]
 8000272:	f012 0f02 	tst.w	r2, #2
 8000276:	d00d      	beq.n	8000294 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000278:	f7ff ffb2 	bl	80001e0 <HAL_GetTick>
 800027c:	1b40      	subs	r0, r0, r5
 800027e:	280a      	cmp	r0, #10
 8000280:	d9f5      	bls.n	800026e <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000288:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800028a:	2305      	movs	r3, #5
 800028c:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8000290:	2001      	movs	r0, #1
 8000292:	e7e1      	b.n	8000258 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000294:	7e22      	ldrb	r2, [r4, #24]
 8000296:	2a01      	cmp	r2, #1
 8000298:	d03d      	beq.n	8000316 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800029a:	681a      	ldr	r2, [r3, #0]
 800029c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80002a0:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80002a2:	7e63      	ldrb	r3, [r4, #25]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d03b      	beq.n	8000320 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80002a8:	6822      	ldr	r2, [r4, #0]
 80002aa:	6813      	ldr	r3, [r2, #0]
 80002ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002b0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 80002b2:	7ea3      	ldrb	r3, [r4, #26]
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d039      	beq.n	800032c <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80002b8:	6822      	ldr	r2, [r4, #0]
 80002ba:	6813      	ldr	r3, [r2, #0]
 80002bc:	f023 0320 	bic.w	r3, r3, #32
 80002c0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80002c2:	7ee3      	ldrb	r3, [r4, #27]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d037      	beq.n	8000338 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80002c8:	6822      	ldr	r2, [r4, #0]
 80002ca:	6813      	ldr	r3, [r2, #0]
 80002cc:	f043 0310 	orr.w	r3, r3, #16
 80002d0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80002d2:	7f23      	ldrb	r3, [r4, #28]
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d035      	beq.n	8000344 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80002d8:	6822      	ldr	r2, [r4, #0]
 80002da:	6813      	ldr	r3, [r2, #0]
 80002dc:	f023 0308 	bic.w	r3, r3, #8
 80002e0:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80002e2:	7f63      	ldrb	r3, [r4, #29]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d033      	beq.n	8000350 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80002e8:	6822      	ldr	r2, [r4, #0]
 80002ea:	6813      	ldr	r3, [r2, #0]
 80002ec:	f023 0304 	bic.w	r3, r3, #4
 80002f0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80002f2:	68a3      	ldr	r3, [r4, #8]
 80002f4:	68e2      	ldr	r2, [r4, #12]
 80002f6:	4313      	orrs	r3, r2
 80002f8:	6922      	ldr	r2, [r4, #16]
 80002fa:	4313      	orrs	r3, r2
 80002fc:	6962      	ldr	r2, [r4, #20]
 80002fe:	4313      	orrs	r3, r2
 8000300:	6862      	ldr	r2, [r4, #4]
 8000302:	3a01      	subs	r2, #1
 8000304:	6821      	ldr	r1, [r4, #0]
 8000306:	4313      	orrs	r3, r2
 8000308:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800030a:	2000      	movs	r0, #0
 800030c:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800030e:	2301      	movs	r3, #1
 8000310:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8000314:	e7a0      	b.n	8000258 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	e7c0      	b.n	80002a2 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000320:	6822      	ldr	r2, [r4, #0]
 8000322:	6813      	ldr	r3, [r2, #0]
 8000324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000328:	6013      	str	r3, [r2, #0]
 800032a:	e7c2      	b.n	80002b2 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800032c:	6822      	ldr	r2, [r4, #0]
 800032e:	6813      	ldr	r3, [r2, #0]
 8000330:	f043 0320 	orr.w	r3, r3, #32
 8000334:	6013      	str	r3, [r2, #0]
 8000336:	e7c4      	b.n	80002c2 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000338:	6822      	ldr	r2, [r4, #0]
 800033a:	6813      	ldr	r3, [r2, #0]
 800033c:	f023 0310 	bic.w	r3, r3, #16
 8000340:	6013      	str	r3, [r2, #0]
 8000342:	e7c6      	b.n	80002d2 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000344:	6822      	ldr	r2, [r4, #0]
 8000346:	6813      	ldr	r3, [r2, #0]
 8000348:	f043 0308 	orr.w	r3, r3, #8
 800034c:	6013      	str	r3, [r2, #0]
 800034e:	e7c8      	b.n	80002e2 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000350:	6822      	ldr	r2, [r4, #0]
 8000352:	6813      	ldr	r3, [r2, #0]
 8000354:	f043 0304 	orr.w	r3, r3, #4
 8000358:	6013      	str	r3, [r2, #0]
 800035a:	e7ca      	b.n	80002f2 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 800035c:	2001      	movs	r0, #1
}
 800035e:	4770      	bx	lr

08000360 <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000360:	6802      	ldr	r2, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000362:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000366:	3b01      	subs	r3, #1
 8000368:	b2db      	uxtb	r3, r3
 800036a:	2b01      	cmp	r3, #1
 800036c:	d905      	bls.n	800037a <HAL_CAN_ConfigFilter+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800036e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000374:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000376:	2001      	movs	r0, #1
  }
}
 8000378:	4770      	bx	lr
{
 800037a:	b510      	push	{r4, lr}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800037c:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000388:	694b      	ldr	r3, [r1, #20]
 800038a:	f003 031f 	and.w	r3, r3, #31
 800038e:	2001      	movs	r0, #1
 8000390:	fa00 f303 	lsl.w	r3, r0, r3
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000394:	f8d2 021c 	ldr.w	r0, [r2, #540]	; 0x21c
 8000398:	ea6f 0c03 	mvn.w	ip, r3
 800039c:	ea20 0003 	bic.w	r0, r0, r3
 80003a0:	f8c2 021c 	str.w	r0, [r2, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80003a4:	69c8      	ldr	r0, [r1, #28]
 80003a6:	b9c0      	cbnz	r0, 80003da <HAL_CAN_ConfigFilter+0x7a>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80003a8:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 80003ac:	ea0c 0000 	and.w	r0, ip, r0
 80003b0:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80003b4:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80003b6:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80003b8:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80003c0:	3048      	adds	r0, #72	; 0x48
 80003c2:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80003c6:	880c      	ldrh	r4, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80003c8:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80003ca:	f8d1 e008 	ldr.w	lr, [r1, #8]
 80003ce:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80003d2:	3048      	adds	r0, #72	; 0x48
 80003d4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80003d8:	6044      	str	r4, [r0, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80003da:	69c8      	ldr	r0, [r1, #28]
 80003dc:	2801      	cmp	r0, #1
 80003de:	d01a      	beq.n	8000416 <HAL_CAN_ConfigFilter+0xb6>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80003e0:	6988      	ldr	r0, [r1, #24]
 80003e2:	bb88      	cbnz	r0, 8000448 <HAL_CAN_ConfigFilter+0xe8>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80003e4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80003e8:	ea0c 0000 	and.w	r0, ip, r0
 80003ec:	f8c2 0204 	str.w	r0, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80003f0:	6908      	ldr	r0, [r1, #16]
 80003f2:	bb78      	cbnz	r0, 8000454 <HAL_CAN_ConfigFilter+0xf4>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80003f4:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 80003f8:	ea0c 0000 	and.w	r0, ip, r0
 80003fc:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000400:	6a09      	ldr	r1, [r1, #32]
 8000402:	2901      	cmp	r1, #1
 8000404:	d02c      	beq.n	8000460 <HAL_CAN_ConfigFilter+0x100>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000406:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 800040a:	f023 0301 	bic.w	r3, r3, #1
 800040e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 8000412:	2000      	movs	r0, #0
}
 8000414:	bd10      	pop	{r4, pc}
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000416:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 800041a:	4318      	orrs	r0, r3
 800041c:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000420:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000422:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000424:	f8d1 e000 	ldr.w	lr, [r1]
 8000428:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800042c:	3048      	adds	r0, #72	; 0x48
 800042e:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000432:	898c      	ldrh	r4, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000434:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000436:	f8d1 e008 	ldr.w	lr, [r1, #8]
 800043a:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800043e:	3048      	adds	r0, #72	; 0x48
 8000440:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8000444:	6044      	str	r4, [r0, #4]
 8000446:	e7cb      	b.n	80003e0 <HAL_CAN_ConfigFilter+0x80>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000448:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800044c:	4318      	orrs	r0, r3
 800044e:	f8c2 0204 	str.w	r0, [r2, #516]	; 0x204
 8000452:	e7cd      	b.n	80003f0 <HAL_CAN_ConfigFilter+0x90>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000454:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 8000458:	4318      	orrs	r0, r3
 800045a:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 800045e:	e7cf      	b.n	8000400 <HAL_CAN_ConfigFilter+0xa0>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000460:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8000464:	430b      	orrs	r3, r1
 8000466:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
 800046a:	e7cc      	b.n	8000406 <HAL_CAN_ConfigFilter+0xa6>

0800046c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800046c:	b570      	push	{r4, r5, r6, lr}
 800046e:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000470:	f890 5020 	ldrb.w	r5, [r0, #32]
 8000474:	b2ed      	uxtb	r5, r5
 8000476:	2d01      	cmp	r5, #1
 8000478:	d006      	beq.n	8000488 <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800047a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800047c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000480:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000482:	2501      	movs	r5, #1
  }
}
 8000484:	4628      	mov	r0, r5
 8000486:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000488:	2302      	movs	r3, #2
 800048a:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800048e:	6802      	ldr	r2, [r0, #0]
 8000490:	6813      	ldr	r3, [r2, #0]
 8000492:	f023 0301 	bic.w	r3, r3, #1
 8000496:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8000498:	f7ff fea2 	bl	80001e0 <HAL_GetTick>
 800049c:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800049e:	6823      	ldr	r3, [r4, #0]
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	f013 0f01 	tst.w	r3, #1
 80004a6:	d00c      	beq.n	80004c2 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80004a8:	f7ff fe9a 	bl	80001e0 <HAL_GetTick>
 80004ac:	1b83      	subs	r3, r0, r6
 80004ae:	2b0a      	cmp	r3, #10
 80004b0:	d9f5      	bls.n	800049e <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80004b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80004b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b8:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80004ba:	2305      	movs	r3, #5
 80004bc:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 80004c0:	e7e0      	b.n	8000484 <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80004c2:	2500      	movs	r5, #0
 80004c4:	6265      	str	r5, [r4, #36]	; 0x24
    return HAL_OK;
 80004c6:	e7dd      	b.n	8000484 <HAL_CAN_Start+0x18>

080004c8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80004c8:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80004cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80004d0:	fa5f fc8c 	uxtb.w	ip, ip
 80004d4:	f1bc 0f01 	cmp.w	ip, #1
 80004d8:	f200 809b 	bhi.w	8000612 <HAL_CAN_GetRxMessage+0x14a>
{
 80004dc:	b410      	push	{r4}
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80004de:	b951      	cbnz	r1, 80004f6 <HAL_CAN_GetRxMessage+0x2e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80004e0:	6804      	ldr	r4, [r0, #0]
 80004e2:	68e4      	ldr	r4, [r4, #12]
 80004e4:	f014 0f03 	tst.w	r4, #3
 80004e8:	d110      	bne.n	800050c <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80004ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80004ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004f0:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 80004f2:	2001      	movs	r0, #1
 80004f4:	e07b      	b.n	80005ee <HAL_CAN_GetRxMessage+0x126>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80004f6:	6804      	ldr	r4, [r0, #0]
 80004f8:	6924      	ldr	r4, [r4, #16]
 80004fa:	f014 0f03 	tst.w	r4, #3
 80004fe:	d105      	bne.n	800050c <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000500:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000502:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000506:	6243      	str	r3, [r0, #36]	; 0x24

        return HAL_ERROR;
 8000508:	2001      	movs	r0, #1
 800050a:	e070      	b.n	80005ee <HAL_CAN_GetRxMessage+0x126>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800050c:	f101 041b 	add.w	r4, r1, #27
 8000510:	0124      	lsls	r4, r4, #4
 8000512:	f8d0 c000 	ldr.w	ip, [r0]
 8000516:	f85c 4004 	ldr.w	r4, [ip, r4]
 800051a:	f004 0404 	and.w	r4, r4, #4
 800051e:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000520:	2c00      	cmp	r4, #0
 8000522:	d166      	bne.n	80005f2 <HAL_CAN_GetRxMessage+0x12a>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000524:	f101 041b 	add.w	r4, r1, #27
 8000528:	0124      	lsls	r4, r4, #4
 800052a:	f8d0 c000 	ldr.w	ip, [r0]
 800052e:	f85c 4004 	ldr.w	r4, [ip, r4]
 8000532:	0d64      	lsrs	r4, r4, #21
 8000534:	6014      	str	r4, [r2, #0]
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000536:	6804      	ldr	r4, [r0, #0]
 8000538:	f101 0c1b 	add.w	ip, r1, #27
 800053c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8000540:	f854 400c 	ldr.w	r4, [r4, ip]
 8000544:	f004 0402 	and.w	r4, r4, #2
 8000548:	60d4      	str	r4, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800054a:	6804      	ldr	r4, [r0, #0]
 800054c:	4464      	add	r4, ip
 800054e:	6864      	ldr	r4, [r4, #4]
 8000550:	f004 040f 	and.w	r4, r4, #15
 8000554:	6114      	str	r4, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000556:	6804      	ldr	r4, [r0, #0]
 8000558:	4464      	add	r4, ip
 800055a:	6864      	ldr	r4, [r4, #4]
 800055c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8000560:	6194      	str	r4, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000562:	6804      	ldr	r4, [r0, #0]
 8000564:	4464      	add	r4, ip
 8000566:	6864      	ldr	r4, [r4, #4]
 8000568:	0c24      	lsrs	r4, r4, #16
 800056a:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800056c:	6802      	ldr	r2, [r0, #0]
 800056e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000572:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000576:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000578:	6802      	ldr	r2, [r0, #0]
 800057a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800057e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000582:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8000586:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000588:	6802      	ldr	r2, [r0, #0]
 800058a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800058e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000592:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8000596:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000598:	6802      	ldr	r2, [r0, #0]
 800059a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800059e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80005a2:	0e12      	lsrs	r2, r2, #24
 80005a4:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80005a6:	6802      	ldr	r2, [r0, #0]
 80005a8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80005ac:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80005b0:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80005b2:	6802      	ldr	r2, [r0, #0]
 80005b4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80005b8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80005bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80005c0:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80005c2:	6802      	ldr	r2, [r0, #0]
 80005c4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80005c8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80005cc:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80005d0:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80005d2:	6802      	ldr	r2, [r0, #0]
 80005d4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80005d8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80005dc:	0e12      	lsrs	r2, r2, #24
 80005de:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80005e0:	b989      	cbnz	r1, 8000606 <HAL_CAN_GetRxMessage+0x13e>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80005e2:	6802      	ldr	r2, [r0, #0]
 80005e4:	68d3      	ldr	r3, [r2, #12]
 80005e6:	f043 0320 	orr.w	r3, r3, #32
 80005ea:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 80005ec:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80005ee:	bc10      	pop	{r4}
 80005f0:	4770      	bx	lr
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80005f2:	f101 041b 	add.w	r4, r1, #27
 80005f6:	0124      	lsls	r4, r4, #4
 80005f8:	f8d0 c000 	ldr.w	ip, [r0]
 80005fc:	f85c 4004 	ldr.w	r4, [ip, r4]
 8000600:	08e4      	lsrs	r4, r4, #3
 8000602:	6054      	str	r4, [r2, #4]
 8000604:	e797      	b.n	8000536 <HAL_CAN_GetRxMessage+0x6e>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000606:	6802      	ldr	r2, [r0, #0]
 8000608:	6913      	ldr	r3, [r2, #16]
 800060a:	f043 0320 	orr.w	r3, r3, #32
 800060e:	6113      	str	r3, [r2, #16]
 8000610:	e7ec      	b.n	80005ec <HAL_CAN_GetRxMessage+0x124>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000612:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000618:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 800061a:	2001      	movs	r0, #1
}
 800061c:	4770      	bx	lr

0800061e <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800061e:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000622:	3b01      	subs	r3, #1
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b01      	cmp	r3, #1
 8000628:	d905      	bls.n	8000636 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800062a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800062c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000630:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000632:	2001      	movs	r0, #1
  }
}
 8000634:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000636:	6802      	ldr	r2, [r0, #0]
 8000638:	6953      	ldr	r3, [r2, #20]
 800063a:	4319      	orrs	r1, r3
 800063c:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 800063e:	2000      	movs	r0, #0
 8000640:	4770      	bx	lr

08000642 <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000642:	4770      	bx	lr

08000644 <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000644:	4770      	bx	lr

08000646 <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000646:	4770      	bx	lr

08000648 <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000648:	4770      	bx	lr

0800064a <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800064a:	4770      	bx	lr

0800064c <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800064c:	4770      	bx	lr

0800064e <HAL_CAN_RxFifo0MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800064e:	4770      	bx	lr

08000650 <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000650:	4770      	bx	lr

08000652 <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000652:	4770      	bx	lr

08000654 <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000654:	4770      	bx	lr

08000656 <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000656:	4770      	bx	lr

08000658 <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000658:	4770      	bx	lr

0800065a <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800065a:	4770      	bx	lr

0800065c <HAL_CAN_IRQHandler>:
{
 800065c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000660:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000662:	6803      	ldr	r3, [r0, #0]
 8000664:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000666:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800066a:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800066c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000670:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000674:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000678:	f014 0601 	ands.w	r6, r4, #1
 800067c:	d03b      	beq.n	80006f6 <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800067e:	f017 0601 	ands.w	r6, r7, #1
 8000682:	d016      	beq.n	80006b2 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000684:	2201      	movs	r2, #1
 8000686:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000688:	f017 0f02 	tst.w	r7, #2
 800068c:	d108      	bne.n	80006a0 <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800068e:	f017 0f04 	tst.w	r7, #4
 8000692:	d10c      	bne.n	80006ae <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000694:	f017 0608 	ands.w	r6, r7, #8
 8000698:	d006      	beq.n	80006a8 <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800069a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 800069e:	e008      	b.n	80006b2 <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80006a0:	f7ff ffcf 	bl	8000642 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80006a4:	2600      	movs	r6, #0
 80006a6:	e004      	b.n	80006b2 <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80006a8:	f7ff ffce 	bl	8000648 <HAL_CAN_TxMailbox0AbortCallback>
 80006ac:	e001      	b.n	80006b2 <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80006ae:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80006b2:	f417 7f80 	tst.w	r7, #256	; 0x100
 80006b6:	d00d      	beq.n	80006d4 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80006b8:	682b      	ldr	r3, [r5, #0]
 80006ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006be:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80006c0:	f417 7f00 	tst.w	r7, #512	; 0x200
 80006c4:	f040 8086 	bne.w	80007d4 <HAL_CAN_IRQHandler+0x178>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80006c8:	f417 6f80 	tst.w	r7, #1024	; 0x400
 80006cc:	f000 8086 	beq.w	80007dc <HAL_CAN_IRQHandler+0x180>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80006d0:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80006d4:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80006d8:	d00d      	beq.n	80006f6 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80006da:	682b      	ldr	r3, [r5, #0]
 80006dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006e0:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80006e2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80006e6:	f040 8083 	bne.w	80007f0 <HAL_CAN_IRQHandler+0x194>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80006ea:	f417 2f80 	tst.w	r7, #262144	; 0x40000
 80006ee:	f000 8083 	beq.w	80007f8 <HAL_CAN_IRQHandler+0x19c>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80006f2:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80006f6:	f014 0f08 	tst.w	r4, #8
 80006fa:	d007      	beq.n	800070c <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80006fc:	f01b 0f10 	tst.w	fp, #16
 8000700:	d004      	beq.n	800070c <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000702:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000706:	682b      	ldr	r3, [r5, #0]
 8000708:	2210      	movs	r2, #16
 800070a:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800070c:	f014 0f04 	tst.w	r4, #4
 8000710:	d002      	beq.n	8000718 <HAL_CAN_IRQHandler+0xbc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000712:	f01b 0f08 	tst.w	fp, #8
 8000716:	d179      	bne.n	800080c <HAL_CAN_IRQHandler+0x1b0>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000718:	f014 0f02 	tst.w	r4, #2
 800071c:	d004      	beq.n	8000728 <HAL_CAN_IRQHandler+0xcc>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800071e:	682b      	ldr	r3, [r5, #0]
 8000720:	68db      	ldr	r3, [r3, #12]
 8000722:	f013 0f03 	tst.w	r3, #3
 8000726:	d178      	bne.n	800081a <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000728:	f014 0f40 	tst.w	r4, #64	; 0x40
 800072c:	d007      	beq.n	800073e <HAL_CAN_IRQHandler+0xe2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800072e:	f01a 0f10 	tst.w	sl, #16
 8000732:	d004      	beq.n	800073e <HAL_CAN_IRQHandler+0xe2>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000734:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000738:	682b      	ldr	r3, [r5, #0]
 800073a:	2210      	movs	r2, #16
 800073c:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800073e:	f014 0f20 	tst.w	r4, #32
 8000742:	d002      	beq.n	800074a <HAL_CAN_IRQHandler+0xee>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000744:	f01a 0f08 	tst.w	sl, #8
 8000748:	d16b      	bne.n	8000822 <HAL_CAN_IRQHandler+0x1c6>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800074a:	f014 0f10 	tst.w	r4, #16
 800074e:	d004      	beq.n	800075a <HAL_CAN_IRQHandler+0xfe>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000750:	682b      	ldr	r3, [r5, #0]
 8000752:	691b      	ldr	r3, [r3, #16]
 8000754:	f013 0f03 	tst.w	r3, #3
 8000758:	d16a      	bne.n	8000830 <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800075a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 800075e:	d002      	beq.n	8000766 <HAL_CAN_IRQHandler+0x10a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000760:	f018 0f10 	tst.w	r8, #16
 8000764:	d168      	bne.n	8000838 <HAL_CAN_IRQHandler+0x1dc>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000766:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 800076a:	d002      	beq.n	8000772 <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800076c:	f018 0f08 	tst.w	r8, #8
 8000770:	d169      	bne.n	8000846 <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000772:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000776:	d07a      	beq.n	800086e <HAL_CAN_IRQHandler+0x212>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000778:	f018 0f04 	tst.w	r8, #4
 800077c:	d074      	beq.n	8000868 <HAL_CAN_IRQHandler+0x20c>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800077e:	f414 7f80 	tst.w	r4, #256	; 0x100
 8000782:	d004      	beq.n	800078e <HAL_CAN_IRQHandler+0x132>
 8000784:	f019 0f01 	tst.w	r9, #1
 8000788:	d001      	beq.n	800078e <HAL_CAN_IRQHandler+0x132>
        errorcode |= HAL_CAN_ERROR_EWG;
 800078a:	f046 0601 	orr.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800078e:	f414 7f00 	tst.w	r4, #512	; 0x200
 8000792:	d004      	beq.n	800079e <HAL_CAN_IRQHandler+0x142>
 8000794:	f019 0f02 	tst.w	r9, #2
 8000798:	d001      	beq.n	800079e <HAL_CAN_IRQHandler+0x142>
        errorcode |= HAL_CAN_ERROR_EPV;
 800079a:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800079e:	f414 6f80 	tst.w	r4, #1024	; 0x400
 80007a2:	d004      	beq.n	80007ae <HAL_CAN_IRQHandler+0x152>
 80007a4:	f019 0f04 	tst.w	r9, #4
 80007a8:	d001      	beq.n	80007ae <HAL_CAN_IRQHandler+0x152>
        errorcode |= HAL_CAN_ERROR_BOF;
 80007aa:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80007ae:	f414 6f00 	tst.w	r4, #2048	; 0x800
 80007b2:	d059      	beq.n	8000868 <HAL_CAN_IRQHandler+0x20c>
 80007b4:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 80007b8:	d056      	beq.n	8000868 <HAL_CAN_IRQHandler+0x20c>
        switch (esrflags & CAN_ESR_LEC)
 80007ba:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 80007be:	d065      	beq.n	800088c <HAL_CAN_IRQHandler+0x230>
 80007c0:	d858      	bhi.n	8000874 <HAL_CAN_IRQHandler+0x218>
 80007c2:	f1b9 0f20 	cmp.w	r9, #32
 80007c6:	d05e      	beq.n	8000886 <HAL_CAN_IRQHandler+0x22a>
 80007c8:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 80007cc:	d142      	bne.n	8000854 <HAL_CAN_IRQHandler+0x1f8>
            errorcode |= HAL_CAN_ERROR_ACK;
 80007ce:	f046 0620 	orr.w	r6, r6, #32
            break;
 80007d2:	e044      	b.n	800085e <HAL_CAN_IRQHandler+0x202>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80007d4:	4628      	mov	r0, r5
 80007d6:	f7ff ff35 	bl	8000644 <HAL_CAN_TxMailbox1CompleteCallback>
 80007da:	e77b      	b.n	80006d4 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80007dc:	f417 6f00 	tst.w	r7, #2048	; 0x800
 80007e0:	d002      	beq.n	80007e8 <HAL_CAN_IRQHandler+0x18c>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80007e2:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80007e6:	e775      	b.n	80006d4 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80007e8:	4628      	mov	r0, r5
 80007ea:	f7ff ff2e 	bl	800064a <HAL_CAN_TxMailbox1AbortCallback>
 80007ee:	e771      	b.n	80006d4 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80007f0:	4628      	mov	r0, r5
 80007f2:	f7ff ff28 	bl	8000646 <HAL_CAN_TxMailbox2CompleteCallback>
 80007f6:	e77e      	b.n	80006f6 <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80007f8:	f417 2f00 	tst.w	r7, #524288	; 0x80000
 80007fc:	d002      	beq.n	8000804 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80007fe:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8000802:	e778      	b.n	80006f6 <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000804:	4628      	mov	r0, r5
 8000806:	f7ff ff21 	bl	800064c <HAL_CAN_TxMailbox2AbortCallback>
 800080a:	e774      	b.n	80006f6 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800080c:	682b      	ldr	r3, [r5, #0]
 800080e:	2208      	movs	r2, #8
 8000810:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000812:	4628      	mov	r0, r5
 8000814:	f7ff ff1c 	bl	8000650 <HAL_CAN_RxFifo0FullCallback>
 8000818:	e77e      	b.n	8000718 <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800081a:	4628      	mov	r0, r5
 800081c:	f7ff ff17 	bl	800064e <HAL_CAN_RxFifo0MsgPendingCallback>
 8000820:	e782      	b.n	8000728 <HAL_CAN_IRQHandler+0xcc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000822:	682b      	ldr	r3, [r5, #0]
 8000824:	2208      	movs	r2, #8
 8000826:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000828:	4628      	mov	r0, r5
 800082a:	f7ff ff13 	bl	8000654 <HAL_CAN_RxFifo1FullCallback>
 800082e:	e78c      	b.n	800074a <HAL_CAN_IRQHandler+0xee>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000830:	4628      	mov	r0, r5
 8000832:	f7ff ff0e 	bl	8000652 <HAL_CAN_RxFifo1MsgPendingCallback>
 8000836:	e790      	b.n	800075a <HAL_CAN_IRQHandler+0xfe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000838:	682b      	ldr	r3, [r5, #0]
 800083a:	2210      	movs	r2, #16
 800083c:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 800083e:	4628      	mov	r0, r5
 8000840:	f7ff ff09 	bl	8000656 <HAL_CAN_SleepCallback>
 8000844:	e78f      	b.n	8000766 <HAL_CAN_IRQHandler+0x10a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000846:	682b      	ldr	r3, [r5, #0]
 8000848:	2208      	movs	r2, #8
 800084a:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800084c:	4628      	mov	r0, r5
 800084e:	f7ff ff03 	bl	8000658 <HAL_CAN_WakeUpFromRxMsgCallback>
 8000852:	e78e      	b.n	8000772 <HAL_CAN_IRQHandler+0x116>
        switch (esrflags & CAN_ESR_LEC)
 8000854:	f1b9 0f10 	cmp.w	r9, #16
 8000858:	d101      	bne.n	800085e <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_STF;
 800085a:	f046 0608 	orr.w	r6, r6, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800085e:	682a      	ldr	r2, [r5, #0]
 8000860:	6993      	ldr	r3, [r2, #24]
 8000862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000866:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000868:	682b      	ldr	r3, [r5, #0]
 800086a:	2204      	movs	r2, #4
 800086c:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 800086e:	b99e      	cbnz	r6, 8000898 <HAL_CAN_IRQHandler+0x23c>
}
 8000870:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (esrflags & CAN_ESR_LEC)
 8000874:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8000878:	d00b      	beq.n	8000892 <HAL_CAN_IRQHandler+0x236>
 800087a:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
 800087e:	d1ee      	bne.n	800085e <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000880:	f446 7680 	orr.w	r6, r6, #256	; 0x100
            break;
 8000884:	e7eb      	b.n	800085e <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000886:	f046 0610 	orr.w	r6, r6, #16
            break;
 800088a:	e7e8      	b.n	800085e <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BR;
 800088c:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 8000890:	e7e5      	b.n	800085e <HAL_CAN_IRQHandler+0x202>
            errorcode |= HAL_CAN_ERROR_BD;
 8000892:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 8000896:	e7e2      	b.n	800085e <HAL_CAN_IRQHandler+0x202>
    hcan->ErrorCode |= errorcode;
 8000898:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800089a:	431e      	orrs	r6, r3
 800089c:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 800089e:	4628      	mov	r0, r5
 80008a0:	f7ff fedb 	bl	800065a <HAL_CAN_ErrorCallback>
}
 80008a4:	e7e4      	b.n	8000870 <HAL_CAN_IRQHandler+0x214>
	...

080008a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a8:	4a07      	ldr	r2, [pc, #28]	; (80008c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80008aa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80008b0:	041b      	lsls	r3, r3, #16
 80008b2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008b4:	0200      	lsls	r0, r0, #8
 80008b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ba:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80008bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80008c4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80008c6:	4770      	bx	lr
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008cc:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <HAL_NVIC_SetPriority+0x68>)
 80008d0:	68db      	ldr	r3, [r3, #12]
 80008d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d6:	f1c3 0c07 	rsb	ip, r3, #7
 80008da:	f1bc 0f04 	cmp.w	ip, #4
 80008de:	bf28      	it	cs
 80008e0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e4:	f103 0e04 	add.w	lr, r3, #4
 80008e8:	f1be 0f06 	cmp.w	lr, #6
 80008ec:	d918      	bls.n	8000920 <HAL_NVIC_SetPriority+0x54>
 80008ee:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f0:	f04f 3eff 	mov.w	lr, #4294967295
 80008f4:	fa0e fc0c 	lsl.w	ip, lr, ip
 80008f8:	ea21 010c 	bic.w	r1, r1, ip
 80008fc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008fe:	fa0e f303 	lsl.w	r3, lr, r3
 8000902:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000906:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000908:	2800      	cmp	r0, #0
 800090a:	db0b      	blt.n	8000924 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090c:	0109      	lsls	r1, r1, #4
 800090e:	b2c9      	uxtb	r1, r1
 8000910:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000914:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000918:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800091c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000920:	2300      	movs	r3, #0
 8000922:	e7e5      	b.n	80008f0 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000924:	f000 000f 	and.w	r0, r0, #15
 8000928:	0109      	lsls	r1, r1, #4
 800092a:	b2c9      	uxtb	r1, r1
 800092c:	4b02      	ldr	r3, [pc, #8]	; (8000938 <HAL_NVIC_SetPriority+0x6c>)
 800092e:	5419      	strb	r1, [r3, r0]
 8000930:	e7f4      	b.n	800091c <HAL_NVIC_SetPriority+0x50>
 8000932:	bf00      	nop
 8000934:	e000ed00 	.word	0xe000ed00
 8000938:	e000ed14 	.word	0xe000ed14

0800093c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800093c:	2800      	cmp	r0, #0
 800093e:	db07      	blt.n	8000950 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000940:	f000 021f 	and.w	r2, r0, #31
 8000944:	0940      	lsrs	r0, r0, #5
 8000946:	2301      	movs	r3, #1
 8000948:	4093      	lsls	r3, r2
 800094a:	4a02      	ldr	r2, [pc, #8]	; (8000954 <HAL_NVIC_EnableIRQ+0x18>)
 800094c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000e100 	.word	0xe000e100

08000958 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000958:	3801      	subs	r0, #1
 800095a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800095e:	d20b      	bcs.n	8000978 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000960:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000964:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000966:	4a05      	ldr	r2, [pc, #20]	; (800097c <HAL_SYSTICK_Config+0x24>)
 8000968:	21f0      	movs	r1, #240	; 0xf0
 800096a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800096e:	2000      	movs	r0, #0
 8000970:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000972:	2207      	movs	r2, #7
 8000974:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000976:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000978:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800097a:	4770      	bx	lr
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000980:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000982:	2401      	movs	r4, #1
 8000984:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000986:	40ac      	lsls	r4, r5
 8000988:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800098a:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800098c:	6804      	ldr	r4, [r0, #0]
 800098e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000990:	6843      	ldr	r3, [r0, #4]
 8000992:	2b10      	cmp	r3, #16
 8000994:	d005      	beq.n	80009a2 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000996:	6803      	ldr	r3, [r0, #0]
 8000998:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800099a:	6803      	ldr	r3, [r0, #0]
 800099c:	60da      	str	r2, [r3, #12]
  }
}
 800099e:	bc30      	pop	{r4, r5}
 80009a0:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80009a2:	6803      	ldr	r3, [r0, #0]
 80009a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80009a6:	6803      	ldr	r3, [r0, #0]
 80009a8:	60d9      	str	r1, [r3, #12]
 80009aa:	e7f8      	b.n	800099e <DMA_SetConfig+0x1e>

080009ac <HAL_DMA_Init>:
  if(hdma == NULL)
 80009ac:	b360      	cbz	r0, 8000a08 <HAL_DMA_Init+0x5c>
{
 80009ae:	b410      	push	{r4}
 80009b0:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80009b2:	6801      	ldr	r1, [r0, #0]
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <HAL_DMA_Init+0x60>)
 80009b6:	440b      	add	r3, r1
 80009b8:	4815      	ldr	r0, [pc, #84]	; (8000a10 <HAL_DMA_Init+0x64>)
 80009ba:	fba0 0303 	umull	r0, r3, r0, r3
 80009be:	091b      	lsrs	r3, r3, #4
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <HAL_DMA_Init+0x68>)
 80009c6:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 80009c8:	2302      	movs	r3, #2
 80009ca:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 80009ce:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80009d0:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 80009d4:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80009d8:	6853      	ldr	r3, [r2, #4]
 80009da:	6894      	ldr	r4, [r2, #8]
 80009dc:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009de:	68d4      	ldr	r4, [r2, #12]
 80009e0:	4323      	orrs	r3, r4
 80009e2:	6914      	ldr	r4, [r2, #16]
 80009e4:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009e6:	6954      	ldr	r4, [r2, #20]
 80009e8:	4323      	orrs	r3, r4
 80009ea:	6994      	ldr	r4, [r2, #24]
 80009ec:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80009ee:	69d4      	ldr	r4, [r2, #28]
 80009f0:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80009f2:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 80009f4:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009f6:	2000      	movs	r0, #0
 80009f8:	6390      	str	r0, [r2, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80009fa:	2301      	movs	r3, #1
 80009fc:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8000a00:	f882 0020 	strb.w	r0, [r2, #32]
}
 8000a04:	bc10      	pop	{r4}
 8000a06:	4770      	bx	lr
    return HAL_ERROR;
 8000a08:	2001      	movs	r0, #1
}
 8000a0a:	4770      	bx	lr
 8000a0c:	bffdfff8 	.word	0xbffdfff8
 8000a10:	cccccccd 	.word	0xcccccccd
 8000a14:	40020000 	.word	0x40020000

08000a18 <HAL_DMA_Start_IT>:
{
 8000a18:	b538      	push	{r3, r4, r5, lr}
 8000a1a:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8000a1c:	f890 0020 	ldrb.w	r0, [r0, #32]
 8000a20:	2801      	cmp	r0, #1
 8000a22:	d031      	beq.n	8000a88 <HAL_DMA_Start_IT+0x70>
 8000a24:	2001      	movs	r0, #1
 8000a26:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a2a:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 8000a2e:	2801      	cmp	r0, #1
 8000a30:	d004      	beq.n	8000a3c <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8000a32:	2300      	movs	r3, #0
 8000a34:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8000a38:	2002      	movs	r0, #2
}
 8000a3a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a42:	2000      	movs	r0, #0
 8000a44:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000a46:	6825      	ldr	r5, [r4, #0]
 8000a48:	6828      	ldr	r0, [r5, #0]
 8000a4a:	f020 0001 	bic.w	r0, r0, #1
 8000a4e:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a50:	4620      	mov	r0, r4
 8000a52:	f7ff ff95 	bl	8000980 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8000a56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a58:	b15b      	cbz	r3, 8000a72 <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a5a:	6822      	ldr	r2, [r4, #0]
 8000a5c:	6813      	ldr	r3, [r2, #0]
 8000a5e:	f043 030e 	orr.w	r3, r3, #14
 8000a62:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000a64:	6822      	ldr	r2, [r4, #0]
 8000a66:	6813      	ldr	r3, [r2, #0]
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a6e:	2000      	movs	r0, #0
 8000a70:	e7e3      	b.n	8000a3a <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a72:	6822      	ldr	r2, [r4, #0]
 8000a74:	6813      	ldr	r3, [r2, #0]
 8000a76:	f023 0304 	bic.w	r3, r3, #4
 8000a7a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000a7c:	6822      	ldr	r2, [r4, #0]
 8000a7e:	6813      	ldr	r3, [r2, #0]
 8000a80:	f043 030a 	orr.w	r3, r3, #10
 8000a84:	6013      	str	r3, [r2, #0]
 8000a86:	e7ed      	b.n	8000a64 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8000a88:	2002      	movs	r0, #2
 8000a8a:	e7d6      	b.n	8000a3a <HAL_DMA_Start_IT+0x22>

08000a8c <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a8c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d006      	beq.n	8000aa2 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a94:	2304      	movs	r3, #4
 8000a96:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000aa2:	6802      	ldr	r2, [r0, #0]
 8000aa4:	6813      	ldr	r3, [r2, #0]
 8000aa6:	f023 030e 	bic.w	r3, r3, #14
 8000aaa:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000aac:	6802      	ldr	r2, [r0, #0]
 8000aae:	6813      	ldr	r3, [r2, #0]
 8000ab0:	f023 0301 	bic.w	r3, r3, #1
 8000ab4:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ab6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000ab8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000aba:	2201      	movs	r2, #1
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8000ac2:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f880 3020 	strb.w	r3, [r0, #32]
  return status; 
 8000acc:	4618      	mov	r0, r3
}
 8000ace:	4770      	bx	lr

08000ad0 <HAL_DMA_Abort_IT>:
{  
 8000ad0:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ad2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d003      	beq.n	8000ae2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ada:	2304      	movs	r3, #4
 8000adc:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000ade:	2001      	movs	r0, #1
}
 8000ae0:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ae2:	6802      	ldr	r2, [r0, #0]
 8000ae4:	6813      	ldr	r3, [r2, #0]
 8000ae6:	f023 030e 	bic.w	r3, r3, #14
 8000aea:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000aec:	6802      	ldr	r2, [r0, #0]
 8000aee:	6813      	ldr	r3, [r2, #0]
 8000af0:	f023 0301 	bic.w	r3, r3, #1
 8000af4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000af6:	6803      	ldr	r3, [r0, #0]
 8000af8:	4a19      	ldr	r2, [pc, #100]	; (8000b60 <HAL_DMA_Abort_IT+0x90>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d014      	beq.n	8000b28 <HAL_DMA_Abort_IT+0x58>
 8000afe:	3214      	adds	r2, #20
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d01f      	beq.n	8000b44 <HAL_DMA_Abort_IT+0x74>
 8000b04:	3214      	adds	r2, #20
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d01e      	beq.n	8000b48 <HAL_DMA_Abort_IT+0x78>
 8000b0a:	3214      	adds	r2, #20
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d01e      	beq.n	8000b4e <HAL_DMA_Abort_IT+0x7e>
 8000b10:	3214      	adds	r2, #20
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d01e      	beq.n	8000b54 <HAL_DMA_Abort_IT+0x84>
 8000b16:	3214      	adds	r2, #20
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d002      	beq.n	8000b22 <HAL_DMA_Abort_IT+0x52>
 8000b1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b20:	e003      	b.n	8000b2a <HAL_DMA_Abort_IT+0x5a>
 8000b22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b26:	e000      	b.n	8000b2a <HAL_DMA_Abort_IT+0x5a>
 8000b28:	2201      	movs	r2, #1
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_DMA_Abort_IT+0x94>)
 8000b2c:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000b34:	2300      	movs	r3, #0
 8000b36:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000b3a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000b3c:	b16b      	cbz	r3, 8000b5a <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8000b3e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000b40:	2000      	movs	r0, #0
 8000b42:	e7cd      	b.n	8000ae0 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b44:	2210      	movs	r2, #16
 8000b46:	e7f0      	b.n	8000b2a <HAL_DMA_Abort_IT+0x5a>
 8000b48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b4c:	e7ed      	b.n	8000b2a <HAL_DMA_Abort_IT+0x5a>
 8000b4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b52:	e7ea      	b.n	8000b2a <HAL_DMA_Abort_IT+0x5a>
 8000b54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b58:	e7e7      	b.n	8000b2a <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	e7c0      	b.n	8000ae0 <HAL_DMA_Abort_IT+0x10>
 8000b5e:	bf00      	nop
 8000b60:	40020008 	.word	0x40020008
 8000b64:	40020000 	.word	0x40020000

08000b68 <HAL_DMA_IRQHandler>:
{
 8000b68:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b6a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000b6c:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000b6e:	6804      	ldr	r4, [r0, #0]
 8000b70:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000b72:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000b74:	2304      	movs	r3, #4
 8000b76:	408b      	lsls	r3, r1
 8000b78:	4213      	tst	r3, r2
 8000b7a:	d035      	beq.n	8000be8 <HAL_DMA_IRQHandler+0x80>
 8000b7c:	f015 0f04 	tst.w	r5, #4
 8000b80:	d032      	beq.n	8000be8 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b82:	6823      	ldr	r3, [r4, #0]
 8000b84:	f013 0f20 	tst.w	r3, #32
 8000b88:	d103      	bne.n	8000b92 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b8a:	6823      	ldr	r3, [r4, #0]
 8000b8c:	f023 0304 	bic.w	r3, r3, #4
 8000b90:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000b92:	6803      	ldr	r3, [r0, #0]
 8000b94:	4a43      	ldr	r2, [pc, #268]	; (8000ca4 <HAL_DMA_IRQHandler+0x13c>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d014      	beq.n	8000bc4 <HAL_DMA_IRQHandler+0x5c>
 8000b9a:	3214      	adds	r2, #20
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d018      	beq.n	8000bd2 <HAL_DMA_IRQHandler+0x6a>
 8000ba0:	3214      	adds	r2, #20
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d017      	beq.n	8000bd6 <HAL_DMA_IRQHandler+0x6e>
 8000ba6:	3214      	adds	r2, #20
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d017      	beq.n	8000bdc <HAL_DMA_IRQHandler+0x74>
 8000bac:	3214      	adds	r2, #20
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d017      	beq.n	8000be2 <HAL_DMA_IRQHandler+0x7a>
 8000bb2:	3214      	adds	r2, #20
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d002      	beq.n	8000bbe <HAL_DMA_IRQHandler+0x56>
 8000bb8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000bbc:	e003      	b.n	8000bc6 <HAL_DMA_IRQHandler+0x5e>
 8000bbe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bc2:	e000      	b.n	8000bc6 <HAL_DMA_IRQHandler+0x5e>
 8000bc4:	2204      	movs	r2, #4
 8000bc6:	4b38      	ldr	r3, [pc, #224]	; (8000ca8 <HAL_DMA_IRQHandler+0x140>)
 8000bc8:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000bca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000bcc:	b103      	cbz	r3, 8000bd0 <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 8000bce:	4798      	blx	r3
}
 8000bd0:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000bd2:	2240      	movs	r2, #64	; 0x40
 8000bd4:	e7f7      	b.n	8000bc6 <HAL_DMA_IRQHandler+0x5e>
 8000bd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bda:	e7f4      	b.n	8000bc6 <HAL_DMA_IRQHandler+0x5e>
 8000bdc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000be0:	e7f1      	b.n	8000bc6 <HAL_DMA_IRQHandler+0x5e>
 8000be2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000be6:	e7ee      	b.n	8000bc6 <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000be8:	2302      	movs	r3, #2
 8000bea:	408b      	lsls	r3, r1
 8000bec:	4213      	tst	r3, r2
 8000bee:	d03c      	beq.n	8000c6a <HAL_DMA_IRQHandler+0x102>
 8000bf0:	f015 0f02 	tst.w	r5, #2
 8000bf4:	d039      	beq.n	8000c6a <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bf6:	6823      	ldr	r3, [r4, #0]
 8000bf8:	f013 0f20 	tst.w	r3, #32
 8000bfc:	d106      	bne.n	8000c0c <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000bfe:	6823      	ldr	r3, [r4, #0]
 8000c00:	f023 030a 	bic.w	r3, r3, #10
 8000c04:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000c06:	2301      	movs	r3, #1
 8000c08:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000c0c:	6803      	ldr	r3, [r0, #0]
 8000c0e:	4a25      	ldr	r2, [pc, #148]	; (8000ca4 <HAL_DMA_IRQHandler+0x13c>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d014      	beq.n	8000c3e <HAL_DMA_IRQHandler+0xd6>
 8000c14:	3214      	adds	r2, #20
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d01c      	beq.n	8000c54 <HAL_DMA_IRQHandler+0xec>
 8000c1a:	3214      	adds	r2, #20
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d01b      	beq.n	8000c58 <HAL_DMA_IRQHandler+0xf0>
 8000c20:	3214      	adds	r2, #20
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d01b      	beq.n	8000c5e <HAL_DMA_IRQHandler+0xf6>
 8000c26:	3214      	adds	r2, #20
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d01b      	beq.n	8000c64 <HAL_DMA_IRQHandler+0xfc>
 8000c2c:	3214      	adds	r2, #20
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d002      	beq.n	8000c38 <HAL_DMA_IRQHandler+0xd0>
 8000c32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c36:	e003      	b.n	8000c40 <HAL_DMA_IRQHandler+0xd8>
 8000c38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c3c:	e000      	b.n	8000c40 <HAL_DMA_IRQHandler+0xd8>
 8000c3e:	2202      	movs	r2, #2
 8000c40:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <HAL_DMA_IRQHandler+0x140>)
 8000c42:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8000c44:	2300      	movs	r3, #0
 8000c46:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000c4a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d0bf      	beq.n	8000bd0 <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 8000c50:	4798      	blx	r3
 8000c52:	e7bd      	b.n	8000bd0 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000c54:	2220      	movs	r2, #32
 8000c56:	e7f3      	b.n	8000c40 <HAL_DMA_IRQHandler+0xd8>
 8000c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5c:	e7f0      	b.n	8000c40 <HAL_DMA_IRQHandler+0xd8>
 8000c5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c62:	e7ed      	b.n	8000c40 <HAL_DMA_IRQHandler+0xd8>
 8000c64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c68:	e7ea      	b.n	8000c40 <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000c6a:	2308      	movs	r3, #8
 8000c6c:	fa03 f101 	lsl.w	r1, r3, r1
 8000c70:	4211      	tst	r1, r2
 8000c72:	d0ad      	beq.n	8000bd0 <HAL_DMA_IRQHandler+0x68>
 8000c74:	f015 0f08 	tst.w	r5, #8
 8000c78:	d0aa      	beq.n	8000bd0 <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c7a:	6823      	ldr	r3, [r4, #0]
 8000c7c:	f023 030e 	bic.w	r3, r3, #14
 8000c80:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c82:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000c84:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000c86:	2301      	movs	r3, #1
 8000c88:	fa03 f202 	lsl.w	r2, r3, r2
 8000c8c:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000c8e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000c90:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000c94:	2300      	movs	r3, #0
 8000c96:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000c9a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d097      	beq.n	8000bd0 <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 8000ca0:	4798      	blx	r3
  return;
 8000ca2:	e795      	b.n	8000bd0 <HAL_DMA_IRQHandler+0x68>
 8000ca4:	40020008 	.word	0x40020008
 8000ca8:	40020000 	.word	0x40020000

08000cac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cac:	b570      	push	{r4, r5, r6, lr}
 8000cae:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cb0:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000cb2:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb4:	e0a6      	b.n	8000e04 <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cb6:	4d80      	ldr	r5, [pc, #512]	; (8000eb8 <HAL_GPIO_Init+0x20c>)
 8000cb8:	42aa      	cmp	r2, r5
 8000cba:	d010      	beq.n	8000cde <HAL_GPIO_Init+0x32>
 8000cbc:	d907      	bls.n	8000cce <HAL_GPIO_Init+0x22>
 8000cbe:	4d7f      	ldr	r5, [pc, #508]	; (8000ebc <HAL_GPIO_Init+0x210>)
 8000cc0:	42aa      	cmp	r2, r5
 8000cc2:	d00c      	beq.n	8000cde <HAL_GPIO_Init+0x32>
 8000cc4:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8000cc8:	42aa      	cmp	r2, r5
 8000cca:	d008      	beq.n	8000cde <HAL_GPIO_Init+0x32>
 8000ccc:	e013      	b.n	8000cf6 <HAL_GPIO_Init+0x4a>
 8000cce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8000cd2:	42aa      	cmp	r2, r5
 8000cd4:	d003      	beq.n	8000cde <HAL_GPIO_Init+0x32>
 8000cd6:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 8000cda:	42aa      	cmp	r2, r5
 8000cdc:	d107      	bne.n	8000cee <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cde:	688a      	ldr	r2, [r1, #8]
 8000ce0:	2a00      	cmp	r2, #0
 8000ce2:	d058      	beq.n	8000d96 <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ce4:	2a01      	cmp	r2, #1
 8000ce6:	d051      	beq.n	8000d8c <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000ce8:	6143      	str	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cea:	2408      	movs	r4, #8
 8000cec:	e003      	b.n	8000cf6 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000cee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8000cf2:	42aa      	cmp	r2, r5
 8000cf4:	d0f3      	beq.n	8000cde <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cf6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8000cfa:	d84e      	bhi.n	8000d9a <HAL_GPIO_Init+0xee>
 8000cfc:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cfe:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8000d02:	d84c      	bhi.n	8000d9e <HAL_GPIO_Init+0xf2>
 8000d04:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d08:	6833      	ldr	r3, [r6, #0]
 8000d0a:	250f      	movs	r5, #15
 8000d0c:	4095      	lsls	r5, r2
 8000d0e:	ea23 0305 	bic.w	r3, r3, r5
 8000d12:	fa04 f202 	lsl.w	r2, r4, r2
 8000d16:	4313      	orrs	r3, r2
 8000d18:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d1a:	684b      	ldr	r3, [r1, #4]
 8000d1c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000d20:	d06e      	beq.n	8000e00 <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d22:	4b67      	ldr	r3, [pc, #412]	; (8000ec0 <HAL_GPIO_Init+0x214>)
 8000d24:	699a      	ldr	r2, [r3, #24]
 8000d26:	f042 0201 	orr.w	r2, r2, #1
 8000d2a:	619a      	str	r2, [r3, #24]
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000d36:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8000d3a:	1c95      	adds	r5, r2, #2
 8000d3c:	4b61      	ldr	r3, [pc, #388]	; (8000ec4 <HAL_GPIO_Init+0x218>)
 8000d3e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d42:	f00c 0303 	and.w	r3, ip, #3
 8000d46:	009d      	lsls	r5, r3, #2
 8000d48:	230f      	movs	r3, #15
 8000d4a:	40ab      	lsls	r3, r5
 8000d4c:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d50:	4b5d      	ldr	r3, [pc, #372]	; (8000ec8 <HAL_GPIO_Init+0x21c>)
 8000d52:	4298      	cmp	r0, r3
 8000d54:	d029      	beq.n	8000daa <HAL_GPIO_Init+0xfe>
 8000d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d5a:	4298      	cmp	r0, r3
 8000d5c:	f000 808e 	beq.w	8000e7c <HAL_GPIO_Init+0x1d0>
 8000d60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d64:	4298      	cmp	r0, r3
 8000d66:	f000 808b 	beq.w	8000e80 <HAL_GPIO_Init+0x1d4>
 8000d6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d6e:	4298      	cmp	r0, r3
 8000d70:	d019      	beq.n	8000da6 <HAL_GPIO_Init+0xfa>
 8000d72:	2304      	movs	r3, #4
 8000d74:	e01a      	b.n	8000dac <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d76:	68cc      	ldr	r4, [r1, #12]
          break;
 8000d78:	e7bd      	b.n	8000cf6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d7a:	68cc      	ldr	r4, [r1, #12]
 8000d7c:	3404      	adds	r4, #4
          break;
 8000d7e:	e7ba      	b.n	8000cf6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d80:	68cc      	ldr	r4, [r1, #12]
 8000d82:	3408      	adds	r4, #8
          break;
 8000d84:	e7b7      	b.n	8000cf6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d86:	68cc      	ldr	r4, [r1, #12]
 8000d88:	340c      	adds	r4, #12
          break;
 8000d8a:	e7b4      	b.n	8000cf6 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8000d8c:	6103      	str	r3, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d8e:	2408      	movs	r4, #8
 8000d90:	e7b1      	b.n	8000cf6 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d92:	2400      	movs	r4, #0
 8000d94:	e7af      	b.n	8000cf6 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d96:	2404      	movs	r4, #4
 8000d98:	e7ad      	b.n	8000cf6 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d9a:	1d06      	adds	r6, r0, #4
 8000d9c:	e7af      	b.n	8000cfe <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d9e:	f1ac 0208 	sub.w	r2, ip, #8
 8000da2:	0092      	lsls	r2, r2, #2
 8000da4:	e7b0      	b.n	8000d08 <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000da6:	2303      	movs	r3, #3
 8000da8:	e000      	b.n	8000dac <HAL_GPIO_Init+0x100>
 8000daa:	2300      	movs	r3, #0
 8000dac:	40ab      	lsls	r3, r5
 8000dae:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8000db0:	3202      	adds	r2, #2
 8000db2:	4d44      	ldr	r5, [pc, #272]	; (8000ec4 <HAL_GPIO_Init+0x218>)
 8000db4:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000db8:	684b      	ldr	r3, [r1, #4]
 8000dba:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000dbe:	d061      	beq.n	8000e84 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dc0:	4a42      	ldr	r2, [pc, #264]	; (8000ecc <HAL_GPIO_Init+0x220>)
 8000dc2:	6813      	ldr	r3, [r2, #0]
 8000dc4:	ea43 030e 	orr.w	r3, r3, lr
 8000dc8:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dca:	684b      	ldr	r3, [r1, #4]
 8000dcc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000dd0:	d05e      	beq.n	8000e90 <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dd2:	4a3e      	ldr	r2, [pc, #248]	; (8000ecc <HAL_GPIO_Init+0x220>)
 8000dd4:	6853      	ldr	r3, [r2, #4]
 8000dd6:	ea43 030e 	orr.w	r3, r3, lr
 8000dda:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ddc:	684b      	ldr	r3, [r1, #4]
 8000dde:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000de2:	d05b      	beq.n	8000e9c <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000de4:	4a39      	ldr	r2, [pc, #228]	; (8000ecc <HAL_GPIO_Init+0x220>)
 8000de6:	6893      	ldr	r3, [r2, #8]
 8000de8:	ea43 030e 	orr.w	r3, r3, lr
 8000dec:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dee:	684b      	ldr	r3, [r1, #4]
 8000df0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8000df4:	d058      	beq.n	8000ea8 <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000df6:	4a35      	ldr	r2, [pc, #212]	; (8000ecc <HAL_GPIO_Init+0x220>)
 8000df8:	68d3      	ldr	r3, [r2, #12]
 8000dfa:	ea43 030e 	orr.w	r3, r3, lr
 8000dfe:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8000e00:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e04:	680a      	ldr	r2, [r1, #0]
 8000e06:	fa32 f30c 	lsrs.w	r3, r2, ip
 8000e0a:	d053      	beq.n	8000eb4 <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	fa03 f30c 	lsl.w	r3, r3, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e12:	ea02 0e03 	and.w	lr, r2, r3
    if (iocurrent == ioposition)
 8000e16:	ea33 0202 	bics.w	r2, r3, r2
 8000e1a:	d1f1      	bne.n	8000e00 <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 8000e1c:	684a      	ldr	r2, [r1, #4]
 8000e1e:	2a12      	cmp	r2, #18
 8000e20:	f63f af49 	bhi.w	8000cb6 <HAL_GPIO_Init+0xa>
 8000e24:	2a12      	cmp	r2, #18
 8000e26:	f63f af66 	bhi.w	8000cf6 <HAL_GPIO_Init+0x4a>
 8000e2a:	a501      	add	r5, pc, #4	; (adr r5, 8000e30 <HAL_GPIO_Init+0x184>)
 8000e2c:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8000e30:	08000cdf 	.word	0x08000cdf
 8000e34:	08000d77 	.word	0x08000d77
 8000e38:	08000d81 	.word	0x08000d81
 8000e3c:	08000d93 	.word	0x08000d93
 8000e40:	08000cf7 	.word	0x08000cf7
 8000e44:	08000cf7 	.word	0x08000cf7
 8000e48:	08000cf7 	.word	0x08000cf7
 8000e4c:	08000cf7 	.word	0x08000cf7
 8000e50:	08000cf7 	.word	0x08000cf7
 8000e54:	08000cf7 	.word	0x08000cf7
 8000e58:	08000cf7 	.word	0x08000cf7
 8000e5c:	08000cf7 	.word	0x08000cf7
 8000e60:	08000cf7 	.word	0x08000cf7
 8000e64:	08000cf7 	.word	0x08000cf7
 8000e68:	08000cf7 	.word	0x08000cf7
 8000e6c:	08000cf7 	.word	0x08000cf7
 8000e70:	08000cf7 	.word	0x08000cf7
 8000e74:	08000d7b 	.word	0x08000d7b
 8000e78:	08000d87 	.word	0x08000d87
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e795      	b.n	8000dac <HAL_GPIO_Init+0x100>
 8000e80:	2302      	movs	r3, #2
 8000e82:	e793      	b.n	8000dac <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e84:	4a11      	ldr	r2, [pc, #68]	; (8000ecc <HAL_GPIO_Init+0x220>)
 8000e86:	6813      	ldr	r3, [r2, #0]
 8000e88:	ea23 030e 	bic.w	r3, r3, lr
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	e79c      	b.n	8000dca <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e90:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <HAL_GPIO_Init+0x220>)
 8000e92:	6853      	ldr	r3, [r2, #4]
 8000e94:	ea23 030e 	bic.w	r3, r3, lr
 8000e98:	6053      	str	r3, [r2, #4]
 8000e9a:	e79f      	b.n	8000ddc <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e9c:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <HAL_GPIO_Init+0x220>)
 8000e9e:	6893      	ldr	r3, [r2, #8]
 8000ea0:	ea23 030e 	bic.w	r3, r3, lr
 8000ea4:	6093      	str	r3, [r2, #8]
 8000ea6:	e7a2      	b.n	8000dee <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ea8:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <HAL_GPIO_Init+0x220>)
 8000eaa:	68d3      	ldr	r3, [r2, #12]
 8000eac:	ea23 030e 	bic.w	r3, r3, lr
 8000eb0:	60d3      	str	r3, [r2, #12]
 8000eb2:	e7a5      	b.n	8000e00 <HAL_GPIO_Init+0x154>
  }
}
 8000eb4:	b002      	add	sp, #8
 8000eb6:	bd70      	pop	{r4, r5, r6, pc}
 8000eb8:	10220000 	.word	0x10220000
 8000ebc:	10310000 	.word	0x10310000
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40010000 	.word	0x40010000
 8000ec8:	40010800 	.word	0x40010800
 8000ecc:	40010400 	.word	0x40010400

08000ed0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ed0:	6883      	ldr	r3, [r0, #8]
 8000ed2:	4219      	tst	r1, r3
 8000ed4:	d001      	beq.n	8000eda <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000eda:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000edc:	4770      	bx	lr

08000ede <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ede:	b10a      	cbz	r2, 8000ee4 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ee0:	6101      	str	r1, [r0, #16]
 8000ee2:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ee4:	0409      	lsls	r1, r1, #16
 8000ee6:	6101      	str	r1, [r0, #16]
  }
}
 8000ee8:	4770      	bx	lr

08000eea <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000eea:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000eec:	ea01 0203 	and.w	r2, r1, r3
 8000ef0:	ea21 0103 	bic.w	r1, r1, r3
 8000ef4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000ef8:	6101      	str	r1, [r0, #16]
}
 8000efa:	4770      	bx	lr

08000efc <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8000efc:	b340      	cbz	r0, 8000f50 <HAL_IWDG_Init+0x54>
{
 8000efe:	b538      	push	{r3, r4, r5, lr}
 8000f00:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8000f02:	6803      	ldr	r3, [r0, #0]
 8000f04:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8000f08:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8000f0a:	6803      	ldr	r3, [r0, #0]
 8000f0c:	f245 5255 	movw	r2, #21845	; 0x5555
 8000f10:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8000f12:	6803      	ldr	r3, [r0, #0]
 8000f14:	6842      	ldr	r2, [r0, #4]
 8000f16:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8000f18:	6803      	ldr	r3, [r0, #0]
 8000f1a:	6882      	ldr	r2, [r0, #8]
 8000f1c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8000f1e:	f7ff f95f 	bl	80001e0 <HAL_GetTick>
 8000f22:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000f24:	6823      	ldr	r3, [r4, #0]
 8000f26:	68da      	ldr	r2, [r3, #12]
 8000f28:	f012 0f03 	tst.w	r2, #3
 8000f2c:	d00b      	beq.n	8000f46 <HAL_IWDG_Init+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8000f2e:	f7ff f957 	bl	80001e0 <HAL_GetTick>
 8000f32:	1b40      	subs	r0, r0, r5
 8000f34:	2827      	cmp	r0, #39	; 0x27
 8000f36:	d9f5      	bls.n	8000f24 <HAL_IWDG_Init+0x28>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000f38:	6823      	ldr	r3, [r4, #0]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	f013 0f03 	tst.w	r3, #3
 8000f40:	d0f0      	beq.n	8000f24 <HAL_IWDG_Init+0x28>
      {
        return HAL_TIMEOUT;
 8000f42:	2003      	movs	r0, #3
 8000f44:	e003      	b.n	8000f4e <HAL_IWDG_Init+0x52>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000f46:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000f4a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8000f4c:	2000      	movs	r0, #0
}
 8000f4e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000f50:	2001      	movs	r0, #1
}
 8000f52:	4770      	bx	lr

08000f54 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000f54:	6803      	ldr	r3, [r0, #0]
 8000f56:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000f5a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	4770      	bx	lr

08000f60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f60:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <RCC_Delay+0x24>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <RCC_Delay+0x28>)
 8000f68:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6c:	0a5b      	lsrs	r3, r3, #9
 8000f6e:	fb00 f303 	mul.w	r3, r0, r3
 8000f72:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000f74:	bf00      	nop
  }
  while (Delay --);
 8000f76:	9b01      	ldr	r3, [sp, #4]
 8000f78:	1e5a      	subs	r2, r3, #1
 8000f7a:	9201      	str	r2, [sp, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1f9      	bne.n	8000f74 <RCC_Delay+0x14>
}
 8000f80:	b002      	add	sp, #8
 8000f82:	4770      	bx	lr
 8000f84:	2000002c 	.word	0x2000002c
 8000f88:	10624dd3 	.word	0x10624dd3

08000f8c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8000f8c:	2800      	cmp	r0, #0
 8000f8e:	f000 81f1 	beq.w	8001374 <HAL_RCC_OscConfig+0x3e8>
{
 8000f92:	b570      	push	{r4, r5, r6, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f98:	6803      	ldr	r3, [r0, #0]
 8000f9a:	f013 0f01 	tst.w	r3, #1
 8000f9e:	d02c      	beq.n	8000ffa <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fa0:	4b99      	ldr	r3, [pc, #612]	; (8001208 <HAL_RCC_OscConfig+0x27c>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 030c 	and.w	r3, r3, #12
 8000fa8:	2b04      	cmp	r3, #4
 8000faa:	d01d      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fac:	4b96      	ldr	r3, [pc, #600]	; (8001208 <HAL_RCC_OscConfig+0x27c>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 030c 	and.w	r3, r3, #12
 8000fb4:	2b08      	cmp	r3, #8
 8000fb6:	d012      	beq.n	8000fde <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb8:	6863      	ldr	r3, [r4, #4]
 8000fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fbe:	d041      	beq.n	8001044 <HAL_RCC_OscConfig+0xb8>
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d155      	bne.n	8001070 <HAL_RCC_OscConfig+0xe4>
 8000fc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fc8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	e037      	b.n	800104e <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fde:	4b8a      	ldr	r3, [pc, #552]	; (8001208 <HAL_RCC_OscConfig+0x27c>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000fe6:	d0e7      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe8:	4b87      	ldr	r3, [pc, #540]	; (8001208 <HAL_RCC_OscConfig+0x27c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ff0:	d003      	beq.n	8000ffa <HAL_RCC_OscConfig+0x6e>
 8000ff2:	6863      	ldr	r3, [r4, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f000 81bf 	beq.w	8001378 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	f013 0f02 	tst.w	r3, #2
 8001000:	d075      	beq.n	80010ee <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001002:	4b81      	ldr	r3, [pc, #516]	; (8001208 <HAL_RCC_OscConfig+0x27c>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f013 0f0c 	tst.w	r3, #12
 800100a:	d05f      	beq.n	80010cc <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800100c:	4b7e      	ldr	r3, [pc, #504]	; (8001208 <HAL_RCC_OscConfig+0x27c>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 030c 	and.w	r3, r3, #12
 8001014:	2b08      	cmp	r3, #8
 8001016:	d054      	beq.n	80010c2 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001018:	6923      	ldr	r3, [r4, #16]
 800101a:	2b00      	cmp	r3, #0
 800101c:	f000 808a 	beq.w	8001134 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8001020:	4b7a      	ldr	r3, [pc, #488]	; (800120c <HAL_RCC_OscConfig+0x280>)
 8001022:	2201      	movs	r2, #1
 8001024:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001026:	f7ff f8db 	bl	80001e0 <HAL_GetTick>
 800102a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102c:	4b76      	ldr	r3, [pc, #472]	; (8001208 <HAL_RCC_OscConfig+0x27c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f013 0f02 	tst.w	r3, #2
 8001034:	d175      	bne.n	8001122 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001036:	f7ff f8d3 	bl	80001e0 <HAL_GetTick>
 800103a:	1b40      	subs	r0, r0, r5
 800103c:	2802      	cmp	r0, #2
 800103e:	d9f5      	bls.n	800102c <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8001040:	2003      	movs	r0, #3
 8001042:	e19e      	b.n	8001382 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001044:	4a70      	ldr	r2, [pc, #448]	; (8001208 <HAL_RCC_OscConfig+0x27c>)
 8001046:	6813      	ldr	r3, [r2, #0]
 8001048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800104e:	6863      	ldr	r3, [r4, #4]
 8001050:	b343      	cbz	r3, 80010a4 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8001052:	f7ff f8c5 	bl	80001e0 <HAL_GetTick>
 8001056:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001058:	4b6b      	ldr	r3, [pc, #428]	; (8001208 <HAL_RCC_OscConfig+0x27c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001060:	d1cb      	bne.n	8000ffa <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001062:	f7ff f8bd 	bl	80001e0 <HAL_GetTick>
 8001066:	1b40      	subs	r0, r0, r5
 8001068:	2864      	cmp	r0, #100	; 0x64
 800106a:	d9f5      	bls.n	8001058 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 800106c:	2003      	movs	r0, #3
 800106e:	e188      	b.n	8001382 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001074:	d009      	beq.n	800108a <HAL_RCC_OscConfig+0xfe>
 8001076:	4b64      	ldr	r3, [pc, #400]	; (8001208 <HAL_RCC_OscConfig+0x27c>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	e7e1      	b.n	800104e <HAL_RCC_OscConfig+0xc2>
 800108a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800108e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	e7d4      	b.n	800104e <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80010a4:	f7ff f89c 	bl	80001e0 <HAL_GetTick>
 80010a8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010aa:	4b57      	ldr	r3, [pc, #348]	; (8001208 <HAL_RCC_OscConfig+0x27c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80010b2:	d0a2      	beq.n	8000ffa <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010b4:	f7ff f894 	bl	80001e0 <HAL_GetTick>
 80010b8:	1b40      	subs	r0, r0, r5
 80010ba:	2864      	cmp	r0, #100	; 0x64
 80010bc:	d9f5      	bls.n	80010aa <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80010be:	2003      	movs	r0, #3
 80010c0:	e15f      	b.n	8001382 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010c2:	4b51      	ldr	r3, [pc, #324]	; (8001208 <HAL_RCC_OscConfig+0x27c>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80010ca:	d1a5      	bne.n	8001018 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010cc:	4b4e      	ldr	r3, [pc, #312]	; (8001208 <HAL_RCC_OscConfig+0x27c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f013 0f02 	tst.w	r3, #2
 80010d4:	d003      	beq.n	80010de <HAL_RCC_OscConfig+0x152>
 80010d6:	6923      	ldr	r3, [r4, #16]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	f040 814f 	bne.w	800137c <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010de:	4a4a      	ldr	r2, [pc, #296]	; (8001208 <HAL_RCC_OscConfig+0x27c>)
 80010e0:	6813      	ldr	r3, [r2, #0]
 80010e2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80010e6:	6961      	ldr	r1, [r4, #20]
 80010e8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80010ec:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ee:	6823      	ldr	r3, [r4, #0]
 80010f0:	f013 0f08 	tst.w	r3, #8
 80010f4:	d033      	beq.n	800115e <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010f6:	69a3      	ldr	r3, [r4, #24]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d05c      	beq.n	80011b6 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 80010fc:	4b43      	ldr	r3, [pc, #268]	; (800120c <HAL_RCC_OscConfig+0x280>)
 80010fe:	2201      	movs	r2, #1
 8001100:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001104:	f7ff f86c 	bl	80001e0 <HAL_GetTick>
 8001108:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800110a:	4b3f      	ldr	r3, [pc, #252]	; (8001208 <HAL_RCC_OscConfig+0x27c>)
 800110c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110e:	f013 0f02 	tst.w	r3, #2
 8001112:	d121      	bne.n	8001158 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001114:	f7ff f864 	bl	80001e0 <HAL_GetTick>
 8001118:	1b40      	subs	r0, r0, r5
 800111a:	2802      	cmp	r0, #2
 800111c:	d9f5      	bls.n	800110a <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 800111e:	2003      	movs	r0, #3
 8001120:	e12f      	b.n	8001382 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001122:	4a39      	ldr	r2, [pc, #228]	; (8001208 <HAL_RCC_OscConfig+0x27c>)
 8001124:	6813      	ldr	r3, [r2, #0]
 8001126:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800112a:	6961      	ldr	r1, [r4, #20]
 800112c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	e7dc      	b.n	80010ee <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8001134:	4b35      	ldr	r3, [pc, #212]	; (800120c <HAL_RCC_OscConfig+0x280>)
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800113a:	f7ff f851 	bl	80001e0 <HAL_GetTick>
 800113e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001140:	4b31      	ldr	r3, [pc, #196]	; (8001208 <HAL_RCC_OscConfig+0x27c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f013 0f02 	tst.w	r3, #2
 8001148:	d0d1      	beq.n	80010ee <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800114a:	f7ff f849 	bl	80001e0 <HAL_GetTick>
 800114e:	1b40      	subs	r0, r0, r5
 8001150:	2802      	cmp	r0, #2
 8001152:	d9f5      	bls.n	8001140 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8001154:	2003      	movs	r0, #3
 8001156:	e114      	b.n	8001382 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8001158:	2001      	movs	r0, #1
 800115a:	f7ff ff01 	bl	8000f60 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800115e:	6823      	ldr	r3, [r4, #0]
 8001160:	f013 0f04 	tst.w	r3, #4
 8001164:	f000 8096 	beq.w	8001294 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001168:	4b27      	ldr	r3, [pc, #156]	; (8001208 <HAL_RCC_OscConfig+0x27c>)
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001170:	d134      	bne.n	80011dc <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001172:	4b25      	ldr	r3, [pc, #148]	; (8001208 <HAL_RCC_OscConfig+0x27c>)
 8001174:	69da      	ldr	r2, [r3, #28]
 8001176:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800117a:	61da      	str	r2, [r3, #28]
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001186:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <HAL_RCC_OscConfig+0x284>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001190:	d026      	beq.n	80011e0 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001192:	68e3      	ldr	r3, [r4, #12]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d03d      	beq.n	8001214 <HAL_RCC_OscConfig+0x288>
 8001198:	2b00      	cmp	r3, #0
 800119a:	d153      	bne.n	8001244 <HAL_RCC_OscConfig+0x2b8>
 800119c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011a0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80011a4:	6a1a      	ldr	r2, [r3, #32]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	621a      	str	r2, [r3, #32]
 80011ac:	6a1a      	ldr	r2, [r3, #32]
 80011ae:	f022 0204 	bic.w	r2, r2, #4
 80011b2:	621a      	str	r2, [r3, #32]
 80011b4:	e033      	b.n	800121e <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_RCC_OscConfig+0x280>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80011be:	f7ff f80f 	bl	80001e0 <HAL_GetTick>
 80011c2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HAL_RCC_OscConfig+0x27c>)
 80011c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c8:	f013 0f02 	tst.w	r3, #2
 80011cc:	d0c7      	beq.n	800115e <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ce:	f7ff f807 	bl	80001e0 <HAL_GetTick>
 80011d2:	1b40      	subs	r0, r0, r5
 80011d4:	2802      	cmp	r0, #2
 80011d6:	d9f5      	bls.n	80011c4 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 80011d8:	2003      	movs	r0, #3
 80011da:	e0d2      	b.n	8001382 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80011dc:	2500      	movs	r5, #0
 80011de:	e7d3      	b.n	8001188 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011e0:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <HAL_RCC_OscConfig+0x284>)
 80011e2:	6813      	ldr	r3, [r2, #0]
 80011e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80011ea:	f7fe fff9 	bl	80001e0 <HAL_GetTick>
 80011ee:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <HAL_RCC_OscConfig+0x284>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80011f8:	d1cb      	bne.n	8001192 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011fa:	f7fe fff1 	bl	80001e0 <HAL_GetTick>
 80011fe:	1b80      	subs	r0, r0, r6
 8001200:	2864      	cmp	r0, #100	; 0x64
 8001202:	d9f5      	bls.n	80011f0 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8001204:	2003      	movs	r0, #3
 8001206:	e0bc      	b.n	8001382 <HAL_RCC_OscConfig+0x3f6>
 8001208:	40021000 	.word	0x40021000
 800120c:	42420000 	.word	0x42420000
 8001210:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001214:	4a5f      	ldr	r2, [pc, #380]	; (8001394 <HAL_RCC_OscConfig+0x408>)
 8001216:	6a13      	ldr	r3, [r2, #32]
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800121e:	68e3      	ldr	r3, [r4, #12]
 8001220:	b333      	cbz	r3, 8001270 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8001222:	f7fe ffdd 	bl	80001e0 <HAL_GetTick>
 8001226:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001228:	4b5a      	ldr	r3, [pc, #360]	; (8001394 <HAL_RCC_OscConfig+0x408>)
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	f013 0f02 	tst.w	r3, #2
 8001230:	d12f      	bne.n	8001292 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001232:	f7fe ffd5 	bl	80001e0 <HAL_GetTick>
 8001236:	1b80      	subs	r0, r0, r6
 8001238:	f241 3388 	movw	r3, #5000	; 0x1388
 800123c:	4298      	cmp	r0, r3
 800123e:	d9f3      	bls.n	8001228 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8001240:	2003      	movs	r0, #3
 8001242:	e09e      	b.n	8001382 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001244:	2b05      	cmp	r3, #5
 8001246:	d009      	beq.n	800125c <HAL_RCC_OscConfig+0x2d0>
 8001248:	4b52      	ldr	r3, [pc, #328]	; (8001394 <HAL_RCC_OscConfig+0x408>)
 800124a:	6a1a      	ldr	r2, [r3, #32]
 800124c:	f022 0201 	bic.w	r2, r2, #1
 8001250:	621a      	str	r2, [r3, #32]
 8001252:	6a1a      	ldr	r2, [r3, #32]
 8001254:	f022 0204 	bic.w	r2, r2, #4
 8001258:	621a      	str	r2, [r3, #32]
 800125a:	e7e0      	b.n	800121e <HAL_RCC_OscConfig+0x292>
 800125c:	4b4d      	ldr	r3, [pc, #308]	; (8001394 <HAL_RCC_OscConfig+0x408>)
 800125e:	6a1a      	ldr	r2, [r3, #32]
 8001260:	f042 0204 	orr.w	r2, r2, #4
 8001264:	621a      	str	r2, [r3, #32]
 8001266:	6a1a      	ldr	r2, [r3, #32]
 8001268:	f042 0201 	orr.w	r2, r2, #1
 800126c:	621a      	str	r2, [r3, #32]
 800126e:	e7d6      	b.n	800121e <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8001270:	f7fe ffb6 	bl	80001e0 <HAL_GetTick>
 8001274:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001276:	4b47      	ldr	r3, [pc, #284]	; (8001394 <HAL_RCC_OscConfig+0x408>)
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	f013 0f02 	tst.w	r3, #2
 800127e:	d008      	beq.n	8001292 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001280:	f7fe ffae 	bl	80001e0 <HAL_GetTick>
 8001284:	1b80      	subs	r0, r0, r6
 8001286:	f241 3388 	movw	r3, #5000	; 0x1388
 800128a:	4298      	cmp	r0, r3
 800128c:	d9f3      	bls.n	8001276 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 800128e:	2003      	movs	r0, #3
 8001290:	e077      	b.n	8001382 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8001292:	b9e5      	cbnz	r5, 80012ce <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001294:	69e3      	ldr	r3, [r4, #28]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d072      	beq.n	8001380 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800129a:	4a3e      	ldr	r2, [pc, #248]	; (8001394 <HAL_RCC_OscConfig+0x408>)
 800129c:	6852      	ldr	r2, [r2, #4]
 800129e:	f002 020c 	and.w	r2, r2, #12
 80012a2:	2a08      	cmp	r2, #8
 80012a4:	d056      	beq.n	8001354 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d017      	beq.n	80012da <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80012aa:	4b3b      	ldr	r3, [pc, #236]	; (8001398 <HAL_RCC_OscConfig+0x40c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80012b0:	f7fe ff96 	bl	80001e0 <HAL_GetTick>
 80012b4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b6:	4b37      	ldr	r3, [pc, #220]	; (8001394 <HAL_RCC_OscConfig+0x408>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012be:	d047      	beq.n	8001350 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c0:	f7fe ff8e 	bl	80001e0 <HAL_GetTick>
 80012c4:	1b00      	subs	r0, r0, r4
 80012c6:	2802      	cmp	r0, #2
 80012c8:	d9f5      	bls.n	80012b6 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80012ca:	2003      	movs	r0, #3
 80012cc:	e059      	b.n	8001382 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ce:	4a31      	ldr	r2, [pc, #196]	; (8001394 <HAL_RCC_OscConfig+0x408>)
 80012d0:	69d3      	ldr	r3, [r2, #28]
 80012d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d6:	61d3      	str	r3, [r2, #28]
 80012d8:	e7dc      	b.n	8001294 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80012da:	4b2f      	ldr	r3, [pc, #188]	; (8001398 <HAL_RCC_OscConfig+0x40c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80012e0:	f7fe ff7e 	bl	80001e0 <HAL_GetTick>
 80012e4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e6:	4b2b      	ldr	r3, [pc, #172]	; (8001394 <HAL_RCC_OscConfig+0x408>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012ee:	d006      	beq.n	80012fe <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f0:	f7fe ff76 	bl	80001e0 <HAL_GetTick>
 80012f4:	1b40      	subs	r0, r0, r5
 80012f6:	2802      	cmp	r0, #2
 80012f8:	d9f5      	bls.n	80012e6 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80012fa:	2003      	movs	r0, #3
 80012fc:	e041      	b.n	8001382 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012fe:	6a23      	ldr	r3, [r4, #32]
 8001300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001304:	d01a      	beq.n	800133c <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001306:	4923      	ldr	r1, [pc, #140]	; (8001394 <HAL_RCC_OscConfig+0x408>)
 8001308:	684b      	ldr	r3, [r1, #4]
 800130a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800130e:	6a22      	ldr	r2, [r4, #32]
 8001310:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001312:	4302      	orrs	r2, r0
 8001314:	4313      	orrs	r3, r2
 8001316:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001318:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <HAL_RCC_OscConfig+0x40c>)
 800131a:	2201      	movs	r2, #1
 800131c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800131e:	f7fe ff5f 	bl	80001e0 <HAL_GetTick>
 8001322:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <HAL_RCC_OscConfig+0x408>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800132c:	d10e      	bne.n	800134c <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800132e:	f7fe ff57 	bl	80001e0 <HAL_GetTick>
 8001332:	1b00      	subs	r0, r0, r4
 8001334:	2802      	cmp	r0, #2
 8001336:	d9f5      	bls.n	8001324 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8001338:	2003      	movs	r0, #3
 800133a:	e022      	b.n	8001382 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800133c:	4a15      	ldr	r2, [pc, #84]	; (8001394 <HAL_RCC_OscConfig+0x408>)
 800133e:	6853      	ldr	r3, [r2, #4]
 8001340:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001344:	68a1      	ldr	r1, [r4, #8]
 8001346:	430b      	orrs	r3, r1
 8001348:	6053      	str	r3, [r2, #4]
 800134a:	e7dc      	b.n	8001306 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 800134c:	2000      	movs	r0, #0
 800134e:	e018      	b.n	8001382 <HAL_RCC_OscConfig+0x3f6>
 8001350:	2000      	movs	r0, #0
 8001352:	e016      	b.n	8001382 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001354:	2b01      	cmp	r3, #1
 8001356:	d016      	beq.n	8001386 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <HAL_RCC_OscConfig+0x408>)
 800135a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001360:	6a22      	ldr	r2, [r4, #32]
 8001362:	4291      	cmp	r1, r2
 8001364:	d111      	bne.n	800138a <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001366:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800136a:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136c:	4293      	cmp	r3, r2
 800136e:	d10e      	bne.n	800138e <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8001370:	2000      	movs	r0, #0
 8001372:	e006      	b.n	8001382 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8001374:	2001      	movs	r0, #1
}
 8001376:	4770      	bx	lr
        return HAL_ERROR;
 8001378:	2001      	movs	r0, #1
 800137a:	e002      	b.n	8001382 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 800137c:	2001      	movs	r0, #1
 800137e:	e000      	b.n	8001382 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8001380:	2000      	movs	r0, #0
}
 8001382:	b002      	add	sp, #8
 8001384:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001386:	2001      	movs	r0, #1
 8001388:	e7fb      	b.n	8001382 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 800138a:	2001      	movs	r0, #1
 800138c:	e7f9      	b.n	8001382 <HAL_RCC_OscConfig+0x3f6>
 800138e:	2001      	movs	r0, #1
 8001390:	e7f7      	b.n	8001382 <HAL_RCC_OscConfig+0x3f6>
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000
 8001398:	42420000 	.word	0x42420000

0800139c <HAL_RCC_GetSysClockFreq>:
{
 800139c:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <HAL_RCC_GetSysClockFreq+0x60>)
 80013a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013a2:	f10d 0c18 	add.w	ip, sp, #24
 80013a6:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013aa:	f240 2301 	movw	r3, #513	; 0x201
 80013ae:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <HAL_RCC_GetSysClockFreq+0x64>)
 80013b4:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80013b6:	f003 020c 	and.w	r2, r3, #12
 80013ba:	2a08      	cmp	r2, #8
 80013bc:	d002      	beq.n	80013c4 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 80013be:	4811      	ldr	r0, [pc, #68]	; (8001404 <HAL_RCC_GetSysClockFreq+0x68>)
}
 80013c0:	b006      	add	sp, #24
 80013c2:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013c4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80013c8:	3218      	adds	r2, #24
 80013ca:	446a      	add	r2, sp
 80013cc:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013d0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80013d4:	d00d      	beq.n	80013f2 <HAL_RCC_GetSysClockFreq+0x56>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_RCC_GetSysClockFreq+0x64>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80013de:	3318      	adds	r3, #24
 80013e0:	446b      	add	r3, sp
 80013e2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013e6:	4a07      	ldr	r2, [pc, #28]	; (8001404 <HAL_RCC_GetSysClockFreq+0x68>)
 80013e8:	fb02 f000 	mul.w	r0, r2, r0
 80013ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80013f0:	e7e6      	b.n	80013c0 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_RCC_GetSysClockFreq+0x6c>)
 80013f4:	fb03 f000 	mul.w	r0, r3, r0
 80013f8:	e7e2      	b.n	80013c0 <HAL_RCC_GetSysClockFreq+0x24>
 80013fa:	bf00      	nop
 80013fc:	08003df8 	.word	0x08003df8
 8001400:	40021000 	.word	0x40021000
 8001404:	007a1200 	.word	0x007a1200
 8001408:	003d0900 	.word	0x003d0900

0800140c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800140c:	2800      	cmp	r0, #0
 800140e:	f000 80a0 	beq.w	8001552 <HAL_RCC_ClockConfig+0x146>
{
 8001412:	b570      	push	{r4, r5, r6, lr}
 8001414:	460d      	mov	r5, r1
 8001416:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001418:	4b52      	ldr	r3, [pc, #328]	; (8001564 <HAL_RCC_ClockConfig+0x158>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0307 	and.w	r3, r3, #7
 8001420:	428b      	cmp	r3, r1
 8001422:	d20b      	bcs.n	800143c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001424:	4a4f      	ldr	r2, [pc, #316]	; (8001564 <HAL_RCC_ClockConfig+0x158>)
 8001426:	6813      	ldr	r3, [r2, #0]
 8001428:	f023 0307 	bic.w	r3, r3, #7
 800142c:	430b      	orrs	r3, r1
 800142e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001430:	6813      	ldr	r3, [r2, #0]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	428b      	cmp	r3, r1
 8001438:	f040 808d 	bne.w	8001556 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800143c:	6823      	ldr	r3, [r4, #0]
 800143e:	f013 0f02 	tst.w	r3, #2
 8001442:	d017      	beq.n	8001474 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001444:	f013 0f04 	tst.w	r3, #4
 8001448:	d004      	beq.n	8001454 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800144a:	4a47      	ldr	r2, [pc, #284]	; (8001568 <HAL_RCC_ClockConfig+0x15c>)
 800144c:	6853      	ldr	r3, [r2, #4]
 800144e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001452:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001454:	6823      	ldr	r3, [r4, #0]
 8001456:	f013 0f08 	tst.w	r3, #8
 800145a:	d004      	beq.n	8001466 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800145c:	4a42      	ldr	r2, [pc, #264]	; (8001568 <HAL_RCC_ClockConfig+0x15c>)
 800145e:	6853      	ldr	r3, [r2, #4]
 8001460:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001464:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001466:	4a40      	ldr	r2, [pc, #256]	; (8001568 <HAL_RCC_ClockConfig+0x15c>)
 8001468:	6853      	ldr	r3, [r2, #4]
 800146a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800146e:	68a1      	ldr	r1, [r4, #8]
 8001470:	430b      	orrs	r3, r1
 8001472:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001474:	6823      	ldr	r3, [r4, #0]
 8001476:	f013 0f01 	tst.w	r3, #1
 800147a:	d031      	beq.n	80014e0 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800147c:	6863      	ldr	r3, [r4, #4]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d020      	beq.n	80014c4 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001482:	2b02      	cmp	r3, #2
 8001484:	d025      	beq.n	80014d2 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001486:	4a38      	ldr	r2, [pc, #224]	; (8001568 <HAL_RCC_ClockConfig+0x15c>)
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	f012 0f02 	tst.w	r2, #2
 800148e:	d064      	beq.n	800155a <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001490:	4935      	ldr	r1, [pc, #212]	; (8001568 <HAL_RCC_ClockConfig+0x15c>)
 8001492:	684a      	ldr	r2, [r1, #4]
 8001494:	f022 0203 	bic.w	r2, r2, #3
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800149c:	f7fe fea0 	bl	80001e0 <HAL_GetTick>
 80014a0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a2:	4b31      	ldr	r3, [pc, #196]	; (8001568 <HAL_RCC_ClockConfig+0x15c>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	6862      	ldr	r2, [r4, #4]
 80014ac:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80014b0:	d016      	beq.n	80014e0 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b2:	f7fe fe95 	bl	80001e0 <HAL_GetTick>
 80014b6:	1b80      	subs	r0, r0, r6
 80014b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80014bc:	4298      	cmp	r0, r3
 80014be:	d9f0      	bls.n	80014a2 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80014c0:	2003      	movs	r0, #3
 80014c2:	e045      	b.n	8001550 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c4:	4a28      	ldr	r2, [pc, #160]	; (8001568 <HAL_RCC_ClockConfig+0x15c>)
 80014c6:	6812      	ldr	r2, [r2, #0]
 80014c8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80014cc:	d1e0      	bne.n	8001490 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80014ce:	2001      	movs	r0, #1
 80014d0:	e03e      	b.n	8001550 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d2:	4a25      	ldr	r2, [pc, #148]	; (8001568 <HAL_RCC_ClockConfig+0x15c>)
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80014da:	d1d9      	bne.n	8001490 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80014dc:	2001      	movs	r0, #1
 80014de:	e037      	b.n	8001550 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014e0:	4b20      	ldr	r3, [pc, #128]	; (8001564 <HAL_RCC_ClockConfig+0x158>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	42ab      	cmp	r3, r5
 80014ea:	d90a      	bls.n	8001502 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ec:	4a1d      	ldr	r2, [pc, #116]	; (8001564 <HAL_RCC_ClockConfig+0x158>)
 80014ee:	6813      	ldr	r3, [r2, #0]
 80014f0:	f023 0307 	bic.w	r3, r3, #7
 80014f4:	432b      	orrs	r3, r5
 80014f6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f8:	6813      	ldr	r3, [r2, #0]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	42ab      	cmp	r3, r5
 8001500:	d12d      	bne.n	800155e <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001502:	6823      	ldr	r3, [r4, #0]
 8001504:	f013 0f04 	tst.w	r3, #4
 8001508:	d006      	beq.n	8001518 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800150a:	4a17      	ldr	r2, [pc, #92]	; (8001568 <HAL_RCC_ClockConfig+0x15c>)
 800150c:	6853      	ldr	r3, [r2, #4]
 800150e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001512:	68e1      	ldr	r1, [r4, #12]
 8001514:	430b      	orrs	r3, r1
 8001516:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001518:	6823      	ldr	r3, [r4, #0]
 800151a:	f013 0f08 	tst.w	r3, #8
 800151e:	d007      	beq.n	8001530 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001520:	4a11      	ldr	r2, [pc, #68]	; (8001568 <HAL_RCC_ClockConfig+0x15c>)
 8001522:	6853      	ldr	r3, [r2, #4]
 8001524:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001528:	6921      	ldr	r1, [r4, #16]
 800152a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800152e:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001530:	f7ff ff34 	bl	800139c <HAL_RCC_GetSysClockFreq>
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HAL_RCC_ClockConfig+0x15c>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800153c:	4a0b      	ldr	r2, [pc, #44]	; (800156c <HAL_RCC_ClockConfig+0x160>)
 800153e:	5cd3      	ldrb	r3, [r2, r3]
 8001540:	40d8      	lsrs	r0, r3
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_RCC_ClockConfig+0x164>)
 8001544:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <HAL_RCC_ClockConfig+0x168>)
 8001548:	6818      	ldr	r0, [r3, #0]
 800154a:	f7fe fe07 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 800154e:	2000      	movs	r0, #0
}
 8001550:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001552:	2001      	movs	r0, #1
}
 8001554:	4770      	bx	lr
    return HAL_ERROR;
 8001556:	2001      	movs	r0, #1
 8001558:	e7fa      	b.n	8001550 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800155a:	2001      	movs	r0, #1
 800155c:	e7f8      	b.n	8001550 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 800155e:	2001      	movs	r0, #1
 8001560:	e7f6      	b.n	8001550 <HAL_RCC_ClockConfig+0x144>
 8001562:	bf00      	nop
 8001564:	40022000 	.word	0x40022000
 8001568:	40021000 	.word	0x40021000
 800156c:	08003dd0 	.word	0x08003dd0
 8001570:	2000002c 	.word	0x2000002c
 8001574:	20000004 	.word	0x20000004

08001578 <HAL_RCC_GetHCLKFreq>:
}
 8001578:	4b01      	ldr	r3, [pc, #4]	; (8001580 <HAL_RCC_GetHCLKFreq+0x8>)
 800157a:	6818      	ldr	r0, [r3, #0]
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	2000002c 	.word	0x2000002c

08001584 <HAL_RCC_GetPCLK1Freq>:
{
 8001584:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001586:	f7ff fff7 	bl	8001578 <HAL_RCC_GetHCLKFreq>
 800158a:	4b04      	ldr	r3, [pc, #16]	; (800159c <HAL_RCC_GetPCLK1Freq+0x18>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001592:	4a03      	ldr	r2, [pc, #12]	; (80015a0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001594:	5cd3      	ldrb	r3, [r2, r3]
}
 8001596:	40d8      	lsrs	r0, r3
 8001598:	bd08      	pop	{r3, pc}
 800159a:	bf00      	nop
 800159c:	40021000 	.word	0x40021000
 80015a0:	08003de0 	.word	0x08003de0

080015a4 <HAL_RCC_GetPCLK2Freq>:
{
 80015a4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015a6:	f7ff ffe7 	bl	8001578 <HAL_RCC_GetHCLKFreq>
 80015aa:	4b04      	ldr	r3, [pc, #16]	; (80015bc <HAL_RCC_GetPCLK2Freq+0x18>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80015b2:	4a03      	ldr	r2, [pc, #12]	; (80015c0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80015b4:	5cd3      	ldrb	r3, [r2, r3]
}
 80015b6:	40d8      	lsrs	r0, r3
 80015b8:	bd08      	pop	{r3, pc}
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000
 80015c0:	08003de0 	.word	0x08003de0

080015c4 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80015c4:	2800      	cmp	r0, #0
 80015c6:	d056      	beq.n	8001676 <HAL_SPI_Init+0xb2>
{
 80015c8:	b510      	push	{r4, lr}
 80015ca:	4604      	mov	r4, r0
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80015cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80015ce:	b933      	cbnz	r3, 80015de <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80015d0:	6843      	ldr	r3, [r0, #4]
 80015d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80015d6:	d005      	beq.n	80015e4 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015d8:	2300      	movs	r3, #0
 80015da:	61c3      	str	r3, [r0, #28]
 80015dc:	e002      	b.n	80015e4 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80015e2:	6143      	str	r3, [r0, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80015e8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d03c      	beq.n	800166a <HAL_SPI_Init+0xa6>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80015f0:	2302      	movs	r3, #2
 80015f2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80015f6:	6822      	ldr	r2, [r4, #0]
 80015f8:	6813      	ldr	r3, [r2, #0]
 80015fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015fe:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001600:	6863      	ldr	r3, [r4, #4]
 8001602:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8001606:	68a2      	ldr	r2, [r4, #8]
 8001608:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 800160c:	4313      	orrs	r3, r2
 800160e:	68e2      	ldr	r2, [r4, #12]
 8001610:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001614:	4313      	orrs	r3, r2
 8001616:	6922      	ldr	r2, [r4, #16]
 8001618:	f002 0202 	and.w	r2, r2, #2
 800161c:	4313      	orrs	r3, r2
 800161e:	6962      	ldr	r2, [r4, #20]
 8001620:	f002 0201 	and.w	r2, r2, #1
 8001624:	4313      	orrs	r3, r2
 8001626:	69a2      	ldr	r2, [r4, #24]
 8001628:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800162c:	4313      	orrs	r3, r2
 800162e:	69e2      	ldr	r2, [r4, #28]
 8001630:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001634:	4313      	orrs	r3, r2
 8001636:	6a22      	ldr	r2, [r4, #32]
 8001638:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800163c:	4313      	orrs	r3, r2
 800163e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001640:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001644:	6821      	ldr	r1, [r4, #0]
 8001646:	4313      	orrs	r3, r2
 8001648:	600b      	str	r3, [r1, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800164a:	8b63      	ldrh	r3, [r4, #26]
 800164c:	6822      	ldr	r2, [r4, #0]
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001654:	6822      	ldr	r2, [r4, #0]
 8001656:	69d3      	ldr	r3, [r2, #28]
 8001658:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800165c:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800165e:	2000      	movs	r0, #0
 8001660:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001662:	2301      	movs	r3, #1
 8001664:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8001668:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800166a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800166e:	4620      	mov	r0, r4
 8001670:	f001 f9e6 	bl	8002a40 <HAL_SPI_MspInit>
 8001674:	e7bc      	b.n	80015f0 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8001676:	2001      	movs	r0, #1
}
 8001678:	4770      	bx	lr

0800167a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800167a:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800167c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800167e:	6a04      	ldr	r4, [r0, #32]
 8001680:	f024 0401 	bic.w	r4, r4, #1
 8001684:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001686:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001688:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800168c:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001690:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001694:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001696:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001698:	6203      	str	r3, [r0, #32]
}
 800169a:	bc10      	pop	{r4}
 800169c:	4770      	bx	lr

0800169e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800169e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016a0:	6a04      	ldr	r4, [r0, #32]
 80016a2:	f024 0410 	bic.w	r4, r4, #16
 80016a6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80016a8:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80016aa:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80016ac:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80016b0:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80016b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80016b8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80016bc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80016be:	6203      	str	r3, [r0, #32]
}
 80016c0:	bc10      	pop	{r4}
 80016c2:	4770      	bx	lr

080016c4 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80016c4:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80016c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80016ca:	430b      	orrs	r3, r1
 80016cc:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80016d0:	6083      	str	r3, [r0, #8]
}
 80016d2:	4770      	bx	lr

080016d4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80016d4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016d6:	4a1b      	ldr	r2, [pc, #108]	; (8001744 <TIM_Base_SetConfig+0x70>)
 80016d8:	4290      	cmp	r0, r2
 80016da:	d00a      	beq.n	80016f2 <TIM_Base_SetConfig+0x1e>
 80016dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016e0:	d007      	beq.n	80016f2 <TIM_Base_SetConfig+0x1e>
 80016e2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80016e6:	4290      	cmp	r0, r2
 80016e8:	d003      	beq.n	80016f2 <TIM_Base_SetConfig+0x1e>
 80016ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016ee:	4290      	cmp	r0, r2
 80016f0:	d103      	bne.n	80016fa <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80016f6:	684a      	ldr	r2, [r1, #4]
 80016f8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016fa:	4a12      	ldr	r2, [pc, #72]	; (8001744 <TIM_Base_SetConfig+0x70>)
 80016fc:	4290      	cmp	r0, r2
 80016fe:	d00a      	beq.n	8001716 <TIM_Base_SetConfig+0x42>
 8001700:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001704:	d007      	beq.n	8001716 <TIM_Base_SetConfig+0x42>
 8001706:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800170a:	4290      	cmp	r0, r2
 800170c:	d003      	beq.n	8001716 <TIM_Base_SetConfig+0x42>
 800170e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001712:	4290      	cmp	r0, r2
 8001714:	d103      	bne.n	800171e <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800171a:	68ca      	ldr	r2, [r1, #12]
 800171c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800171e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001722:	694a      	ldr	r2, [r1, #20]
 8001724:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001726:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001728:	688b      	ldr	r3, [r1, #8]
 800172a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800172c:	680b      	ldr	r3, [r1, #0]
 800172e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <TIM_Base_SetConfig+0x70>)
 8001732:	4298      	cmp	r0, r3
 8001734:	d002      	beq.n	800173c <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8001736:	2301      	movs	r3, #1
 8001738:	6143      	str	r3, [r0, #20]
}
 800173a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800173c:	690b      	ldr	r3, [r1, #16]
 800173e:	6303      	str	r3, [r0, #48]	; 0x30
 8001740:	e7f9      	b.n	8001736 <TIM_Base_SetConfig+0x62>
 8001742:	bf00      	nop
 8001744:	40012c00 	.word	0x40012c00

08001748 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001748:	b340      	cbz	r0, 800179c <HAL_TIM_Base_Init+0x54>
{
 800174a:	b510      	push	{r4, lr}
 800174c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800174e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001752:	b1f3      	cbz	r3, 8001792 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001754:	2302      	movs	r3, #2
 8001756:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800175a:	4621      	mov	r1, r4
 800175c:	f851 0b04 	ldr.w	r0, [r1], #4
 8001760:	f7ff ffb8 	bl	80016d4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001764:	2301      	movs	r3, #1
 8001766:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800176a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800176e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001772:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001776:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800177a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800177e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001782:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001786:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800178a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800178e:	2000      	movs	r0, #0
}
 8001790:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001792:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001796:	f001 fbef 	bl	8002f78 <HAL_TIM_Base_MspInit>
 800179a:	e7db      	b.n	8001754 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800179c:	2001      	movs	r0, #1
}
 800179e:	4770      	bx	lr

080017a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80017a0:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80017a2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80017a4:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017a8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80017ac:	430a      	orrs	r2, r1
 80017ae:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80017b2:	6082      	str	r2, [r0, #8]
}
 80017b4:	bc10      	pop	{r4}
 80017b6:	4770      	bx	lr

080017b8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80017b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d066      	beq.n	800188e <HAL_TIM_ConfigClockSource+0xd6>
{
 80017c0:	b510      	push	{r4, lr}
 80017c2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80017c4:	2301      	movs	r3, #1
 80017c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80017ca:	2302      	movs	r3, #2
 80017cc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80017d0:	6802      	ldr	r2, [r0, #0]
 80017d2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80017d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80017d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80017dc:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80017de:	680b      	ldr	r3, [r1, #0]
 80017e0:	2b60      	cmp	r3, #96	; 0x60
 80017e2:	d040      	beq.n	8001866 <HAL_TIM_ConfigClockSource+0xae>
 80017e4:	d822      	bhi.n	800182c <HAL_TIM_ConfigClockSource+0x74>
 80017e6:	2b40      	cmp	r3, #64	; 0x40
 80017e8:	d047      	beq.n	800187a <HAL_TIM_ConfigClockSource+0xc2>
 80017ea:	d90b      	bls.n	8001804 <HAL_TIM_ConfigClockSource+0x4c>
 80017ec:	2b50      	cmp	r3, #80	; 0x50
 80017ee:	d10e      	bne.n	800180e <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80017f0:	68ca      	ldr	r2, [r1, #12]
 80017f2:	6849      	ldr	r1, [r1, #4]
 80017f4:	6800      	ldr	r0, [r0, #0]
 80017f6:	f7ff ff40 	bl	800167a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80017fa:	2150      	movs	r1, #80	; 0x50
 80017fc:	6820      	ldr	r0, [r4, #0]
 80017fe:	f7ff ff61 	bl	80016c4 <TIM_ITRx_SetConfig>
      break;
 8001802:	e004      	b.n	800180e <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8001804:	2b20      	cmp	r3, #32
 8001806:	d00c      	beq.n	8001822 <HAL_TIM_ConfigClockSource+0x6a>
 8001808:	d908      	bls.n	800181c <HAL_TIM_ConfigClockSource+0x64>
 800180a:	2b30      	cmp	r3, #48	; 0x30
 800180c:	d009      	beq.n	8001822 <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 800180e:	2301      	movs	r3, #1
 8001810:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001814:	2000      	movs	r0, #0
 8001816:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800181a:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800181c:	b10b      	cbz	r3, 8001822 <HAL_TIM_ConfigClockSource+0x6a>
 800181e:	2b10      	cmp	r3, #16
 8001820:	d1f5      	bne.n	800180e <HAL_TIM_ConfigClockSource+0x56>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001822:	4619      	mov	r1, r3
 8001824:	6820      	ldr	r0, [r4, #0]
 8001826:	f7ff ff4d 	bl	80016c4 <TIM_ITRx_SetConfig>
        break;
 800182a:	e7f0      	b.n	800180e <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 800182c:	2b70      	cmp	r3, #112	; 0x70
 800182e:	d00e      	beq.n	800184e <HAL_TIM_ConfigClockSource+0x96>
 8001830:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001834:	d1eb      	bne.n	800180e <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8001836:	68cb      	ldr	r3, [r1, #12]
 8001838:	684a      	ldr	r2, [r1, #4]
 800183a:	6889      	ldr	r1, [r1, #8]
 800183c:	6800      	ldr	r0, [r0, #0]
 800183e:	f7ff ffaf 	bl	80017a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001842:	6822      	ldr	r2, [r4, #0]
 8001844:	6893      	ldr	r3, [r2, #8]
 8001846:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800184a:	6093      	str	r3, [r2, #8]
      break;
 800184c:	e7df      	b.n	800180e <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 800184e:	68cb      	ldr	r3, [r1, #12]
 8001850:	684a      	ldr	r2, [r1, #4]
 8001852:	6889      	ldr	r1, [r1, #8]
 8001854:	6800      	ldr	r0, [r0, #0]
 8001856:	f7ff ffa3 	bl	80017a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800185a:	6822      	ldr	r2, [r4, #0]
 800185c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800185e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001862:	6093      	str	r3, [r2, #8]
      break;
 8001864:	e7d3      	b.n	800180e <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001866:	68ca      	ldr	r2, [r1, #12]
 8001868:	6849      	ldr	r1, [r1, #4]
 800186a:	6800      	ldr	r0, [r0, #0]
 800186c:	f7ff ff17 	bl	800169e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001870:	2160      	movs	r1, #96	; 0x60
 8001872:	6820      	ldr	r0, [r4, #0]
 8001874:	f7ff ff26 	bl	80016c4 <TIM_ITRx_SetConfig>
      break;
 8001878:	e7c9      	b.n	800180e <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800187a:	68ca      	ldr	r2, [r1, #12]
 800187c:	6849      	ldr	r1, [r1, #4]
 800187e:	6800      	ldr	r0, [r0, #0]
 8001880:	f7ff fefb 	bl	800167a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001884:	2140      	movs	r1, #64	; 0x40
 8001886:	6820      	ldr	r0, [r4, #0]
 8001888:	f7ff ff1c 	bl	80016c4 <TIM_ITRx_SetConfig>
      break;
 800188c:	e7bf      	b.n	800180e <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 800188e:	2002      	movs	r0, #2
}
 8001890:	4770      	bx	lr
	...

08001894 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001894:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001898:	2b01      	cmp	r3, #1
 800189a:	d02c      	beq.n	80018f6 <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 800189c:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800189e:	2301      	movs	r3, #1
 80018a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018a4:	2302      	movs	r3, #2
 80018a6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80018aa:	6803      	ldr	r3, [r0, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80018ae:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80018b0:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80018b4:	680a      	ldr	r2, [r1, #0]
 80018b6:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80018ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018bc:	6803      	ldr	r3, [r0, #0]
 80018be:	4a0f      	ldr	r2, [pc, #60]	; (80018fc <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d00a      	beq.n	80018da <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80018c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c8:	d007      	beq.n	80018da <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80018ca:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d003      	beq.n	80018da <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80018d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d104      	bne.n	80018e4 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80018da:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80018de:	684a      	ldr	r2, [r1, #4]
 80018e0:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80018e2:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80018e4:	2301      	movs	r3, #1
 80018e6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80018ea:	2300      	movs	r3, #0
 80018ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80018f0:	4618      	mov	r0, r3
}
 80018f2:	bc10      	pop	{r4}
 80018f4:	4770      	bx	lr
  __HAL_LOCK(htim);
 80018f6:	2002      	movs	r0, #2
}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40012c00 	.word	0x40012c00

08001900 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001900:	6802      	ldr	r2, [r0, #0]
 8001902:	68d3      	ldr	r3, [r2, #12]
 8001904:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001908:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800190a:	2320      	movs	r3, #32
 800190c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8001910:	4770      	bx	lr

08001912 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001912:	6802      	ldr	r2, [r0, #0]
 8001914:	68d3      	ldr	r3, [r2, #12]
 8001916:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800191a:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800191c:	6802      	ldr	r2, [r0, #0]
 800191e:	6953      	ldr	r3, [r2, #20]
 8001920:	f023 0301 	bic.w	r3, r3, #1
 8001924:	6153      	str	r3, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001926:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001928:	2b01      	cmp	r3, #1
 800192a:	d005      	beq.n	8001938 <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800192c:	2320      	movs	r3, #32
 800192e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001932:	2300      	movs	r3, #0
 8001934:	6303      	str	r3, [r0, #48]	; 0x30
}
 8001936:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001938:	6802      	ldr	r2, [r0, #0]
 800193a:	68d3      	ldr	r3, [r2, #12]
 800193c:	f023 0310 	bic.w	r3, r3, #16
 8001940:	60d3      	str	r3, [r2, #12]
 8001942:	e7f3      	b.n	800192c <UART_EndRxTransfer+0x1a>

08001944 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001944:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b21      	cmp	r3, #33	; 0x21
 800194c:	d001      	beq.n	8001952 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800194e:	2002      	movs	r0, #2
  }
}
 8001950:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001952:	6883      	ldr	r3, [r0, #8]
 8001954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001958:	d017      	beq.n	800198a <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800195a:	6a03      	ldr	r3, [r0, #32]
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	6202      	str	r2, [r0, #32]
 8001960:	781a      	ldrb	r2, [r3, #0]
 8001962:	6803      	ldr	r3, [r0, #0]
 8001964:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8001966:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8001968:	b29b      	uxth	r3, r3
 800196a:	3b01      	subs	r3, #1
 800196c:	b29b      	uxth	r3, r3
 800196e:	84c3      	strh	r3, [r0, #38]	; 0x26
 8001970:	b94b      	cbnz	r3, 8001986 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001972:	6802      	ldr	r2, [r0, #0]
 8001974:	68d3      	ldr	r3, [r2, #12]
 8001976:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800197a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800197c:	6802      	ldr	r2, [r0, #0]
 800197e:	68d3      	ldr	r3, [r2, #12]
 8001980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001984:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8001986:	2000      	movs	r0, #0
 8001988:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800198a:	6903      	ldr	r3, [r0, #16]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1e4      	bne.n	800195a <UART_Transmit_IT+0x16>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001990:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	6802      	ldr	r2, [r0, #0]
 8001996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800199a:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 800199c:	6a03      	ldr	r3, [r0, #32]
 800199e:	3302      	adds	r3, #2
 80019a0:	6203      	str	r3, [r0, #32]
 80019a2:	e7e0      	b.n	8001966 <UART_Transmit_IT+0x22>

080019a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019a4:	b510      	push	{r4, lr}
 80019a6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019a8:	6802      	ldr	r2, [r0, #0]
 80019aa:	6913      	ldr	r3, [r2, #16]
 80019ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019b0:	68c1      	ldr	r1, [r0, #12]
 80019b2:	430b      	orrs	r3, r1
 80019b4:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019b6:	6883      	ldr	r3, [r0, #8]
 80019b8:	6902      	ldr	r2, [r0, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	6942      	ldr	r2, [r0, #20]
 80019be:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80019c0:	6801      	ldr	r1, [r0, #0]
 80019c2:	68cb      	ldr	r3, [r1, #12]
 80019c4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80019c8:	f023 030c 	bic.w	r3, r3, #12
 80019cc:	4313      	orrs	r3, r2
 80019ce:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019d0:	6802      	ldr	r2, [r0, #0]
 80019d2:	6953      	ldr	r3, [r2, #20]
 80019d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019d8:	6981      	ldr	r1, [r0, #24]
 80019da:	430b      	orrs	r3, r1
 80019dc:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80019de:	6802      	ldr	r2, [r0, #0]
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <UART_SetConfig+0x8c>)
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d020      	beq.n	8001a28 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80019e6:	f7ff fdcd 	bl	8001584 <HAL_RCC_GetPCLK1Freq>
 80019ea:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80019ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80019f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80019f4:	6863      	ldr	r3, [r4, #4]
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80019fc:	480d      	ldr	r0, [pc, #52]	; (8001a34 <UART_SetConfig+0x90>)
 80019fe:	fba0 3102 	umull	r3, r1, r0, r2
 8001a02:	0949      	lsrs	r1, r1, #5
 8001a04:	2364      	movs	r3, #100	; 0x64
 8001a06:	fb03 2311 	mls	r3, r3, r1, r2
 8001a0a:	011b      	lsls	r3, r3, #4
 8001a0c:	3332      	adds	r3, #50	; 0x32
 8001a0e:	fba0 2303 	umull	r2, r3, r0, r3
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a18:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001a1c:	f003 030f 	and.w	r3, r3, #15
 8001a20:	6821      	ldr	r1, [r4, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8001a26:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8001a28:	f7ff fdbc 	bl	80015a4 <HAL_RCC_GetPCLK2Freq>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	e7dd      	b.n	80019ec <UART_SetConfig+0x48>
 8001a30:	40013800 	.word	0x40013800
 8001a34:	51eb851f 	.word	0x51eb851f

08001a38 <UART_WaitOnFlagUntilTimeout>:
{
 8001a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a3c:	4605      	mov	r5, r0
 8001a3e:	460f      	mov	r7, r1
 8001a40:	4616      	mov	r6, r2
 8001a42:	4699      	mov	r9, r3
 8001a44:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a48:	682c      	ldr	r4, [r5, #0]
 8001a4a:	6824      	ldr	r4, [r4, #0]
 8001a4c:	ea37 0304 	bics.w	r3, r7, r4
 8001a50:	bf0c      	ite	eq
 8001a52:	f04f 0c01 	moveq.w	ip, #1
 8001a56:	f04f 0c00 	movne.w	ip, #0
 8001a5a:	45b4      	cmp	ip, r6
 8001a5c:	d11f      	bne.n	8001a9e <UART_WaitOnFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 8001a5e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001a62:	d0f1      	beq.n	8001a48 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a64:	f1b8 0f00 	cmp.w	r8, #0
 8001a68:	d005      	beq.n	8001a76 <UART_WaitOnFlagUntilTimeout+0x3e>
 8001a6a:	f7fe fbb9 	bl	80001e0 <HAL_GetTick>
 8001a6e:	eba0 0009 	sub.w	r0, r0, r9
 8001a72:	4540      	cmp	r0, r8
 8001a74:	d9e8      	bls.n	8001a48 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a76:	682a      	ldr	r2, [r5, #0]
 8001a78:	68d3      	ldr	r3, [r2, #12]
 8001a7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001a7e:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a80:	682a      	ldr	r2, [r5, #0]
 8001a82:	6953      	ldr	r3, [r2, #20]
 8001a84:	f023 0301 	bic.w	r3, r3, #1
 8001a88:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001a8a:	2320      	movs	r3, #32
 8001a8c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001a90:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8001a94:	2300      	movs	r3, #0
 8001a96:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001a9a:	2003      	movs	r0, #3
 8001a9c:	e000      	b.n	8001aa0 <UART_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 8001a9e:	2000      	movs	r0, #0
}
 8001aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001aa4 <HAL_UART_Init>:
  if (huart == NULL)
 8001aa4:	b358      	cbz	r0, 8001afe <HAL_UART_Init+0x5a>
{
 8001aa6:	b510      	push	{r4, lr}
 8001aa8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001aaa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001aae:	b30b      	cbz	r3, 8001af4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001ab0:	2324      	movs	r3, #36	; 0x24
 8001ab2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8001ab6:	6822      	ldr	r2, [r4, #0]
 8001ab8:	68d3      	ldr	r3, [r2, #12]
 8001aba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001abe:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f7ff ff6f 	bl	80019a4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ac6:	6822      	ldr	r2, [r4, #0]
 8001ac8:	6913      	ldr	r3, [r2, #16]
 8001aca:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001ace:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ad0:	6822      	ldr	r2, [r4, #0]
 8001ad2:	6953      	ldr	r3, [r2, #20]
 8001ad4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001ad8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001ada:	6822      	ldr	r2, [r4, #0]
 8001adc:	68d3      	ldr	r3, [r2, #12]
 8001ade:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ae2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ae8:	2320      	movs	r3, #32
 8001aea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001aee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8001af2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001af4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8001af8:	f001 fa8a 	bl	8003010 <HAL_UART_MspInit>
 8001afc:	e7d8      	b.n	8001ab0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001afe:	2001      	movs	r0, #1
}
 8001b00:	4770      	bx	lr

08001b02 <HAL_UART_Transmit>:
{
 8001b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001b0a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b20      	cmp	r3, #32
 8001b12:	d154      	bne.n	8001bbe <HAL_UART_Transmit+0xbc>
 8001b14:	4604      	mov	r4, r0
 8001b16:	460d      	mov	r5, r1
 8001b18:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001b1a:	2900      	cmp	r1, #0
 8001b1c:	d053      	beq.n	8001bc6 <HAL_UART_Transmit+0xc4>
 8001b1e:	2a00      	cmp	r2, #0
 8001b20:	d053      	beq.n	8001bca <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8001b22:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d051      	beq.n	8001bce <HAL_UART_Transmit+0xcc>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b34:	2321      	movs	r3, #33	; 0x21
 8001b36:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8001b3a:	f7fe fb51 	bl	80001e0 <HAL_GetTick>
 8001b3e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001b40:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b44:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b48:	68a3      	ldr	r3, [r4, #8]
 8001b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b4e:	d005      	beq.n	8001b5c <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 8001b50:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8001b54:	2300      	movs	r3, #0
 8001b56:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8001b5a:	e012      	b.n	8001b82 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b5c:	6923      	ldr	r3, [r4, #16]
 8001b5e:	b113      	cbz	r3, 8001b66 <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 8001b60:	f04f 0800 	mov.w	r8, #0
 8001b64:	e7f6      	b.n	8001b54 <HAL_UART_Transmit+0x52>
      pdata16bits = (uint16_t *) pData;
 8001b66:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001b68:	2500      	movs	r5, #0
 8001b6a:	e7f3      	b.n	8001b54 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b6c:	f838 3b02 	ldrh.w	r3, [r8], #2
 8001b70:	6822      	ldr	r2, [r4, #0]
 8001b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b76:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8001b78:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001b7a:	b292      	uxth	r2, r2
 8001b7c:	3a01      	subs	r2, #1
 8001b7e:	b292      	uxth	r2, r2
 8001b80:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b82:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	b173      	cbz	r3, 8001ba6 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b88:	9600      	str	r6, [sp, #0]
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2180      	movs	r1, #128	; 0x80
 8001b90:	4620      	mov	r0, r4
 8001b92:	f7ff ff51 	bl	8001a38 <UART_WaitOnFlagUntilTimeout>
 8001b96:	b9e0      	cbnz	r0, 8001bd2 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8001b98:	2d00      	cmp	r5, #0
 8001b9a:	d0e7      	beq.n	8001b6c <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b9c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001ba0:	6823      	ldr	r3, [r4, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ba4:	e7e8      	b.n	8001b78 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ba6:	9600      	str	r6, [sp, #0]
 8001ba8:	463b      	mov	r3, r7
 8001baa:	2200      	movs	r2, #0
 8001bac:	2140      	movs	r1, #64	; 0x40
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f7ff ff42 	bl	8001a38 <UART_WaitOnFlagUntilTimeout>
 8001bb4:	b978      	cbnz	r0, 8001bd6 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8001bb6:	2320      	movs	r3, #32
 8001bb8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8001bbc:	e000      	b.n	8001bc0 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8001bbe:	2002      	movs	r0, #2
}
 8001bc0:	b002      	add	sp, #8
 8001bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	e7fa      	b.n	8001bc0 <HAL_UART_Transmit+0xbe>
 8001bca:	2001      	movs	r0, #1
 8001bcc:	e7f8      	b.n	8001bc0 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 8001bce:	2002      	movs	r0, #2
 8001bd0:	e7f6      	b.n	8001bc0 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 8001bd2:	2003      	movs	r0, #3
 8001bd4:	e7f4      	b.n	8001bc0 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8001bd6:	2003      	movs	r0, #3
 8001bd8:	e7f2      	b.n	8001bc0 <HAL_UART_Transmit+0xbe>

08001bda <HAL_UART_Receive>:
{
 8001bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001be2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b20      	cmp	r3, #32
 8001bea:	d15c      	bne.n	8001ca6 <HAL_UART_Receive+0xcc>
 8001bec:	4604      	mov	r4, r0
 8001bee:	460d      	mov	r5, r1
 8001bf0:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001bf2:	2900      	cmp	r1, #0
 8001bf4:	d05b      	beq.n	8001cae <HAL_UART_Receive+0xd4>
 8001bf6:	2a00      	cmp	r2, #0
 8001bf8:	d05b      	beq.n	8001cb2 <HAL_UART_Receive+0xd8>
    __HAL_LOCK(huart);
 8001bfa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d059      	beq.n	8001cb6 <HAL_UART_Receive+0xdc>
 8001c02:	2301      	movs	r3, #1
 8001c04:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	6403      	str	r3, [r0, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c0c:	2222      	movs	r2, #34	; 0x22
 8001c0e:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c12:	6303      	str	r3, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 8001c14:	f7fe fae4 	bl	80001e0 <HAL_GetTick>
 8001c18:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8001c1a:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001c1e:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c22:	68a3      	ldr	r3, [r4, #8]
 8001c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c28:	d005      	beq.n	8001c36 <HAL_UART_Receive+0x5c>
      pdata16bits = NULL;
 8001c2a:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->RxXferCount > 0U)
 8001c34:	e017      	b.n	8001c66 <HAL_UART_Receive+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c36:	6923      	ldr	r3, [r4, #16]
 8001c38:	b113      	cbz	r3, 8001c40 <HAL_UART_Receive+0x66>
      pdata16bits = NULL;
 8001c3a:	f04f 0800 	mov.w	r8, #0
 8001c3e:	e7f6      	b.n	8001c2e <HAL_UART_Receive+0x54>
      pdata16bits = (uint16_t *) pData;
 8001c40:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8001c42:	2500      	movs	r5, #0
 8001c44:	e7f3      	b.n	8001c2e <HAL_UART_Receive+0x54>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c4e:	f828 3b02 	strh.w	r3, [r8], #2
        pdata16bits++;
 8001c52:	e003      	b.n	8001c5c <HAL_UART_Receive+0x82>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 8001c5a:	3501      	adds	r5, #1
      huart->RxXferCount--;
 8001c5c:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8001c5e:	b292      	uxth	r2, r2
 8001c60:	3a01      	subs	r2, #1
 8001c62:	b292      	uxth	r2, r2
 8001c64:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001c66:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	b1bb      	cbz	r3, 8001c9c <HAL_UART_Receive+0xc2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001c6c:	9600      	str	r6, [sp, #0]
 8001c6e:	463b      	mov	r3, r7
 8001c70:	2200      	movs	r2, #0
 8001c72:	2120      	movs	r1, #32
 8001c74:	4620      	mov	r0, r4
 8001c76:	f7ff fedf 	bl	8001a38 <UART_WaitOnFlagUntilTimeout>
 8001c7a:	b9f0      	cbnz	r0, 8001cba <HAL_UART_Receive+0xe0>
      if (pdata8bits == NULL)
 8001c7c:	2d00      	cmp	r5, #0
 8001c7e:	d0e2      	beq.n	8001c46 <HAL_UART_Receive+0x6c>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001c80:	68a3      	ldr	r3, [r4, #8]
 8001c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c86:	d0e5      	beq.n	8001c54 <HAL_UART_Receive+0x7a>
 8001c88:	b913      	cbnz	r3, 8001c90 <HAL_UART_Receive+0xb6>
 8001c8a:	6923      	ldr	r3, [r4, #16]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0e1      	beq.n	8001c54 <HAL_UART_Receive+0x7a>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c98:	702b      	strb	r3, [r5, #0]
 8001c9a:	e7de      	b.n	8001c5a <HAL_UART_Receive+0x80>
    huart->RxState = HAL_UART_STATE_READY;
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	e000      	b.n	8001ca8 <HAL_UART_Receive+0xce>
    return HAL_BUSY;
 8001ca6:	2002      	movs	r0, #2
}
 8001ca8:	b002      	add	sp, #8
 8001caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001cae:	2001      	movs	r0, #1
 8001cb0:	e7fa      	b.n	8001ca8 <HAL_UART_Receive+0xce>
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	e7f8      	b.n	8001ca8 <HAL_UART_Receive+0xce>
    __HAL_LOCK(huart);
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	e7f6      	b.n	8001ca8 <HAL_UART_Receive+0xce>
        return HAL_TIMEOUT;
 8001cba:	2003      	movs	r0, #3
 8001cbc:	e7f4      	b.n	8001ca8 <HAL_UART_Receive+0xce>

08001cbe <HAL_UART_TxCpltCallback>:
}
 8001cbe:	4770      	bx	lr

08001cc0 <UART_EndTransmit_IT>:
{
 8001cc0:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001cc2:	6801      	ldr	r1, [r0, #0]
 8001cc4:	68ca      	ldr	r2, [r1, #12]
 8001cc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cca:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001ccc:	2220      	movs	r2, #32
 8001cce:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8001cd2:	f7ff fff4 	bl	8001cbe <HAL_UART_TxCpltCallback>
}
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	bd08      	pop	{r3, pc}

08001cda <HAL_UART_RxCpltCallback>:
}
 8001cda:	4770      	bx	lr

08001cdc <HAL_UART_RxHalfCpltCallback>:
}
 8001cdc:	4770      	bx	lr

08001cde <HAL_UART_ErrorCallback>:
}
 8001cde:	4770      	bx	lr

08001ce0 <UART_DMAError>:
{
 8001ce0:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ce2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001ce8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b21      	cmp	r3, #33	; 0x21
 8001cf0:	d010      	beq.n	8001d14 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001cf2:	6823      	ldr	r3, [r4, #0]
 8001cf4:	695a      	ldr	r2, [r3, #20]
 8001cf6:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001cfa:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b22      	cmp	r3, #34	; 0x22
 8001d02:	d011      	beq.n	8001d28 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001d04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d06:	f043 0310 	orr.w	r3, r3, #16
 8001d0a:	6423      	str	r3, [r4, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	f7ff ffe6 	bl	8001cde <HAL_UART_ErrorCallback>
}
 8001d12:	bd10      	pop	{r4, pc}
 8001d14:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001d18:	2a00      	cmp	r2, #0
 8001d1a:	d0ea      	beq.n	8001cf2 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8001d20:	4620      	mov	r0, r4
 8001d22:	f7ff fded 	bl	8001900 <UART_EndTxTransfer>
 8001d26:	e7e4      	b.n	8001cf2 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001d28:	2a00      	cmp	r2, #0
 8001d2a:	d0eb      	beq.n	8001d04 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001d30:	4620      	mov	r0, r4
 8001d32:	f7ff fdee 	bl	8001912 <UART_EndRxTransfer>
 8001d36:	e7e5      	b.n	8001d04 <UART_DMAError+0x24>

08001d38 <UART_DMAAbortOnError>:
{
 8001d38:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d3a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001d40:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001d42:	f7ff ffcc 	bl	8001cde <HAL_UART_ErrorCallback>
}
 8001d46:	bd08      	pop	{r3, pc}

08001d48 <HAL_UARTEx_RxEventCallback>:
}
 8001d48:	4770      	bx	lr

08001d4a <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001d4a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b22      	cmp	r3, #34	; 0x22
 8001d52:	d160      	bne.n	8001e16 <UART_Receive_IT+0xcc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d54:	6883      	ldr	r3, [r0, #8]
 8001d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d5a:	d046      	beq.n	8001dea <UART_Receive_IT+0xa0>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001d5c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d62:	d004      	beq.n	8001d6e <UART_Receive_IT+0x24>
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d14d      	bne.n	8001e04 <UART_Receive_IT+0xba>
 8001d68:	6903      	ldr	r3, [r0, #16]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d14a      	bne.n	8001e04 <UART_Receive_IT+0xba>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d6e:	6803      	ldr	r3, [r0, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8001d74:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001d76:	3301      	adds	r3, #1
 8001d78:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001d7a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d148      	bne.n	8001e1a <UART_Receive_IT+0xd0>
{
 8001d88:	b500      	push	{lr}
 8001d8a:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001d8c:	6802      	ldr	r2, [r0, #0]
 8001d8e:	68d3      	ldr	r3, [r2, #12]
 8001d90:	f023 0320 	bic.w	r3, r3, #32
 8001d94:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001d96:	6802      	ldr	r2, [r0, #0]
 8001d98:	68d3      	ldr	r3, [r2, #12]
 8001d9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d9e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001da0:	6802      	ldr	r2, [r0, #0]
 8001da2:	6953      	ldr	r3, [r2, #20]
 8001da4:	f023 0301 	bic.w	r3, r3, #1
 8001da8:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001daa:	2320      	movs	r3, #32
 8001dac:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001db0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d12c      	bne.n	8001e10 <UART_Receive_IT+0xc6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001db6:	2300      	movs	r3, #0
 8001db8:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001dba:	6802      	ldr	r2, [r0, #0]
 8001dbc:	68d3      	ldr	r3, [r2, #12]
 8001dbe:	f023 0310 	bic.w	r3, r3, #16
 8001dc2:	60d3      	str	r3, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001dc4:	6803      	ldr	r3, [r0, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	f012 0f10 	tst.w	r2, #16
 8001dcc:	d006      	beq.n	8001ddc <UART_Receive_IT+0x92>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	9201      	str	r2, [sp, #4]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	9201      	str	r2, [sp, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001ddc:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8001dde:	f7ff ffb3 	bl	8001d48 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8001de2:	2000      	movs	r0, #0
}
 8001de4:	b003      	add	sp, #12
 8001de6:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dea:	6902      	ldr	r2, [r0, #16]
 8001dec:	2a00      	cmp	r2, #0
 8001dee:	d1b5      	bne.n	8001d5c <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001df0:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001df2:	6803      	ldr	r3, [r0, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dfa:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8001dfc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001dfe:	3302      	adds	r3, #2
 8001e00:	6283      	str	r3, [r0, #40]	; 0x28
 8001e02:	e7ba      	b.n	8001d7a <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e04:	6803      	ldr	r3, [r0, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e0c:	7013      	strb	r3, [r2, #0]
 8001e0e:	e7b1      	b.n	8001d74 <UART_Receive_IT+0x2a>
       HAL_UART_RxCpltCallback(huart);
 8001e10:	f7ff ff63 	bl	8001cda <HAL_UART_RxCpltCallback>
 8001e14:	e7e5      	b.n	8001de2 <UART_Receive_IT+0x98>
    return HAL_BUSY;
 8001e16:	2002      	movs	r0, #2
 8001e18:	4770      	bx	lr
    return HAL_OK;
 8001e1a:	2000      	movs	r0, #0
}
 8001e1c:	4770      	bx	lr
	...

08001e20 <HAL_UART_IRQHandler>:
{
 8001e20:	b530      	push	{r4, r5, lr}
 8001e22:	b083      	sub	sp, #12
 8001e24:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e26:	6802      	ldr	r2, [r0, #0]
 8001e28:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e2a:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e2c:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8001e2e:	f013 050f 	ands.w	r5, r3, #15
 8001e32:	d105      	bne.n	8001e40 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e34:	f013 0f20 	tst.w	r3, #32
 8001e38:	d002      	beq.n	8001e40 <HAL_UART_IRQHandler+0x20>
 8001e3a:	f010 0f20 	tst.w	r0, #32
 8001e3e:	d119      	bne.n	8001e74 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e40:	b12d      	cbz	r5, 8001e4e <HAL_UART_IRQHandler+0x2e>
 8001e42:	f011 0101 	ands.w	r1, r1, #1
 8001e46:	d119      	bne.n	8001e7c <HAL_UART_IRQHandler+0x5c>
 8001e48:	f410 7f90 	tst.w	r0, #288	; 0x120
 8001e4c:	d116      	bne.n	8001e7c <HAL_UART_IRQHandler+0x5c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e4e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001e50:	2901      	cmp	r1, #1
 8001e52:	d075      	beq.n	8001f40 <HAL_UART_IRQHandler+0x120>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001e58:	d003      	beq.n	8001e62 <HAL_UART_IRQHandler+0x42>
 8001e5a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001e5e:	f040 80d7 	bne.w	8002010 <HAL_UART_IRQHandler+0x1f0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e62:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001e66:	d003      	beq.n	8001e70 <HAL_UART_IRQHandler+0x50>
 8001e68:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001e6c:	f040 80d4 	bne.w	8002018 <HAL_UART_IRQHandler+0x1f8>
}
 8001e70:	b003      	add	sp, #12
 8001e72:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 8001e74:	4620      	mov	r0, r4
 8001e76:	f7ff ff68 	bl	8001d4a <UART_Receive_IT>
      return;
 8001e7a:	e7f9      	b.n	8001e70 <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e7c:	f013 0f01 	tst.w	r3, #1
 8001e80:	d006      	beq.n	8001e90 <HAL_UART_IRQHandler+0x70>
 8001e82:	f410 7f80 	tst.w	r0, #256	; 0x100
 8001e86:	d003      	beq.n	8001e90 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e88:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001e8a:	f042 0201 	orr.w	r2, r2, #1
 8001e8e:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e90:	f013 0f04 	tst.w	r3, #4
 8001e94:	d004      	beq.n	8001ea0 <HAL_UART_IRQHandler+0x80>
 8001e96:	b119      	cbz	r1, 8001ea0 <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e98:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001e9a:	f042 0202 	orr.w	r2, r2, #2
 8001e9e:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ea0:	f013 0f02 	tst.w	r3, #2
 8001ea4:	d004      	beq.n	8001eb0 <HAL_UART_IRQHandler+0x90>
 8001ea6:	b119      	cbz	r1, 8001eb0 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ea8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001eaa:	f042 0204 	orr.w	r2, r2, #4
 8001eae:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001eb0:	f013 0f08 	tst.w	r3, #8
 8001eb4:	d007      	beq.n	8001ec6 <HAL_UART_IRQHandler+0xa6>
 8001eb6:	f010 0f20 	tst.w	r0, #32
 8001eba:	d100      	bne.n	8001ebe <HAL_UART_IRQHandler+0x9e>
 8001ebc:	b119      	cbz	r1, 8001ec6 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ebe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ec0:	f042 0208 	orr.w	r2, r2, #8
 8001ec4:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ec6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ec8:	2a00      	cmp	r2, #0
 8001eca:	d0d1      	beq.n	8001e70 <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ecc:	f013 0f20 	tst.w	r3, #32
 8001ed0:	d002      	beq.n	8001ed8 <HAL_UART_IRQHandler+0xb8>
 8001ed2:	f010 0f20 	tst.w	r0, #32
 8001ed6:	d121      	bne.n	8001f1c <HAL_UART_IRQHandler+0xfc>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ed8:	6823      	ldr	r3, [r4, #0]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ee0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ee2:	f012 0f08 	tst.w	r2, #8
 8001ee6:	d100      	bne.n	8001eea <HAL_UART_IRQHandler+0xca>
 8001ee8:	b323      	cbz	r3, 8001f34 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 8001eea:	4620      	mov	r0, r4
 8001eec:	f7ff fd11 	bl	8001912 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001ef8:	d018      	beq.n	8001f2c <HAL_UART_IRQHandler+0x10c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001efa:	695a      	ldr	r2, [r3, #20]
 8001efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f00:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001f02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f04:	b173      	cbz	r3, 8001f24 <HAL_UART_IRQHandler+0x104>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f06:	4a46      	ldr	r2, [pc, #280]	; (8002020 <HAL_UART_IRQHandler+0x200>)
 8001f08:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f0a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001f0c:	f7fe fde0 	bl	8000ad0 <HAL_DMA_Abort_IT>
 8001f10:	2800      	cmp	r0, #0
 8001f12:	d0ad      	beq.n	8001e70 <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f14:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001f16:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001f18:	4798      	blx	r3
 8001f1a:	e7a9      	b.n	8001e70 <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	f7ff ff14 	bl	8001d4a <UART_Receive_IT>
 8001f22:	e7d9      	b.n	8001ed8 <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 8001f24:	4620      	mov	r0, r4
 8001f26:	f7ff feda 	bl	8001cde <HAL_UART_ErrorCallback>
 8001f2a:	e7a1      	b.n	8001e70 <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	f7ff fed6 	bl	8001cde <HAL_UART_ErrorCallback>
 8001f32:	e79d      	b.n	8001e70 <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 8001f34:	4620      	mov	r0, r4
 8001f36:	f7ff fed2 	bl	8001cde <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	6423      	str	r3, [r4, #64]	; 0x40
    return;
 8001f3e:	e797      	b.n	8001e70 <HAL_UART_IRQHandler+0x50>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001f40:	f013 0f10 	tst.w	r3, #16
 8001f44:	d086      	beq.n	8001e54 <HAL_UART_IRQHandler+0x34>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001f46:	f010 0f10 	tst.w	r0, #16
 8001f4a:	d083      	beq.n	8001e54 <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	9301      	str	r3, [sp, #4]
 8001f50:	6813      	ldr	r3, [r2, #0]
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	6853      	ldr	r3, [r2, #4]
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f5a:	6953      	ldr	r3, [r2, #20]
 8001f5c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001f60:	d032      	beq.n	8001fc8 <HAL_UART_IRQHandler+0x1a8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f62:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001f64:	680b      	ldr	r3, [r1, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d080      	beq.n	8001e70 <HAL_UART_IRQHandler+0x50>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001f6e:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8001f70:	4298      	cmp	r0, r3
 8001f72:	f67f af7d 	bls.w	8001e70 <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 8001f76:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001f78:	698b      	ldr	r3, [r1, #24]
 8001f7a:	2b20      	cmp	r3, #32
 8001f7c:	d108      	bne.n	8001f90 <HAL_UART_IRQHandler+0x170>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001f7e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8001f80:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	1ac9      	subs	r1, r1, r3
 8001f86:	b289      	uxth	r1, r1
 8001f88:	4620      	mov	r0, r4
 8001f8a:	f7ff fedd 	bl	8001d48 <HAL_UARTEx_RxEventCallback>
      return;
 8001f8e:	e76f      	b.n	8001e70 <HAL_UART_IRQHandler+0x50>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f90:	68d3      	ldr	r3, [r2, #12]
 8001f92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f96:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f98:	6822      	ldr	r2, [r4, #0]
 8001f9a:	6953      	ldr	r3, [r2, #20]
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	6153      	str	r3, [r2, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fa2:	6822      	ldr	r2, [r4, #0]
 8001fa4:	6953      	ldr	r3, [r2, #20]
 8001fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001faa:	6153      	str	r3, [r2, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8001fac:	2320      	movs	r3, #32
 8001fae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	6323      	str	r3, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fb6:	6822      	ldr	r2, [r4, #0]
 8001fb8:	68d3      	ldr	r3, [r2, #12]
 8001fba:	f023 0310 	bic.w	r3, r3, #16
 8001fbe:	60d3      	str	r3, [r2, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001fc0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001fc2:	f7fe fd63 	bl	8000a8c <HAL_DMA_Abort>
 8001fc6:	e7da      	b.n	8001f7e <HAL_UART_IRQHandler+0x15e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001fc8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8001fca:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	1ac9      	subs	r1, r1, r3
 8001fd0:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8001fd2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f43f af4a 	beq.w	8001e70 <HAL_UART_IRQHandler+0x50>
          &&(nb_rx_data > 0U) )
 8001fdc:	2900      	cmp	r1, #0
 8001fde:	f43f af47 	beq.w	8001e70 <HAL_UART_IRQHandler+0x50>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fe2:	68d3      	ldr	r3, [r2, #12]
 8001fe4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001fe8:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fea:	6822      	ldr	r2, [r4, #0]
 8001fec:	6953      	ldr	r3, [r2, #20]
 8001fee:	f023 0301 	bic.w	r3, r3, #1
 8001ff2:	6153      	str	r3, [r2, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8001ff4:	2320      	movs	r3, #32
 8001ff6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	6323      	str	r3, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ffe:	6822      	ldr	r2, [r4, #0]
 8002000:	68d3      	ldr	r3, [r2, #12]
 8002002:	f023 0310 	bic.w	r3, r3, #16
 8002006:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002008:	4620      	mov	r0, r4
 800200a:	f7ff fe9d 	bl	8001d48 <HAL_UARTEx_RxEventCallback>
      return;
 800200e:	e72f      	b.n	8001e70 <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 8002010:	4620      	mov	r0, r4
 8002012:	f7ff fc97 	bl	8001944 <UART_Transmit_IT>
    return;
 8002016:	e72b      	b.n	8001e70 <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 8002018:	4620      	mov	r0, r4
 800201a:	f7ff fe51 	bl	8001cc0 <UART_EndTransmit_IT>
    return;
 800201e:	e727      	b.n	8001e70 <HAL_UART_IRQHandler+0x50>
 8002020:	08001d39 	.word	0x08001d39

08002024 <UART_DMARxHalfCplt>:
{
 8002024:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002026:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002028:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800202a:	2b01      	cmp	r3, #1
 800202c:	d002      	beq.n	8002034 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800202e:	f7ff fe55 	bl	8001cdc <HAL_UART_RxHalfCpltCallback>
}
 8002032:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002034:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8002036:	0849      	lsrs	r1, r1, #1
 8002038:	f7ff fe86 	bl	8001d48 <HAL_UARTEx_RxEventCallback>
 800203c:	e7f9      	b.n	8002032 <UART_DMARxHalfCplt+0xe>

0800203e <UART_DMAReceiveCplt>:
{
 800203e:	b508      	push	{r3, lr}
 8002040:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002042:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f013 0f20 	tst.w	r3, #32
 800204c:	d116      	bne.n	800207c <UART_DMAReceiveCplt+0x3e>
    huart->RxXferCount = 0U;
 800204e:	2300      	movs	r3, #0
 8002050:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002052:	6802      	ldr	r2, [r0, #0]
 8002054:	68d3      	ldr	r3, [r2, #12]
 8002056:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800205a:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800205c:	6802      	ldr	r2, [r0, #0]
 800205e:	6953      	ldr	r3, [r2, #20]
 8002060:	f023 0301 	bic.w	r3, r3, #1
 8002064:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002066:	6802      	ldr	r2, [r0, #0]
 8002068:	6953      	ldr	r3, [r2, #20]
 800206a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800206e:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8002070:	2320      	movs	r3, #32
 8002072:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002076:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002078:	2b01      	cmp	r3, #1
 800207a:	d005      	beq.n	8002088 <UART_DMAReceiveCplt+0x4a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800207c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800207e:	2b01      	cmp	r3, #1
 8002080:	d008      	beq.n	8002094 <UART_DMAReceiveCplt+0x56>
    HAL_UART_RxCpltCallback(huart);
 8002082:	f7ff fe2a 	bl	8001cda <HAL_UART_RxCpltCallback>
}
 8002086:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002088:	6802      	ldr	r2, [r0, #0]
 800208a:	68d3      	ldr	r3, [r2, #12]
 800208c:	f023 0310 	bic.w	r3, r3, #16
 8002090:	60d3      	str	r3, [r2, #12]
 8002092:	e7f3      	b.n	800207c <UART_DMAReceiveCplt+0x3e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002094:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8002096:	f7ff fe57 	bl	8001d48 <HAL_UARTEx_RxEventCallback>
 800209a:	e7f4      	b.n	8002086 <UART_DMAReceiveCplt+0x48>

0800209c <UART_Start_Receive_DMA>:
{
 800209c:	b530      	push	{r4, r5, lr}
 800209e:	b083      	sub	sp, #12
 80020a0:	4604      	mov	r4, r0
 80020a2:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 80020a4:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 80020a6:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a8:	2500      	movs	r5, #0
 80020aa:	6405      	str	r5, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80020ac:	2222      	movs	r2, #34	; 0x22
 80020ae:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80020b2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80020b4:	4814      	ldr	r0, [pc, #80]	; (8002108 <UART_Start_Receive_DMA+0x6c>)
 80020b6:	6290      	str	r0, [r2, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80020b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80020ba:	4814      	ldr	r0, [pc, #80]	; (800210c <UART_Start_Receive_DMA+0x70>)
 80020bc:	62d0      	str	r0, [r2, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80020be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80020c0:	4813      	ldr	r0, [pc, #76]	; (8002110 <UART_Start_Receive_DMA+0x74>)
 80020c2:	6310      	str	r0, [r2, #48]	; 0x30
  huart->hdmarx->XferAbortCallback = NULL;
 80020c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80020c6:	6355      	str	r5, [r2, #52]	; 0x34
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80020c8:	6820      	ldr	r0, [r4, #0]
 80020ca:	460a      	mov	r2, r1
 80020cc:	1d01      	adds	r1, r0, #4
 80020ce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80020d0:	f7fe fca2 	bl	8000a18 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 80020d4:	9501      	str	r5, [sp, #4]
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	9201      	str	r2, [sp, #4]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	9201      	str	r2, [sp, #4]
 80020e0:	9a01      	ldr	r2, [sp, #4]
  __HAL_UNLOCK(huart);
 80020e2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020ec:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ee:	6822      	ldr	r2, [r4, #0]
 80020f0:	6953      	ldr	r3, [r2, #20]
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020f8:	6822      	ldr	r2, [r4, #0]
 80020fa:	6953      	ldr	r3, [r2, #20]
 80020fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002100:	6153      	str	r3, [r2, #20]
}
 8002102:	4628      	mov	r0, r5
 8002104:	b003      	add	sp, #12
 8002106:	bd30      	pop	{r4, r5, pc}
 8002108:	0800203f 	.word	0x0800203f
 800210c:	08002025 	.word	0x08002025
 8002110:	08001ce1 	.word	0x08001ce1

08002114 <HAL_UART_Receive_DMA>:
{
 8002114:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8002116:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b20      	cmp	r3, #32
 800211e:	d10d      	bne.n	800213c <HAL_UART_Receive_DMA+0x28>
    if ((pData == NULL) || (Size == 0U))
 8002120:	b171      	cbz	r1, 8002140 <HAL_UART_Receive_DMA+0x2c>
 8002122:	b17a      	cbz	r2, 8002144 <HAL_UART_Receive_DMA+0x30>
    __HAL_LOCK(huart);
 8002124:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002128:	2b01      	cmp	r3, #1
 800212a:	d00d      	beq.n	8002148 <HAL_UART_Receive_DMA+0x34>
 800212c:	2301      	movs	r3, #1
 800212e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002132:	2300      	movs	r3, #0
 8002134:	6303      	str	r3, [r0, #48]	; 0x30
    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002136:	f7ff ffb1 	bl	800209c <UART_Start_Receive_DMA>
 800213a:	e000      	b.n	800213e <HAL_UART_Receive_DMA+0x2a>
    return HAL_BUSY;
 800213c:	2002      	movs	r0, #2
}
 800213e:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 8002140:	2001      	movs	r0, #1
 8002142:	e7fc      	b.n	800213e <HAL_UART_Receive_DMA+0x2a>
 8002144:	2001      	movs	r0, #1
 8002146:	e7fa      	b.n	800213e <HAL_UART_Receive_DMA+0x2a>
    __HAL_LOCK(huart);
 8002148:	2002      	movs	r0, #2
 800214a:	e7f8      	b.n	800213e <HAL_UART_Receive_DMA+0x2a>

0800214c <USART_DMA_Init>:

uint8_t uart_user_message[DMA_RX_BUFFER_SIZE];	/* Buffer received for user access */
uint8_t DMA_RX_Buffer[DMA_RX_BUFFER_SIZE];	/* Local DMA buffer for circular DMA */
HAL_StatusTypeDef UART_STATUS;
void USART_DMA_Init(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma)
{
 800214c:	b510      	push	{r4, lr}
	__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);   // enable idle line interrupt
 800214e:	6802      	ldr	r2, [r0, #0]
 8002150:	68d3      	ldr	r3, [r2, #12]
 8002152:	f043 0310 	orr.w	r3, r3, #16
 8002156:	60d3      	str	r3, [r2, #12]
	__HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);  // enable DMA Tx cplt interrupt
 8002158:	680a      	ldr	r2, [r1, #0]
 800215a:	6813      	ldr	r3, [r2, #0]
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	6013      	str	r3, [r2, #0]
	__HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT); 	// discable half complete interrupt
 8002162:	680a      	ldr	r2, [r1, #0]
 8002164:	6813      	ldr	r3, [r2, #0]
 8002166:	f023 0304 	bic.w	r3, r3, #4
 800216a:	6013      	str	r3, [r2, #0]
	UART_STATUS = HAL_UART_Receive_DMA(huart, DMA_RX_Buffer, DMA_RX_BUFFER_SIZE);
 800216c:	4c04      	ldr	r4, [pc, #16]	; (8002180 <USART_DMA_Init+0x34>)
 800216e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002172:	4621      	mov	r1, r4
 8002174:	f7ff ffce 	bl	8002114 <HAL_UART_Receive_DMA>
 8002178:	f884 0100 	strb.w	r0, [r4, #256]	; 0x100

}
 800217c:	bd10      	pop	{r4, pc}
 800217e:	bf00      	nop
 8002180:	200000b4 	.word	0x200000b4

08002184 <DMA_IrqHandler>:
		DMA_IrqHandler(hdma, huart);
	}
}

void DMA_IrqHandler (DMA_HandleTypeDef *hdma, UART_HandleTypeDef *huart)
{	
 8002184:	b570      	push	{r4, r5, r6, lr}
	uint16_t len;	/* To store UART Messade received len */

	DMA_Base_Registers *regs = (DMA_Base_Registers*)hdma->DmaBaseAddress;
 8002186:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
	
	if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)	/* if the source is TC */
 8002188:	6803      	ldr	r3, [r0, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	f012 0f02 	tst.w	r2, #2
 8002190:	d029      	beq.n	80021e6 <DMA_IrqHandler+0x62>
 8002192:	4604      	mov	r4, r0
	{
		/* Clear the transfer complete flag */
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002194:	4a25      	ldr	r2, [pc, #148]	; (800222c <DMA_IrqHandler+0xa8>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d014      	beq.n	80021c4 <DMA_IrqHandler+0x40>
 800219a:	3214      	adds	r2, #20
 800219c:	4293      	cmp	r3, r2
 800219e:	d023      	beq.n	80021e8 <DMA_IrqHandler+0x64>
 80021a0:	3214      	adds	r2, #20
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d022      	beq.n	80021ec <DMA_IrqHandler+0x68>
 80021a6:	3214      	adds	r2, #20
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d022      	beq.n	80021f2 <DMA_IrqHandler+0x6e>
 80021ac:	3214      	adds	r2, #20
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d022      	beq.n	80021f8 <DMA_IrqHandler+0x74>
 80021b2:	3214      	adds	r2, #20
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d002      	beq.n	80021be <DMA_IrqHandler+0x3a>
 80021b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021bc:	e003      	b.n	80021c6 <DMA_IrqHandler+0x42>
 80021be:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80021c2:	e000      	b.n	80021c6 <DMA_IrqHandler+0x42>
 80021c4:	2202      	movs	r2, #2
 80021c6:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <DMA_IrqHandler+0xac>)
 80021c8:	605a      	str	r2, [r3, #4]

		/* Clear the uart_user_message buffer */
		memset(uart_user_message, 0, DMA_RX_BUFFER_SIZE);
 80021ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ce:	2100      	movs	r1, #0
 80021d0:	4818      	ldr	r0, [pc, #96]	; (8002234 <DMA_IrqHandler+0xb0>)
 80021d2:	f001 f96f 	bl	80034b4 <memset>

		/* Copying the message to uart_user_message buffer	*/
		len = DMA_RX_BUFFER_SIZE - hdma->Instance->CNDTR;
 80021d6:	6823      	ldr	r3, [r4, #0]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	b292      	uxth	r2, r2
 80021dc:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80021e0:	b292      	uxth	r2, r2
		if(len > DMA_RX_BUFFER_SIZE - 1)	return;
 80021e2:	2aff      	cmp	r2, #255	; 0xff
 80021e4:	d90b      	bls.n	80021fe <DMA_IrqHandler+0x7a>
        regs->IFCR = 0x3FU << hdma->ChannelIndex; 			/* Clear all interrupts */
		hdma->Instance->CMAR = (uint32_t)DMA_RX_Buffer;   	/* Set memory address for DMA again */
        hdma->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    		/* Set number of bytes to receive */
        hdma->Instance->CCR |= DMA_CCR_EN;            		/* Start DMA transfer */
	}
}
 80021e6:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80021e8:	2220      	movs	r2, #32
 80021ea:	e7ec      	b.n	80021c6 <DMA_IrqHandler+0x42>
 80021ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021f0:	e7e9      	b.n	80021c6 <DMA_IrqHandler+0x42>
 80021f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021f6:	e7e6      	b.n	80021c6 <DMA_IrqHandler+0x42>
 80021f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021fc:	e7e3      	b.n	80021c6 <DMA_IrqHandler+0x42>
		memcpy(uart_user_message, DMA_RX_Buffer, len);
 80021fe:	4e0e      	ldr	r6, [pc, #56]	; (8002238 <DMA_IrqHandler+0xb4>)
 8002200:	4631      	mov	r1, r6
 8002202:	f506 7082 	add.w	r0, r6, #260	; 0x104
 8002206:	f001 f947 	bl	8003498 <memcpy>
        regs->IFCR = 0x3FU << hdma->ChannelIndex; 			/* Clear all interrupts */
 800220a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800220c:	233f      	movs	r3, #63	; 0x3f
 800220e:	4093      	lsls	r3, r2
 8002210:	60ab      	str	r3, [r5, #8]
		hdma->Instance->CMAR = (uint32_t)DMA_RX_Buffer;   	/* Set memory address for DMA again */
 8002212:	6823      	ldr	r3, [r4, #0]
 8002214:	60de      	str	r6, [r3, #12]
        hdma->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    		/* Set number of bytes to receive */
 8002216:	6823      	ldr	r3, [r4, #0]
 8002218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800221c:	605a      	str	r2, [r3, #4]
        hdma->Instance->CCR |= DMA_CCR_EN;            		/* Start DMA transfer */
 800221e:	6822      	ldr	r2, [r4, #0]
 8002220:	6813      	ldr	r3, [r2, #0]
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	e7dd      	b.n	80021e6 <DMA_IrqHandler+0x62>
 800222a:	bf00      	nop
 800222c:	40020008 	.word	0x40020008
 8002230:	40020000 	.word	0x40020000
 8002234:	200001b8 	.word	0x200001b8
 8002238:	200000b4 	.word	0x200000b4

0800223c <USART_IrqHandler>:
{
 800223c:	4603      	mov	r3, r0
 800223e:	4608      	mov	r0, r1
	if (huart->Instance->SR & UART_FLAG_IDLE)           /* if Idle flag is set */
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	6811      	ldr	r1, [r2, #0]
 8002244:	f011 0f10 	tst.w	r1, #16
 8002248:	d100      	bne.n	800224c <USART_IrqHandler+0x10>
 800224a:	4770      	bx	lr
{
 800224c:	b500      	push	{lr}
 800224e:	b083      	sub	sp, #12
        tmp = huart->Instance->SR;                      /* Read status register */
 8002250:	6811      	ldr	r1, [r2, #0]
 8002252:	9101      	str	r1, [sp, #4]
        tmp = huart->Instance->DR;                      /* Read data register */
 8002254:	6852      	ldr	r2, [r2, #4]
 8002256:	9201      	str	r2, [sp, #4]
    	__HAL_DMA_DISABLE(hdma);       					/* Disabling DMA will force transfer complete interrupt if enabled */
 8002258:	6801      	ldr	r1, [r0, #0]
 800225a:	680a      	ldr	r2, [r1, #0]
 800225c:	f022 0201 	bic.w	r2, r2, #1
 8002260:	600a      	str	r2, [r1, #0]
		DMA_IrqHandler(hdma, huart);
 8002262:	4619      	mov	r1, r3
 8002264:	f7ff ff8e 	bl	8002184 <DMA_IrqHandler>
}
 8002268:	b003      	add	sp, #12
 800226a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002270 <interfaceInit>:
int auxiliar = 0;
uint8_t vet_aux[128];
/* Functions */

void interfaceInit(void)
{
 8002270:	b508      	push	{r3, lr}
  USART_DMA_Init(&huart3, &hdma_usart3_rx);
 8002272:	4913      	ldr	r1, [pc, #76]	; (80022c0 <interfaceInit+0x50>)
 8002274:	4813      	ldr	r0, [pc, #76]	; (80022c4 <interfaceInit+0x54>)
 8002276:	f7ff ff69 	bl	800214c <USART_DMA_Init>
  USART_DMA_Init(&huart2, &hdma_usart2_rx);
 800227a:	4913      	ldr	r1, [pc, #76]	; (80022c8 <interfaceInit+0x58>)
 800227c:	4813      	ldr	r0, [pc, #76]	; (80022cc <interfaceInit+0x5c>)
 800227e:	f7ff ff65 	bl	800214c <USART_DMA_Init>
  /* can data vector init */
  for(uint16_t i = 0; i < CAN_IDS_NUMBER; i++){
 8002282:	2300      	movs	r3, #0
 8002284:	e00a      	b.n	800229c <interfaceInit+0x2c>
    can_vector[i].word_0 = 0;
 8002286:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <interfaceInit+0x60>)
 8002288:	2100      	movs	r1, #0
 800228a:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    can_vector[i].word_1 = 0;
 800228e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002292:	8051      	strh	r1, [r2, #2]
    can_vector[i].word_2 = 0;
 8002294:	8091      	strh	r1, [r2, #4]
    can_vector[i].word_3 = 0;
 8002296:	80d1      	strh	r1, [r2, #6]
  for(uint16_t i = 0; i < CAN_IDS_NUMBER; i++){
 8002298:	3301      	adds	r3, #1
 800229a:	b29b      	uxth	r3, r3
 800229c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80022a0:	d3f1      	bcc.n	8002286 <interfaceInit+0x16>

  /* Requesting real time */
  //realClockRequest(); /* 2s Delay */

  /* Nextion Init */
  nexInit();
 80022a2:	f000 faf9 	bl	8002898 <nexInit>
  nextion_init_can();
 80022a6:	f000 f9a5 	bl	80025f4 <nextion_init_can>
  /* Global timer variables init */
  packTimer.previous = HAL_GetTick();
 80022aa:	f7fd ff99 	bl	80001e0 <HAL_GetTick>
 80022ae:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <interfaceInit+0x60>)
 80022b0:	f8c3 0b40 	str.w	r0, [r3, #2880]	; 0xb40
  packTimer.interval = 1000;
 80022b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022b8:	f8a3 2b44 	strh.w	r2, [r3, #2884]	; 0xb44
}
 80022bc:	bd08      	pop	{r3, pc}
 80022be:	bf00      	nop
 80022c0:	200010b4 	.word	0x200010b4
 80022c4:	2000102c 	.word	0x2000102c
 80022c8:	20001070 	.word	0x20001070
 80022cc:	20000fe8 	.word	0x20000fe8
 80022d0:	200002b8 	.word	0x200002b8

080022d4 <canMessageReceived>:
	va_end(argList);
}

void canMessageReceived(uint16_t id, uint8_t* data)
{
	if(id > CAN_IDS_NUMBER - 1)	return;
 80022d4:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
 80022d8:	d20b      	bcs.n	80022f2 <canMessageReceived+0x1e>
  uint16_t* data_word = (uint16_t*)data;
  can_vector[id].word_0 = data_word[0];
 80022da:	880a      	ldrh	r2, [r1, #0]
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <canMessageReceived+0x20>)
 80022de:	f823 2030 	strh.w	r2, [r3, r0, lsl #3]
  can_vector[id].word_1 = data_word[1];
 80022e2:	884a      	ldrh	r2, [r1, #2]
 80022e4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80022e8:	8042      	strh	r2, [r0, #2]
  can_vector[id].word_2 = data_word[2];
 80022ea:	888b      	ldrh	r3, [r1, #4]
 80022ec:	8083      	strh	r3, [r0, #4]
  can_vector[id].word_3 = data_word[3];
 80022ee:	88cb      	ldrh	r3, [r1, #6]
 80022f0:	80c3      	strh	r3, [r0, #6]
}
 80022f2:	4770      	bx	lr
 80022f4:	200002b8 	.word	0x200002b8

080022f8 <blinkLed3>:
{
	HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
} /* Debug Led 2 */

void blinkLed3(void)
{
 80022f8:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 80022fa:	2110      	movs	r1, #16
 80022fc:	4801      	ldr	r0, [pc, #4]	; (8002304 <blinkLed3+0xc>)
 80022fe:	f7fe fdf4 	bl	8000eea <HAL_GPIO_TogglePin>
} /* Debug Led 3 */
 8002302:	bd08      	pop	{r3, pc}
 8002304:	40010800 	.word	0x40010800

08002308 <timerAtualization>:

void timerAtualization(void)
{
 8002308:	b508      	push	{r3, lr}
  actualTimer = HAL_GetTick();
 800230a:	f7fd ff69 	bl	80001e0 <HAL_GetTick>
 800230e:	4b02      	ldr	r3, [pc, #8]	; (8002318 <timerAtualization+0x10>)
 8002310:	f8c3 0b48 	str.w	r0, [r3, #2888]	; 0xb48
}
 8002314:	bd08      	pop	{r3, pc}
 8002316:	bf00      	nop
 8002318:	200002b8 	.word	0x200002b8

0800231c <timer_wait_ms>:
  // if(auxiliar == 100) auxiliar = 0;
}

//timer_handler - BMS

uint8_t timer_wait_ms(uint32_t timer_start, uint32_t delay) {
 800231c:	b538      	push	{r3, r4, r5, lr}
 800231e:	4605      	mov	r5, r0
 8002320:	460c      	mov	r4, r1
    const uint32_t current_time = HAL_GetTick();
 8002322:	f7fd ff5d 	bl	80001e0 <HAL_GetTick>
    if ((current_time - timer_start) >= delay) {
 8002326:	1b40      	subs	r0, r0, r5
 8002328:	42a0      	cmp	r0, r4
 800232a:	d201      	bcs.n	8002330 <timer_wait_ms+0x14>
        return 1;
    }
    return 0;
 800232c:	2000      	movs	r0, #0
}
 800232e:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 8002330:	2001      	movs	r0, #1
 8002332:	e7fc      	b.n	800232e <timer_wait_ms+0x12>

08002334 <timer_restart>:
void timer_restart(uint32_t* timer_to_restart) {
 8002334:	b510      	push	{r4, lr}
 8002336:	4604      	mov	r4, r0
    *timer_to_restart = HAL_GetTick();
 8002338:	f7fd ff52 	bl	80001e0 <HAL_GetTick>
 800233c:	6020      	str	r0, [r4, #0]
}
 800233e:	bd10      	pop	{r4, pc}

08002340 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8002340:	b508      	push	{r3, lr}
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002342:	4824      	ldr	r0, [pc, #144]	; (80023d4 <MX_CAN_Init+0x94>)
 8002344:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <MX_CAN_Init+0x98>)
 8002346:	6003      	str	r3, [r0, #0]
  hcan.Init.Prescaler = 9;
 8002348:	2309      	movs	r3, #9
 800234a:	6043      	str	r3, [r0, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800234c:	2300      	movs	r3, #0
 800234e:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002350:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002352:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8002356:	6102      	str	r2, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002358:	6143      	str	r3, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800235a:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800235c:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800235e:	7683      	strb	r3, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002360:	76c3      	strb	r3, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002362:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002364:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002366:	f7fd ff55 	bl	8000214 <HAL_CAN_Init>
 800236a:	bb30      	cbnz	r0, 80023ba <MX_CAN_Init+0x7a>
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CAN_Init 2 */
	sFilterConfig.FilterBank = 0;
 800236c:	4819      	ldr	r0, [pc, #100]	; (80023d4 <MX_CAN_Init+0x94>)
 800236e:	2300      	movs	r3, #0
 8002370:	63c3      	str	r3, [r0, #60]	; 0x3c
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002372:	6403      	str	r3, [r0, #64]	; 0x40
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002374:	2201      	movs	r2, #1
 8002376:	6442      	str	r2, [r0, #68]	; 0x44
	sFilterConfig.FilterIdHigh = 0x0000;
 8002378:	6283      	str	r3, [r0, #40]	; 0x28
	sFilterConfig.FilterIdLow = 0x0000;
 800237a:	62c3      	str	r3, [r0, #44]	; 0x2c
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800237c:	6303      	str	r3, [r0, #48]	; 0x30
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800237e:	6343      	str	r3, [r0, #52]	; 0x34
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002380:	6383      	str	r3, [r0, #56]	; 0x38
	sFilterConfig.FilterActivation = ENABLE;
 8002382:	6482      	str	r2, [r0, #72]	; 0x48
	sFilterConfig.SlaveStartFilterBank = 14;
 8002384:	230e      	movs	r3, #14
 8002386:	64c3      	str	r3, [r0, #76]	; 0x4c
	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 8002388:	f100 0128 	add.w	r1, r0, #40	; 0x28
 800238c:	f7fd ffe8 	bl	8000360 <HAL_CAN_ConfigFilter>
 8002390:	b9b0      	cbnz	r0, 80023c0 <MX_CAN_Init+0x80>
		/* Filter configuration Error */
		Error_Handler();
	}

	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8002392:	4810      	ldr	r0, [pc, #64]	; (80023d4 <MX_CAN_Init+0x94>)
 8002394:	f7fe f86a 	bl	800046c <HAL_CAN_Start>
 8002398:	b9a8      	cbnz	r0, 80023c6 <MX_CAN_Init+0x86>
		/* Start Error */
		Error_Handler();
	}
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 800239a:	2102      	movs	r1, #2
 800239c:	480d      	ldr	r0, [pc, #52]	; (80023d4 <MX_CAN_Init+0x94>)
 800239e:	f7fe f93e 	bl	800061e <HAL_CAN_ActivateNotification>
 80023a2:	b998      	cbnz	r0, 80023cc <MX_CAN_Init+0x8c>
			!= HAL_OK) {
		/* Notification Error */
		Error_Handler();
	}

	TxHeader.ExtId = 0x01;
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <MX_CAN_Init+0x94>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	655a      	str	r2, [r3, #84]	; 0x54
	TxHeader.RTR = CAN_RTR_DATA;
 80023aa:	2200      	movs	r2, #0
 80023ac:	65da      	str	r2, [r3, #92]	; 0x5c
	TxHeader.IDE = CAN_ID_STD;
 80023ae:	659a      	str	r2, [r3, #88]	; 0x58
	TxHeader.DLC = 8;
 80023b0:	2108      	movs	r1, #8
 80023b2:	6619      	str	r1, [r3, #96]	; 0x60
	TxHeader.TransmitGlobalTime = DISABLE;
 80023b4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

  /* USER CODE END CAN_Init 2 */

}
 80023b8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80023ba:	f000 fa21 	bl	8002800 <Error_Handler>
 80023be:	e7d5      	b.n	800236c <MX_CAN_Init+0x2c>
		Error_Handler();
 80023c0:	f000 fa1e 	bl	8002800 <Error_Handler>
 80023c4:	e7e5      	b.n	8002392 <MX_CAN_Init+0x52>
		Error_Handler();
 80023c6:	f000 fa1b 	bl	8002800 <Error_Handler>
 80023ca:	e7e6      	b.n	800239a <MX_CAN_Init+0x5a>
		Error_Handler();
 80023cc:	f000 fa18 	bl	8002800 <Error_Handler>
 80023d0:	e7e8      	b.n	80023a4 <MX_CAN_Init+0x64>
 80023d2:	bf00      	nop
 80023d4:	20000e88 	.word	0x20000e88
 80023d8:	40006400 	.word	0x40006400

080023dc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80023dc:	b510      	push	{r4, lr}
 80023de:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	2300      	movs	r3, #0
 80023e2:	9302      	str	r3, [sp, #8]
 80023e4:	9303      	str	r3, [sp, #12]
 80023e6:	9304      	str	r3, [sp, #16]
 80023e8:	9305      	str	r3, [sp, #20]
  if(canHandle->Instance==CAN1)
 80023ea:	6802      	ldr	r2, [r0, #0]
 80023ec:	4b22      	ldr	r3, [pc, #136]	; (8002478 <HAL_CAN_MspInit+0x9c>)
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d001      	beq.n	80023f6 <HAL_CAN_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80023f2:	b006      	add	sp, #24
 80023f4:	bd10      	pop	{r4, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 80023f6:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 80023fa:	69da      	ldr	r2, [r3, #28]
 80023fc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002400:	61da      	str	r2, [r3, #28]
 8002402:	69da      	ldr	r2, [r3, #28]
 8002404:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8002408:	9200      	str	r2, [sp, #0]
 800240a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800240c:	699a      	ldr	r2, [r3, #24]
 800240e:	f042 0208 	orr.w	r2, r2, #8
 8002412:	619a      	str	r2, [r3, #24]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	9301      	str	r3, [sp, #4]
 800241c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800241e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002422:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002424:	4c15      	ldr	r4, [pc, #84]	; (800247c <HAL_CAN_MspInit+0xa0>)
 8002426:	a902      	add	r1, sp, #8
 8002428:	4620      	mov	r0, r4
 800242a:	f7fe fc3f 	bl	8000cac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800242e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002432:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002434:	2302      	movs	r3, #2
 8002436:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002438:	2303      	movs	r3, #3
 800243a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243c:	a902      	add	r1, sp, #8
 800243e:	4620      	mov	r0, r4
 8002440:	f7fe fc34 	bl	8000cac <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_CAN1_2();
 8002444:	4a0e      	ldr	r2, [pc, #56]	; (8002480 <HAL_CAN_MspInit+0xa4>)
 8002446:	6853      	ldr	r3, [r2, #4]
 8002448:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800244c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002454:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	4611      	mov	r1, r2
 800245a:	2014      	movs	r0, #20
 800245c:	f7fe fa36 	bl	80008cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002460:	2014      	movs	r0, #20
 8002462:	f7fe fa6b 	bl	800093c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002466:	2200      	movs	r2, #0
 8002468:	4611      	mov	r1, r2
 800246a:	2015      	movs	r0, #21
 800246c:	f7fe fa2e 	bl	80008cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002470:	2015      	movs	r0, #21
 8002472:	f7fe fa63 	bl	800093c <HAL_NVIC_EnableIRQ>
}
 8002476:	e7bc      	b.n	80023f2 <HAL_CAN_MspInit+0x16>
 8002478:	40006400 	.word	0x40006400
 800247c:	40010c00 	.word	0x40010c00
 8002480:	40010000 	.word	0x40010000

08002484 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002484:	b500      	push	{lr}
 8002486:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002488:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <MX_DMA_Init+0x40>)
 800248a:	695a      	ldr	r2, [r3, #20]
 800248c:	f042 0201 	orr.w	r2, r2, #1
 8002490:	615a      	str	r2, [r3, #20]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	9301      	str	r3, [sp, #4]
 800249a:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800249c:	2200      	movs	r2, #0
 800249e:	4611      	mov	r1, r2
 80024a0:	200d      	movs	r0, #13
 80024a2:	f7fe fa13 	bl	80008cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80024a6:	200d      	movs	r0, #13
 80024a8:	f7fe fa48 	bl	800093c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80024ac:	2200      	movs	r2, #0
 80024ae:	4611      	mov	r1, r2
 80024b0:	2010      	movs	r0, #16
 80024b2:	f7fe fa0b 	bl	80008cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80024b6:	2010      	movs	r0, #16
 80024b8:	f7fe fa40 	bl	800093c <HAL_NVIC_EnableIRQ>

}
 80024bc:	b003      	add	sp, #12
 80024be:	f85d fb04 	ldr.w	pc, [sp], #4
 80024c2:	bf00      	nop
 80024c4:	40021000 	.word	0x40021000

080024c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80024c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024cc:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ce:	2400      	movs	r4, #0
 80024d0:	9404      	str	r4, [sp, #16]
 80024d2:	9405      	str	r4, [sp, #20]
 80024d4:	9406      	str	r4, [sp, #24]
 80024d6:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d8:	4b30      	ldr	r3, [pc, #192]	; (800259c <MX_GPIO_Init+0xd4>)
 80024da:	699a      	ldr	r2, [r3, #24]
 80024dc:	f042 0210 	orr.w	r2, r2, #16
 80024e0:	619a      	str	r2, [r3, #24]
 80024e2:	699a      	ldr	r2, [r3, #24]
 80024e4:	f002 0210 	and.w	r2, r2, #16
 80024e8:	9200      	str	r2, [sp, #0]
 80024ea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ec:	699a      	ldr	r2, [r3, #24]
 80024ee:	f042 0220 	orr.w	r2, r2, #32
 80024f2:	619a      	str	r2, [r3, #24]
 80024f4:	699a      	ldr	r2, [r3, #24]
 80024f6:	f002 0220 	and.w	r2, r2, #32
 80024fa:	9201      	str	r2, [sp, #4]
 80024fc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fe:	699a      	ldr	r2, [r3, #24]
 8002500:	f042 0204 	orr.w	r2, r2, #4
 8002504:	619a      	str	r2, [r3, #24]
 8002506:	699a      	ldr	r2, [r3, #24]
 8002508:	f002 0204 	and.w	r2, r2, #4
 800250c:	9202      	str	r2, [sp, #8]
 800250e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	f042 0208 	orr.w	r2, r2, #8
 8002516:	619a      	str	r2, [r3, #24]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	9303      	str	r3, [sp, #12]
 8002520:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002522:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80025a0 <MX_GPIO_Init+0xd8>
 8002526:	4622      	mov	r2, r4
 8002528:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800252c:	4648      	mov	r0, r9
 800252e:	f7fe fcd6 	bl	8000ede <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8002532:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80025a4 <MX_GPIO_Init+0xdc>
 8002536:	4622      	mov	r2, r4
 8002538:	2113      	movs	r1, #19
 800253a:	4640      	mov	r0, r8
 800253c:	f7fe fccf 	bl	8000ede <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SSEL_XBee_GPIO_Port, SSEL_XBee_Pin, GPIO_PIN_RESET);
 8002540:	4e19      	ldr	r6, [pc, #100]	; (80025a8 <MX_GPIO_Init+0xe0>)
 8002542:	4622      	mov	r2, r4
 8002544:	2101      	movs	r1, #1
 8002546:	4630      	mov	r0, r6
 8002548:	f7fe fcc9 	bl	8000ede <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800254c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002550:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002552:	2501      	movs	r5, #1
 8002554:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002558:	2702      	movs	r7, #2
 800255a:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800255c:	a904      	add	r1, sp, #16
 800255e:	4648      	mov	r0, r9
 8002560:	f7fe fba4 	bl	8000cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin;
 8002564:	2313      	movs	r3, #19
 8002566:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002568:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256c:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256e:	a904      	add	r1, sp, #16
 8002570:	4640      	mov	r0, r8
 8002572:	f7fe fb9b 	bl	8000cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SSEL_XBee_Pin;
 8002576:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002578:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257c:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(SSEL_XBee_GPIO_Port, &GPIO_InitStruct);
 800257e:	a904      	add	r1, sp, #16
 8002580:	4630      	mov	r0, r6
 8002582:	f7fe fb93 	bl	8000cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002586:	2340      	movs	r3, #64	; 0x40
 8002588:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800258a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800258c:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258e:	a904      	add	r1, sp, #16
 8002590:	4630      	mov	r0, r6
 8002592:	f7fe fb8b 	bl	8000cac <HAL_GPIO_Init>

}
 8002596:	b009      	add	sp, #36	; 0x24
 8002598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800259c:	40021000 	.word	0x40021000
 80025a0:	40011000 	.word	0x40011000
 80025a4:	40010800 	.word	0x40010800
 80025a8:	40010c00 	.word	0x40010c00

080025ac <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80025ac:	b508      	push	{r3, lr}
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80025ae:	4807      	ldr	r0, [pc, #28]	; (80025cc <MX_IWDG_Init+0x20>)
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <MX_IWDG_Init+0x24>)
 80025b2:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80025b4:	2304      	movs	r3, #4
 80025b6:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Reload = 700;
 80025b8:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80025bc:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80025be:	f7fe fc9d 	bl	8000efc <HAL_IWDG_Init>
 80025c2:	b900      	cbnz	r0, 80025c6 <MX_IWDG_Init+0x1a>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80025c4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80025c6:	f000 f91b 	bl	8002800 <Error_Handler>
}
 80025ca:	e7fb      	b.n	80025c4 <MX_IWDG_Init+0x18>
 80025cc:	20000f20 	.word	0x20000f20
 80025d0:	40003000 	.word	0x40003000

080025d4 <uart3MessageReceived>:

void uart3MessageReceived(void) {

//	blinkLed3();
	/* If the message is to change the nextion page */
	if (uart_user_message[0] == DISPLAY_CURRENT_PAGE_COMMAND) {
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <uart3MessageReceived+0x18>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b66      	cmp	r3, #102	; 0x66
 80025da:	d000      	beq.n	80025de <uart3MessageReceived+0xa>
		pageMessageReceived = 1;
		actual_page = (NextionPage_e) uart_user_message[1];
	}
}
 80025dc:	4770      	bx	lr
		pageMessageReceived = 1;
 80025de:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <uart3MessageReceived+0x1c>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	701a      	strb	r2, [r3, #0]
		actual_page = (NextionPage_e) uart_user_message[1];
 80025e4:	4a01      	ldr	r2, [pc, #4]	; (80025ec <uart3MessageReceived+0x18>)
 80025e6:	7852      	ldrb	r2, [r2, #1]
 80025e8:	705a      	strb	r2, [r3, #1]
}
 80025ea:	e7f7      	b.n	80025dc <uart3MessageReceived+0x8>
 80025ec:	200001b8 	.word	0x200001b8
 80025f0:	20000f2c 	.word	0x20000f2c

080025f4 <nextion_init_can>:
void nextion_init_can() {
 80025f4:	b508      	push	{r3, lr}
	pageMessageReceived = 0;
 80025f6:	480f      	ldr	r0, [pc, #60]	; (8002634 <nextion_init_can+0x40>)
 80025f8:	2300      	movs	r3, #0
 80025fa:	f800 3b04 	strb.w	r3, [r0], #4
	timer_restart(&pageTimeout);
 80025fe:	f7ff fe99 	bl	8002334 <timer_restart>

	while (!pageMessageReceived) {
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <nextion_init_can+0x40>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	b973      	cbnz	r3, 8002626 <nextion_init_can+0x32>
		sendCommand("sendme");
 8002608:	480b      	ldr	r0, [pc, #44]	; (8002638 <nextion_init_can+0x44>)
 800260a:	f000 f8fb 	bl	8002804 <sendCommand>
		if (timer_wait_ms(pageTimeout, 300)) {
 800260e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002612:	4b08      	ldr	r3, [pc, #32]	; (8002634 <nextion_init_can+0x40>)
 8002614:	6858      	ldr	r0, [r3, #4]
 8002616:	f7ff fe81 	bl	800231c <timer_wait_ms>
 800261a:	2800      	cmp	r0, #0
 800261c:	d0f1      	beq.n	8002602 <nextion_init_can+0xe>
			pageMessageReceived = 0;
 800261e:	4b05      	ldr	r3, [pc, #20]	; (8002634 <nextion_init_can+0x40>)
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
 8002624:	e7ed      	b.n	8002602 <nextion_init_can+0xe>
		}
	}

	CAN_STATE = 0;
 8002626:	4b03      	ldr	r3, [pc, #12]	; (8002634 <nextion_init_can+0x40>)
 8002628:	2200      	movs	r2, #0
 800262a:	721a      	strb	r2, [r3, #8]
	PAGE = actual_page;
 800262c:	785a      	ldrb	r2, [r3, #1]
 800262e:	725a      	strb	r2, [r3, #9]
}
 8002630:	bd08      	pop	{r3, pc}
 8002632:	bf00      	nop
 8002634:	20000f2c 	.word	0x20000f2c
 8002638:	08003e0c 	.word	0x08003e0c

0800263c <nextionLoop>:
void nextionLoop(void) {
 800263c:	b510      	push	{r4, lr}
	if (timer_wait_ms(updateTimer, 50)) {
 800263e:	2132      	movs	r1, #50	; 0x32
 8002640:	4b42      	ldr	r3, [pc, #264]	; (800274c <nextionLoop+0x110>)
 8002642:	68d8      	ldr	r0, [r3, #12]
 8002644:	f7ff fe6a 	bl	800231c <timer_wait_ms>
 8002648:	2800      	cmp	r0, #0
 800264a:	d030      	beq.n	80026ae <nextionLoop+0x72>

		pageMessageReceived = 0;
 800264c:	483f      	ldr	r0, [pc, #252]	; (800274c <nextionLoop+0x110>)
 800264e:	2300      	movs	r3, #0
 8002650:	f800 3b04 	strb.w	r3, [r0], #4
		timer_restart(&pageTimeout);
 8002654:	f7ff fe6e 	bl	8002334 <timer_restart>
		sendCommand("sendme");
 8002658:	483d      	ldr	r0, [pc, #244]	; (8002750 <nextionLoop+0x114>)
 800265a:	f000 f8d3 	bl	8002804 <sendCommand>

		while (!pageMessageReceived) {
 800265e:	4b3b      	ldr	r3, [pc, #236]	; (800274c <nextionLoop+0x110>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	b953      	cbnz	r3, 800267a <nextionLoop+0x3e>
			if (timer_wait_ms(pageTimeout, 50)) {
 8002664:	2132      	movs	r1, #50	; 0x32
 8002666:	4b39      	ldr	r3, [pc, #228]	; (800274c <nextionLoop+0x110>)
 8002668:	6858      	ldr	r0, [r3, #4]
 800266a:	f7ff fe57 	bl	800231c <timer_wait_ms>
 800266e:	2800      	cmp	r0, #0
 8002670:	d0f5      	beq.n	800265e <nextionLoop+0x22>
				pageMessageReceived = 0;
 8002672:	4b36      	ldr	r3, [pc, #216]	; (800274c <nextionLoop+0x110>)
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
				return;
 8002678:	e01c      	b.n	80026b4 <nextionLoop+0x78>
			}
		}

		if (actual_page != PAGE) {
 800267a:	4b34      	ldr	r3, [pc, #208]	; (800274c <nextionLoop+0x110>)
 800267c:	785a      	ldrb	r2, [r3, #1]
 800267e:	7a58      	ldrb	r0, [r3, #9]
 8002680:	4282      	cmp	r2, r0
 8002682:	d118      	bne.n	80026b6 <nextionLoop+0x7a>
			NexPageShow(PAGE);
		}

		if (BOTAO_STATE == 0 && last_state == 0) {
 8002684:	2140      	movs	r1, #64	; 0x40
 8002686:	4833      	ldr	r0, [pc, #204]	; (8002754 <nextionLoop+0x118>)
 8002688:	f7fe fc22 	bl	8000ed0 <HAL_GPIO_ReadPin>
 800268c:	b9d0      	cbnz	r0, 80026c4 <nextionLoop+0x88>
 800268e:	4b2f      	ldr	r3, [pc, #188]	; (800274c <nextionLoop+0x110>)
 8002690:	7c1b      	ldrb	r3, [r3, #16]
 8002692:	b9bb      	cbnz	r3, 80026c4 <nextionLoop+0x88>
			last_state++;
 8002694:	4a2d      	ldr	r2, [pc, #180]	; (800274c <nextionLoop+0x110>)
 8002696:	3301      	adds	r3, #1
 8002698:	7413      	strb	r3, [r2, #16]
			if (PAGE == PAGE3)
 800269a:	7a53      	ldrb	r3, [r2, #9]
 800269c:	2b03      	cmp	r3, #3
 800269e:	d00d      	beq.n	80026bc <nextionLoop+0x80>
				PAGE = PAGE0;
			else
				PAGE++;
 80026a0:	3301      	adds	r3, #1
 80026a2:	4a2a      	ldr	r2, [pc, #168]	; (800274c <nextionLoop+0x110>)
 80026a4:	7253      	strb	r3, [r2, #9]
		} else if (BOTAO_STATE != 0 && last_state != 0)
			last_state = 0;

		switch (actual_page) {
 80026a6:	4b29      	ldr	r3, [pc, #164]	; (800274c <nextionLoop+0x110>)
 80026a8:	785b      	ldrb	r3, [r3, #1]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d018      	beq.n	80026e0 <nextionLoop+0xa4>
		case PAGE4:

			break;
		}
	}
	timer_restart(&updateTimer);
 80026ae:	482a      	ldr	r0, [pc, #168]	; (8002758 <nextionLoop+0x11c>)
 80026b0:	f7ff fe40 	bl	8002334 <timer_restart>
}
 80026b4:	bd10      	pop	{r4, pc}
			NexPageShow(PAGE);
 80026b6:	f000 f8fd 	bl	80028b4 <NexPageShow>
 80026ba:	e7e3      	b.n	8002684 <nextionLoop+0x48>
				PAGE = PAGE0;
 80026bc:	4613      	mov	r3, r2
 80026be:	2200      	movs	r2, #0
 80026c0:	725a      	strb	r2, [r3, #9]
 80026c2:	e7f0      	b.n	80026a6 <nextionLoop+0x6a>
		} else if (BOTAO_STATE != 0 && last_state != 0)
 80026c4:	2140      	movs	r1, #64	; 0x40
 80026c6:	4823      	ldr	r0, [pc, #140]	; (8002754 <nextionLoop+0x118>)
 80026c8:	f7fe fc02 	bl	8000ed0 <HAL_GPIO_ReadPin>
 80026cc:	2800      	cmp	r0, #0
 80026ce:	d0ea      	beq.n	80026a6 <nextionLoop+0x6a>
 80026d0:	4b1e      	ldr	r3, [pc, #120]	; (800274c <nextionLoop+0x110>)
 80026d2:	7c1b      	ldrb	r3, [r3, #16]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0e6      	beq.n	80026a6 <nextionLoop+0x6a>
			last_state = 0;
 80026d8:	4b1c      	ldr	r3, [pc, #112]	; (800274c <nextionLoop+0x110>)
 80026da:	2200      	movs	r2, #0
 80026dc:	741a      	strb	r2, [r3, #16]
 80026de:	e7e2      	b.n	80026a6 <nextionLoop+0x6a>
            if (CAN_STATE)
 80026e0:	4b1a      	ldr	r3, [pc, #104]	; (800274c <nextionLoop+0x110>)
 80026e2:	7a1b      	ldrb	r3, [r3, #8]
 80026e4:	b943      	cbnz	r3, 80026f8 <nextionLoop+0xbc>
			NexVariableSetValue(1, !CAN_STATE);
 80026e6:	4b19      	ldr	r3, [pc, #100]	; (800274c <nextionLoop+0x110>)
 80026e8:	7a19      	ldrb	r1, [r3, #8]
 80026ea:	fab1 f181 	clz	r1, r1
 80026ee:	0949      	lsrs	r1, r1, #5
 80026f0:	2001      	movs	r0, #1
 80026f2:	f000 f96b 	bl	80029cc <NexVariableSetValue>
			break;
 80026f6:	e7da      	b.n	80026ae <nextionLoop+0x72>
			NexNumberSetValue(0, VELOCIDADE);
 80026f8:	4c18      	ldr	r4, [pc, #96]	; (800275c <nextionLoop+0x120>)
 80026fa:	7821      	ldrb	r1, [r4, #0]
 80026fc:	2000      	movs	r0, #0
 80026fe:	f000 f91d 	bl	800293c <NexNumberSetValue>
			NexNumberSetValue(1, TORQUE);
 8002702:	8861      	ldrh	r1, [r4, #2]
 8002704:	2001      	movs	r0, #1
 8002706:	f000 f919 	bl	800293c <NexNumberSetValue>
			NexNumberSetValue(2, CARGA);
 800270a:	7921      	ldrb	r1, [r4, #4]
 800270c:	2002      	movs	r0, #2
 800270e:	f000 f915 	bl	800293c <NexNumberSetValue>
			NexXfloatSetValue(0, TENSAO);
 8002712:	88e1      	ldrh	r1, [r4, #6]
 8002714:	2000      	movs	r0, #0
 8002716:	f000 f929 	bl	800296c <NexXfloatSetValue>
			NexXfloatSetValue(1, HODOM);
 800271a:	8921      	ldrh	r1, [r4, #8]
 800271c:	2001      	movs	r0, #1
 800271e:	f000 f925 	bl	800296c <NexXfloatSetValue>
			NexXfloatSetValue(2, TEMPERATURA);
 8002722:	8961      	ldrh	r1, [r4, #10]
 8002724:	2002      	movs	r0, #2
 8002726:	f000 f921 	bl	800296c <NexXfloatSetValue>
			NexTextSetText(0, MODO);
 800272a:	f104 010c 	add.w	r1, r4, #12
 800272e:	2000      	movs	r0, #0
 8002730:	f000 f8d6 	bl	80028e0 <NexTextSetText>
			NexTextSetText(1, BRAKE);
 8002734:	f104 0118 	add.w	r1, r4, #24
 8002738:	2001      	movs	r0, #1
 800273a:	f000 f8d1 	bl	80028e0 <NexTextSetText>
			NexPictureSetPic(1, 50 + FLAG_ERRO);
 800273e:	4b03      	ldr	r3, [pc, #12]	; (800274c <nextionLoop+0x110>)
 8002740:	7c59      	ldrb	r1, [r3, #17]
 8002742:	3132      	adds	r1, #50	; 0x32
 8002744:	2001      	movs	r0, #1
 8002746:	f000 f929 	bl	800299c <NexPictureSetPic>
 800274a:	e7cc      	b.n	80026e6 <nextionLoop+0xaa>
 800274c:	20000f2c 	.word	0x20000f2c
 8002750:	08003e0c 	.word	0x08003e0c
 8002754:	40010c00 	.word	0x40010c00
 8002758:	20000f38 	.word	0x20000f38
 800275c:	20000008 	.word	0x20000008

08002760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002760:	b530      	push	{r4, r5, lr}
 8002762:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002764:	2228      	movs	r2, #40	; 0x28
 8002766:	2100      	movs	r1, #0
 8002768:	a806      	add	r0, sp, #24
 800276a:	f000 fea3 	bl	80034b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800276e:	2400      	movs	r4, #0
 8002770:	9401      	str	r4, [sp, #4]
 8002772:	9402      	str	r4, [sp, #8]
 8002774:	9403      	str	r4, [sp, #12]
 8002776:	9404      	str	r4, [sp, #16]
 8002778:	9405      	str	r4, [sp, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800277a:	2309      	movs	r3, #9
 800277c:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800277e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002782:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002784:	2201      	movs	r2, #1
 8002786:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002788:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800278a:	2502      	movs	r5, #2
 800278c:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800278e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002790:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002794:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002796:	a806      	add	r0, sp, #24
 8002798:	f7fe fbf8 	bl	8000f8c <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800279c:	230f      	movs	r3, #15
 800279e:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027a0:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027a2:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027a8:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027aa:	9405      	str	r4, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027ac:	4629      	mov	r1, r5
 80027ae:	a801      	add	r0, sp, #4
 80027b0:	f7fe fe2c 	bl	800140c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80027b4:	b011      	add	sp, #68	; 0x44
 80027b6:	bd30      	pop	{r4, r5, pc}

080027b8 <main>:
{
 80027b8:	b508      	push	{r3, lr}
  HAL_Init();
 80027ba:	f7fd fcf3 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 80027be:	f7ff ffcf 	bl	8002760 <SystemClock_Config>
  MX_GPIO_Init();
 80027c2:	f7ff fe81 	bl	80024c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80027c6:	f7ff fe5d 	bl	8002484 <MX_DMA_Init>
  MX_CAN_Init();
 80027ca:	f7ff fdb9 	bl	8002340 <MX_CAN_Init>
  MX_SPI1_Init();
 80027ce:	f000 f915 	bl	80029fc <MX_SPI1_Init>
  MX_TIM3_Init();
 80027d2:	f000 fb9b 	bl	8002f0c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80027d6:	f000 fbe5 	bl	8002fa4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80027da:	f000 fbfd 	bl	8002fd8 <MX_USART3_UART_Init>
  MX_IWDG_Init();
 80027de:	f7ff fee5 	bl	80025ac <MX_IWDG_Init>
  interfaceInit();
 80027e2:	f7ff fd45 	bl	8002270 <interfaceInit>
  HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80027e6:	2101      	movs	r1, #1
 80027e8:	4804      	ldr	r0, [pc, #16]	; (80027fc <main+0x44>)
 80027ea:	f7fe fb7e 	bl	8000eea <HAL_GPIO_TogglePin>
    telemetrySend();
 80027ee:	f000 fb75 	bl	8002edc <telemetrySend>
    nextionLoop();
 80027f2:	f7ff ff23 	bl	800263c <nextionLoop>
    timerAtualization();
 80027f6:	f7ff fd87 	bl	8002308 <timerAtualization>
  while (1)
 80027fa:	e7f8      	b.n	80027ee <main+0x36>
 80027fc:	40010800 	.word	0x40010800

08002800 <Error_Handler>:
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* USER CODE END Error_Handler_Debug */
}
 8002800:	4770      	bx	lr
	...

08002804 <sendCommand>:
#define NEX_RET_INVALID_OPERATION            (0x1B)

char ENDTERMS[]={255,255,255};

void sendCommand(const char* cmd)
{
 8002804:	b538      	push	{r3, r4, r5, lr}
 8002806:	4604      	mov	r4, r0
   
   while (__HAL_UART_GET_FLAG (&huart3, UART_FLAG_RXNE))
 8002808:	e000      	b.n	800280c <sendCommand+0x8>
   {
      huart3.Instance->DR;
 800280a:	685b      	ldr	r3, [r3, #4]
   while (__HAL_UART_GET_FLAG (&huart3, UART_FLAG_RXNE))
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <sendCommand+0x38>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	f012 0f20 	tst.w	r2, #32
 8002816:	d1f8      	bne.n	800280a <sendCommand+0x6>
   }
   HAL_UART_Transmit (&huart3, (uint8_t*) cmd, strlen (cmd), 50);
 8002818:	4620      	mov	r0, r4
 800281a:	f7fd fc97 	bl	800014c <strlen>
 800281e:	4d07      	ldr	r5, [pc, #28]	; (800283c <sendCommand+0x38>)
 8002820:	2332      	movs	r3, #50	; 0x32
 8002822:	b282      	uxth	r2, r0
 8002824:	4621      	mov	r1, r4
 8002826:	4628      	mov	r0, r5
 8002828:	f7ff f96b 	bl	8001b02 <HAL_UART_Transmit>
   HAL_UART_Transmit (&huart3, (uint8_t*)&ENDTERMS, 3, 50);
 800282c:	2332      	movs	r3, #50	; 0x32
 800282e:	2203      	movs	r2, #3
 8002830:	4903      	ldr	r1, [pc, #12]	; (8002840 <sendCommand+0x3c>)
 8002832:	4628      	mov	r0, r5
 8002834:	f7ff f965 	bl	8001b02 <HAL_UART_Transmit>
}
 8002838:	bd38      	pop	{r3, r4, r5, pc}
 800283a:	bf00      	nop
 800283c:	2000102c 	.word	0x2000102c
 8002840:	20000028 	.word	0x20000028

08002844 <recvRetCommandFinished>:

int recvRetCommandFinished(void)
{
 8002844:	b500      	push	{lr}
 8002846:	b083      	sub	sp, #12
   
   int ret=0;
   uint8_t temp[4]={0};
 8002848:	2300      	movs	r3, #0
 800284a:	9301      	str	r3, [sp, #4]
   HAL_UART_Receive (&huart3, (uint8_t*)&temp, 4, 100);
 800284c:	2364      	movs	r3, #100	; 0x64
 800284e:	2204      	movs	r2, #4
 8002850:	eb0d 0102 	add.w	r1, sp, r2
 8002854:	480f      	ldr	r0, [pc, #60]	; (8002894 <recvRetCommandFinished+0x50>)
 8002856:	f7ff f9c0 	bl	8001bda <HAL_UART_Receive>

   if (temp[0] == NEX_RET_CMD_FINISHED && temp[1]==0xFF && temp[2]==0xFF && temp[3]==0xFF)
 800285a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d003      	beq.n	800286a <recvRetCommandFinished+0x26>
   int ret=0;
 8002862:	2000      	movs	r0, #0
   {
      ret=1;
   }

   return ret;
}
 8002864:	b003      	add	sp, #12
 8002866:	f85d fb04 	ldr.w	pc, [sp], #4
   if (temp[0] == NEX_RET_CMD_FINISHED && temp[1]==0xFF && temp[2]==0xFF && temp[3]==0xFF)
 800286a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800286e:	2bff      	cmp	r3, #255	; 0xff
 8002870:	d001      	beq.n	8002876 <recvRetCommandFinished+0x32>
   int ret=0;
 8002872:	2000      	movs	r0, #0
 8002874:	e7f6      	b.n	8002864 <recvRetCommandFinished+0x20>
   if (temp[0] == NEX_RET_CMD_FINISHED && temp[1]==0xFF && temp[2]==0xFF && temp[3]==0xFF)
 8002876:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800287a:	2bff      	cmp	r3, #255	; 0xff
 800287c:	d001      	beq.n	8002882 <recvRetCommandFinished+0x3e>
   int ret=0;
 800287e:	2000      	movs	r0, #0
 8002880:	e7f0      	b.n	8002864 <recvRetCommandFinished+0x20>
   if (temp[0] == NEX_RET_CMD_FINISHED && temp[1]==0xFF && temp[2]==0xFF && temp[3]==0xFF)
 8002882:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002886:	2bff      	cmp	r3, #255	; 0xff
 8002888:	d001      	beq.n	800288e <recvRetCommandFinished+0x4a>
   int ret=0;
 800288a:	2000      	movs	r0, #0
 800288c:	e7ea      	b.n	8002864 <recvRetCommandFinished+0x20>
      ret=1;
 800288e:	2001      	movs	r0, #1
   return ret;
 8002890:	e7e8      	b.n	8002864 <recvRetCommandFinished+0x20>
 8002892:	bf00      	nop
 8002894:	2000102c 	.word	0x2000102c

08002898 <nexInit>:
   strncpy (buffer, temp, pointer);
   return ret;
}

int nexInit(void)
{
 8002898:	b508      	push	{r3, lr}
   int ret1=0;
   int ret2=0;
   
   sendCommand ("");
 800289a:	4804      	ldr	r0, [pc, #16]	; (80028ac <nexInit+0x14>)
 800289c:	f7ff ffb2 	bl	8002804 <sendCommand>
   sendCommand ("bkcmd=1");
 80028a0:	4803      	ldr	r0, [pc, #12]	; (80028b0 <nexInit+0x18>)
 80028a2:	f7ff ffaf 	bl	8002804 <sendCommand>
   ret1=recvRetCommandFinished  ()  ;
 80028a6:	f7ff ffcd 	bl	8002844 <recvRetCommandFinished>
//   sendCommand ("page 0");
//   ret2=recvRetCommandFinished  ()  ;
//   return ret1&&ret2;
   return ret1;
}
 80028aa:	bd08      	pop	{r3, pc}
 80028ac:	08003e08 	.word	0x08003e08
 80028b0:	08003e14 	.word	0x08003e14

080028b4 <NexPageShow>:

int NexPageShow(int Page)
{
 80028b4:	b500      	push	{lr}
 80028b6:	b085      	sub	sp, #20
 80028b8:	4602      	mov	r2, r0
   char buffer[10]={0};
 80028ba:	2300      	movs	r3, #0
 80028bc:	9301      	str	r3, [sp, #4]
 80028be:	9302      	str	r3, [sp, #8]
 80028c0:	f8ad 300c 	strh.w	r3, [sp, #12]
   sprintf (buffer, "page %d", Page);
 80028c4:	4905      	ldr	r1, [pc, #20]	; (80028dc <NexPageShow+0x28>)
 80028c6:	a801      	add	r0, sp, #4
 80028c8:	f000 fdfc 	bl	80034c4 <siprintf>
   sendCommand (buffer);
 80028cc:	a801      	add	r0, sp, #4
 80028ce:	f7ff ff99 	bl	8002804 <sendCommand>
   return recvRetCommandFinished ();
 80028d2:	f7ff ffb7 	bl	8002844 <recvRetCommandFinished>
}
 80028d6:	b005      	add	sp, #20
 80028d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80028dc:	08003e1c 	.word	0x08003e1c

080028e0 <NexTextSetText>:

int NexTextSetText(int Text,const char *buffer)
{
 80028e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028e2:	b09b      	sub	sp, #108	; 0x6c
 80028e4:	4606      	mov	r6, r0
 80028e6:	460d      	mov	r5, r1
   char cmd[50]={0}, buff[50]={0};
 80028e8:	2400      	movs	r4, #0
 80028ea:	940d      	str	r4, [sp, #52]	; 0x34
 80028ec:	272e      	movs	r7, #46	; 0x2e
 80028ee:	463a      	mov	r2, r7
 80028f0:	4621      	mov	r1, r4
 80028f2:	a80e      	add	r0, sp, #56	; 0x38
 80028f4:	f000 fdde 	bl	80034b4 <memset>
 80028f8:	9400      	str	r4, [sp, #0]
 80028fa:	463a      	mov	r2, r7
 80028fc:	4621      	mov	r1, r4
 80028fe:	a801      	add	r0, sp, #4
 8002900:	f000 fdd8 	bl	80034b4 <memset>
   for (int i=0; i<20; i++) buff[i]=buffer[i];
 8002904:	4623      	mov	r3, r4
 8002906:	e008      	b.n	800291a <NexTextSetText+0x3a>
 8002908:	f815 c003 	ldrb.w	ip, [r5, r3]
 800290c:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002910:	eb0d 0402 	add.w	r4, sp, r2
 8002914:	f804 cc68 	strb.w	ip, [r4, #-104]
 8002918:	3301      	adds	r3, #1
 800291a:	2b13      	cmp	r3, #19
 800291c:	ddf4      	ble.n	8002908 <NexTextSetText+0x28>
   sprintf (cmd, "t%d.txt=\"%s\"",  Text,  buff);
 800291e:	466b      	mov	r3, sp
 8002920:	4632      	mov	r2, r6
 8002922:	4905      	ldr	r1, [pc, #20]	; (8002938 <NexTextSetText+0x58>)
 8002924:	a80d      	add	r0, sp, #52	; 0x34
 8002926:	f000 fdcd 	bl	80034c4 <siprintf>
   sendCommand (cmd);
 800292a:	a80d      	add	r0, sp, #52	; 0x34
 800292c:	f7ff ff6a 	bl	8002804 <sendCommand>
   return recvRetCommandFinished ();
 8002930:	f7ff ff88 	bl	8002844 <recvRetCommandFinished>
}
 8002934:	b01b      	add	sp, #108	; 0x6c
 8002936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002938:	08003e24 	.word	0x08003e24

0800293c <NexNumberSetValue>:
   sendCommand (cmd);
   return recvRetString (buffer, len);
}

int NexNumberSetValue(int Number, int value)
{
 800293c:	b510      	push	{r4, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
   char cmd[15]={0};
 8002944:	2400      	movs	r4, #0
 8002946:	9400      	str	r4, [sp, #0]
 8002948:	9401      	str	r4, [sp, #4]
 800294a:	9402      	str	r4, [sp, #8]
 800294c:	f8cd 400b 	str.w	r4, [sp, #11]
   sprintf (cmd, "n%d.val=%d", Number, value) ;
 8002950:	4905      	ldr	r1, [pc, #20]	; (8002968 <NexNumberSetValue+0x2c>)
 8002952:	4668      	mov	r0, sp
 8002954:	f000 fdb6 	bl	80034c4 <siprintf>
   sendCommand (cmd);
 8002958:	4668      	mov	r0, sp
 800295a:	f7ff ff53 	bl	8002804 <sendCommand>
   return recvRetCommandFinished ();
 800295e:	f7ff ff71 	bl	8002844 <recvRetCommandFinished>
}
 8002962:	b004      	add	sp, #16
 8002964:	bd10      	pop	{r4, pc}
 8002966:	bf00      	nop
 8002968:	08003e40 	.word	0x08003e40

0800296c <NexXfloatSetValue>:
   sendCommand (cmd);
   return recvRetNumber ();
}

int NexXfloatSetValue(int Number, int value)
{
 800296c:	b510      	push	{r4, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
   char cmd[15]={0};
 8002974:	2400      	movs	r4, #0
 8002976:	9400      	str	r4, [sp, #0]
 8002978:	9401      	str	r4, [sp, #4]
 800297a:	9402      	str	r4, [sp, #8]
 800297c:	f8cd 400b 	str.w	r4, [sp, #11]
   sprintf (cmd, "x%d.val=%d", Number, value) ;
 8002980:	4905      	ldr	r1, [pc, #20]	; (8002998 <NexXfloatSetValue+0x2c>)
 8002982:	4668      	mov	r0, sp
 8002984:	f000 fd9e 	bl	80034c4 <siprintf>
   sendCommand (cmd);
 8002988:	4668      	mov	r0, sp
 800298a:	f7ff ff3b 	bl	8002804 <sendCommand>
   return recvRetCommandFinished ();
 800298e:	f7ff ff59 	bl	8002844 <recvRetCommandFinished>
}
 8002992:	b004      	add	sp, #16
 8002994:	bd10      	pop	{r4, pc}
 8002996:	bf00      	nop
 8002998:	08003e58 	.word	0x08003e58

0800299c <NexPictureSetPic>:

int NexPictureSetPic(int pic, int value)
{
 800299c:	b510      	push	{r4, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
   char cmd[15]={0};
 80029a4:	2400      	movs	r4, #0
 80029a6:	9400      	str	r4, [sp, #0]
 80029a8:	9401      	str	r4, [sp, #4]
 80029aa:	9402      	str	r4, [sp, #8]
 80029ac:	f8cd 400b 	str.w	r4, [sp, #11]
   sprintf (cmd, "p%d.pic=%d", pic, value);
 80029b0:	4905      	ldr	r1, [pc, #20]	; (80029c8 <NexPictureSetPic+0x2c>)
 80029b2:	4668      	mov	r0, sp
 80029b4:	f000 fd86 	bl	80034c4 <siprintf>
   sendCommand (cmd);
 80029b8:	4668      	mov	r0, sp
 80029ba:	f7ff ff23 	bl	8002804 <sendCommand>
   return recvRetCommandFinished ();
 80029be:	f7ff ff41 	bl	8002844 <recvRetCommandFinished>
}
 80029c2:	b004      	add	sp, #16
 80029c4:	bd10      	pop	{r4, pc}
 80029c6:	bf00      	nop
 80029c8:	08003e64 	.word	0x08003e64

080029cc <NexVariableSetValue>:
   sendCommand (cmd);
   return recvRetNumber ();
}

int NexVariableSetValue(int Variable,int value )
{
 80029cc:	b510      	push	{r4, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
   char cmd[15]={0};
 80029d4:	2400      	movs	r4, #0
 80029d6:	9400      	str	r4, [sp, #0]
 80029d8:	9401      	str	r4, [sp, #4]
 80029da:	9402      	str	r4, [sp, #8]
 80029dc:	f8cd 400b 	str.w	r4, [sp, #11]
   sprintf (cmd,"va%d.val=%d",Variable,value) ;
 80029e0:	4905      	ldr	r1, [pc, #20]	; (80029f8 <NexVariableSetValue+0x2c>)
 80029e2:	4668      	mov	r0, sp
 80029e4:	f000 fd6e 	bl	80034c4 <siprintf>
   sendCommand (cmd);
 80029e8:	4668      	mov	r0, sp
 80029ea:	f7ff ff0b 	bl	8002804 <sendCommand>
   return recvRetCommandFinished ();
 80029ee:	f7ff ff29 	bl	8002844 <recvRetCommandFinished>
}
 80029f2:	b004      	add	sp, #16
 80029f4:	bd10      	pop	{r4, pc}
 80029f6:	bf00      	nop
 80029f8:	08003f38 	.word	0x08003f38

080029fc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80029fc:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80029fe:	480e      	ldr	r0, [pc, #56]	; (8002a38 <MX_SPI1_Init+0x3c>)
 8002a00:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <MX_SPI1_Init+0x40>)
 8002a02:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a04:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002a08:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a0e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a10:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a12:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a18:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002a1a:	2208      	movs	r2, #8
 8002a1c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a1e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a20:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a22:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a24:	230a      	movs	r3, #10
 8002a26:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a28:	f7fe fdcc 	bl	80015c4 <HAL_SPI_Init>
 8002a2c:	b900      	cbnz	r0, 8002a30 <MX_SPI1_Init+0x34>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a2e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002a30:	f7ff fee6 	bl	8002800 <Error_Handler>
}
 8002a34:	e7fb      	b.n	8002a2e <MX_SPI1_Init+0x32>
 8002a36:	bf00      	nop
 8002a38:	20000f40 	.word	0x20000f40
 8002a3c:	40013000 	.word	0x40013000

08002a40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a40:	b510      	push	{r4, lr}
 8002a42:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	2300      	movs	r3, #0
 8002a46:	9302      	str	r3, [sp, #8]
 8002a48:	9303      	str	r3, [sp, #12]
 8002a4a:	9304      	str	r3, [sp, #16]
 8002a4c:	9305      	str	r3, [sp, #20]
  if(spiHandle->Instance==SPI1)
 8002a4e:	6802      	ldr	r2, [r0, #0]
 8002a50:	4b16      	ldr	r3, [pc, #88]	; (8002aac <HAL_SPI_MspInit+0x6c>)
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d001      	beq.n	8002a5a <HAL_SPI_MspInit+0x1a>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002a56:	b006      	add	sp, #24
 8002a58:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a5a:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8002a5e:	699a      	ldr	r2, [r3, #24]
 8002a60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a64:	619a      	str	r2, [r3, #24]
 8002a66:	699a      	ldr	r2, [r3, #24]
 8002a68:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002a6c:	9200      	str	r2, [sp, #0]
 8002a6e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	f042 0204 	orr.w	r2, r2, #4
 8002a76:	619a      	str	r2, [r3, #24]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	9301      	str	r3, [sp, #4]
 8002a80:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SCK_XBee_Pin|MOSI_XBee_Pin;
 8002a82:	23a0      	movs	r3, #160	; 0xa0
 8002a84:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a86:	2302      	movs	r3, #2
 8002a88:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8e:	4c08      	ldr	r4, [pc, #32]	; (8002ab0 <HAL_SPI_MspInit+0x70>)
 8002a90:	a902      	add	r1, sp, #8
 8002a92:	4620      	mov	r0, r4
 8002a94:	f7fe f90a 	bl	8000cac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MISO_XBee_Pin;
 8002a98:	2340      	movs	r3, #64	; 0x40
 8002a9a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(MISO_XBee_GPIO_Port, &GPIO_InitStruct);
 8002aa2:	a902      	add	r1, sp, #8
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	f7fe f901 	bl	8000cac <HAL_GPIO_Init>
}
 8002aaa:	e7d4      	b.n	8002a56 <HAL_SPI_MspInit+0x16>
 8002aac:	40013000 	.word	0x40013000
 8002ab0:	40010800 	.word	0x40010800

08002ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ab4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <HAL_MspInit+0x3c>)
 8002ab8:	699a      	ldr	r2, [r3, #24]
 8002aba:	f042 0201 	orr.w	r2, r2, #1
 8002abe:	619a      	str	r2, [r3, #24]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	f002 0201 	and.w	r2, r2, #1
 8002ac6:	9200      	str	r2, [sp, #0]
 8002ac8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aca:	69da      	ldr	r2, [r3, #28]
 8002acc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ad0:	61da      	str	r2, [r3, #28]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002adc:	4a05      	ldr	r2, [pc, #20]	; (8002af4 <HAL_MspInit+0x40>)
 8002ade:	6853      	ldr	r3, [r2, #4]
 8002ae0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ae4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ae8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aea:	b002      	add	sp, #8
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40010000 	.word	0x40010000

08002af8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002af8:	4770      	bx	lr

08002afa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002afa:	e7fe      	b.n	8002afa <HardFault_Handler>

08002afc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002afc:	e7fe      	b.n	8002afc <MemManage_Handler>

08002afe <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002afe:	e7fe      	b.n	8002afe <BusFault_Handler>

08002b00 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b00:	e7fe      	b.n	8002b00 <UsageFault_Handler>

08002b02 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b02:	4770      	bx	lr

08002b04 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b04:	4770      	bx	lr

08002b06 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b06:	4770      	bx	lr

08002b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b0a:	f7fd fb5d 	bl	80001c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b0e:	bd08      	pop	{r3, pc}

08002b10 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002b10:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002b12:	4c04      	ldr	r4, [pc, #16]	; (8002b24 <DMA1_Channel3_IRQHandler+0x14>)
 8002b14:	4620      	mov	r0, r4
 8002b16:	f7fe f827 	bl	8000b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
	DMA_IrqHandler(&hdma_usart3_rx, &huart3);
 8002b1a:	4903      	ldr	r1, [pc, #12]	; (8002b28 <DMA1_Channel3_IRQHandler+0x18>)
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	f7ff fb31 	bl	8002184 <DMA_IrqHandler>

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002b22:	bd10      	pop	{r4, pc}
 8002b24:	200010b4 	.word	0x200010b4
 8002b28:	2000102c 	.word	0x2000102c

08002b2c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002b2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002b2e:	4802      	ldr	r0, [pc, #8]	; (8002b38 <DMA1_Channel6_IRQHandler+0xc>)
 8002b30:	f7fe f81a 	bl	8000b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002b34:	bd08      	pop	{r3, pc}
 8002b36:	bf00      	nop
 8002b38:	20001070 	.word	0x20001070

08002b3c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002b3c:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002b3e:	481a      	ldr	r0, [pc, #104]	; (8002ba8 <USB_LP_CAN1_RX0_IRQHandler+0x6c>)
 8002b40:	f7fd fd8c 	bl	800065c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
	if (HAL_GetTick() - timer_actual > 30) {
 8002b44:	f7fd fb4c 	bl	80001e0 <HAL_GetTick>
 8002b48:	4b18      	ldr	r3, [pc, #96]	; (8002bac <USB_LP_CAN1_RX0_IRQHandler+0x70>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	1ac0      	subs	r0, r0, r3
 8002b4e:	281e      	cmp	r0, #30
 8002b50:	d81d      	bhi.n	8002b8e <USB_LP_CAN1_RX0_IRQHandler+0x52>
		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
		timer_actual = HAL_GetTick();
	}

	if (CAN_STATE == 0) {
 8002b52:	4b17      	ldr	r3, [pc, #92]	; (8002bb0 <USB_LP_CAN1_RX0_IRQHandler+0x74>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	b92b      	cbnz	r3, 8002b64 <USB_LP_CAN1_RX0_IRQHandler+0x28>
		CAN_STATE = 1;
 8002b58:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <USB_LP_CAN1_RX0_IRQHandler+0x74>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	701a      	strb	r2, [r3, #0]
		FLAG_ERRO = 0;
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <USB_LP_CAN1_RX0_IRQHandler+0x78>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
	}
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8002b64:	4d14      	ldr	r5, [pc, #80]	; (8002bb8 <USB_LP_CAN1_RX0_IRQHandler+0x7c>)
 8002b66:	4c15      	ldr	r4, [pc, #84]	; (8002bbc <USB_LP_CAN1_RX0_IRQHandler+0x80>)
 8002b68:	462b      	mov	r3, r5
 8002b6a:	4622      	mov	r2, r4
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	480e      	ldr	r0, [pc, #56]	; (8002ba8 <USB_LP_CAN1_RX0_IRQHandler+0x6c>)
 8002b70:	f7fd fcaa 	bl	80004c8 <HAL_CAN_GetRxMessage>
	canMessageReceived(RxHeader.StdId, RxData);
 8002b74:	4629      	mov	r1, r5
 8002b76:	8820      	ldrh	r0, [r4, #0]
 8002b78:	f7ff fbac 	bl	80022d4 <canMessageReceived>
	if (HAL_GetTick() - timer_actual_uart < 500) {
 8002b7c:	f7fd fb30 	bl	80001e0 <HAL_GetTick>
 8002b80:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <USB_LP_CAN1_RX0_IRQHandler+0x84>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	1ac0      	subs	r0, r0, r3
 8002b86:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8002b8a:	d309      	bcc.n	8002ba0 <USB_LP_CAN1_RX0_IRQHandler+0x64>
		HAL_IWDG_Refresh(&hiwdg);
	}

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002b8c:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8002b8e:	2101      	movs	r1, #1
 8002b90:	480c      	ldr	r0, [pc, #48]	; (8002bc4 <USB_LP_CAN1_RX0_IRQHandler+0x88>)
 8002b92:	f7fe f9aa 	bl	8000eea <HAL_GPIO_TogglePin>
		timer_actual = HAL_GetTick();
 8002b96:	f7fd fb23 	bl	80001e0 <HAL_GetTick>
 8002b9a:	4b04      	ldr	r3, [pc, #16]	; (8002bac <USB_LP_CAN1_RX0_IRQHandler+0x70>)
 8002b9c:	6018      	str	r0, [r3, #0]
 8002b9e:	e7d8      	b.n	8002b52 <USB_LP_CAN1_RX0_IRQHandler+0x16>
		HAL_IWDG_Refresh(&hiwdg);
 8002ba0:	4809      	ldr	r0, [pc, #36]	; (8002bc8 <USB_LP_CAN1_RX0_IRQHandler+0x8c>)
 8002ba2:	f7fe f9d7 	bl	8000f54 <HAL_IWDG_Refresh>
}
 8002ba6:	e7f1      	b.n	8002b8c <USB_LP_CAN1_RX0_IRQHandler+0x50>
 8002ba8:	20000e88 	.word	0x20000e88
 8002bac:	20000f98 	.word	0x20000f98
 8002bb0:	20000f34 	.word	0x20000f34
 8002bb4:	20000f3d 	.word	0x20000f3d
 8002bb8:	20000ef4 	.word	0x20000ef4
 8002bbc:	20000f04 	.word	0x20000f04
 8002bc0:	200010f8 	.word	0x200010f8
 8002bc4:	40010800 	.word	0x40010800
 8002bc8:	20000f20 	.word	0x20000f20

08002bcc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002bcc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002bce:	4802      	ldr	r0, [pc, #8]	; (8002bd8 <CAN1_RX1_IRQHandler+0xc>)
 8002bd0:	f7fd fd44 	bl	800065c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002bd4:	bd08      	pop	{r3, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000e88 	.word	0x20000e88

08002bdc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002bdc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002bde:	4c05      	ldr	r4, [pc, #20]	; (8002bf4 <USART2_IRQHandler+0x18>)
 8002be0:	4620      	mov	r0, r4
 8002be2:	f7ff f91d 	bl	8001e20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	USART_IrqHandler(&huart2, &hdma_usart2_rx);
 8002be6:	4904      	ldr	r1, [pc, #16]	; (8002bf8 <USART2_IRQHandler+0x1c>)
 8002be8:	4620      	mov	r0, r4
 8002bea:	f7ff fb27 	bl	800223c <USART_IrqHandler>
	uart2MessageReceived();
 8002bee:	f000 f84b 	bl	8002c88 <uart2MessageReceived>

  /* USER CODE END USART2_IRQn 1 */
}
 8002bf2:	bd10      	pop	{r4, pc}
 8002bf4:	20000fe8 	.word	0x20000fe8
 8002bf8:	20001070 	.word	0x20001070

08002bfc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002bfc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002bfe:	4c05      	ldr	r4, [pc, #20]	; (8002c14 <USART3_IRQHandler+0x18>)
 8002c00:	4620      	mov	r0, r4
 8002c02:	f7ff f90d 	bl	8001e20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
	USART_IrqHandler(&huart3, &hdma_usart3_rx);
 8002c06:	4904      	ldr	r1, [pc, #16]	; (8002c18 <USART3_IRQHandler+0x1c>)
 8002c08:	4620      	mov	r0, r4
 8002c0a:	f7ff fb17 	bl	800223c <USART_IrqHandler>
	uart3MessageReceived();
 8002c0e:	f7ff fce1 	bl	80025d4 <uart3MessageReceived>

  /* USER CODE END USART3_IRQn 1 */
}
 8002c12:	bd10      	pop	{r4, pc}
 8002c14:	2000102c 	.word	0x2000102c
 8002c18:	200010b4 	.word	0x200010b4

08002c1c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <SystemInit+0x40>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	f042 0201 	orr.w	r2, r2, #1
 8002c24:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002c26:	6859      	ldr	r1, [r3, #4]
 8002c28:	4a0d      	ldr	r2, [pc, #52]	; (8002c60 <SystemInit+0x44>)
 8002c2a:	400a      	ands	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002c34:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c38:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c40:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002c48:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002c4a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002c4e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002c50:	4b04      	ldr	r3, [pc, #16]	; (8002c64 <SystemInit+0x48>)
 8002c52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c56:	609a      	str	r2, [r3, #8]
#endif 
}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	f8ff0000 	.word	0xf8ff0000
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <compareString>:
uint8_t _real_clock_received = 0;


uint8_t compareString(uint8_t *first, uint8_t *second, uint16_t len)
{
  while (*first == *second) {
 8002c68:	e001      	b.n	8002c6e <compareString+0x6>

    len--;
    if(len == 0)  return 1; /* Same strings */
     
    first++;
 8002c6a:	3001      	adds	r0, #1
    second++;
 8002c6c:	3101      	adds	r1, #1
  while (*first == *second) {
 8002c6e:	f890 c000 	ldrb.w	ip, [r0]
 8002c72:	780b      	ldrb	r3, [r1, #0]
 8002c74:	459c      	cmp	ip, r3
 8002c76:	d105      	bne.n	8002c84 <compareString+0x1c>
    len--;
 8002c78:	3a01      	subs	r2, #1
 8002c7a:	b292      	uxth	r2, r2
    if(len == 0)  return 1; /* Same strings */
 8002c7c:	2a00      	cmp	r2, #0
 8002c7e:	d1f4      	bne.n	8002c6a <compareString+0x2>
 8002c80:	2001      	movs	r0, #1
  }

  return 0;
}
 8002c82:	4770      	bx	lr
  return 0;
 8002c84:	2000      	movs	r0, #0
 8002c86:	4770      	bx	lr

08002c88 <uart2MessageReceived>:

void uart2MessageReceived(void)
{
 8002c88:	b508      	push	{r3, lr}
  uint16_t checksum = 0;
  uint8_t return_status = 0;
  const uint8_t* ping_request = "ping";


  if(uart_user_message[3] != 0x90)  return; /* If the message received != "Receive Packet" */
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <uart2MessageReceived+0x44>)
 8002c8c:	78db      	ldrb	r3, [r3, #3]
 8002c8e:	2b90      	cmp	r3, #144	; 0x90
 8002c90:	d108      	bne.n	8002ca4 <uart2MessageReceived+0x1c>

  return_status = compareString(uart_user_message + 15, ping_request, 4); /* Comparing if the received message is the xbee ping request */
 8002c92:	2204      	movs	r2, #4
 8002c94:	490e      	ldr	r1, [pc, #56]	; (8002cd0 <uart2MessageReceived+0x48>)
 8002c96:	480f      	ldr	r0, [pc, #60]	; (8002cd4 <uart2MessageReceived+0x4c>)
 8002c98:	f7ff ffe6 	bl	8002c68 <compareString>
  if(return_status) return;
 8002c9c:	b910      	cbnz	r0, 8002ca4 <uart2MessageReceived+0x1c>


  switch (mode)
 8002c9e:	4b0e      	ldr	r3, [pc, #56]	; (8002cd8 <uart2MessageReceived+0x50>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	b103      	cbz	r3, 8002ca6 <uart2MessageReceived+0x1e>
    break;

  default:
    break;
  }
}
 8002ca4:	bd08      	pop	{r3, pc}
	blinkLed3();
 8002ca6:	f7ff fb27 	bl	80022f8 <blinkLed3>
    api_length = uart_user_message[1] << 8;
 8002caa:	4908      	ldr	r1, [pc, #32]	; (8002ccc <uart2MessageReceived+0x44>)
 8002cac:	784b      	ldrb	r3, [r1, #1]
 8002cae:	021b      	lsls	r3, r3, #8
 8002cb0:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <uart2MessageReceived+0x54>)
 8002cb2:	8013      	strh	r3, [r2, #0]
    api_length += uart_user_message[2];
 8002cb4:	7889      	ldrb	r1, [r1, #2]
 8002cb6:	440b      	add	r3, r1
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	8013      	strh	r3, [r2, #0]
    if(api_length > 255)  return; /* If api message length > DMA_RX_BUFFER_SIZE */
 8002cbc:	2bff      	cmp	r3, #255	; 0xff
 8002cbe:	d8f1      	bhi.n	8002ca4 <uart2MessageReceived+0x1c>
    FLAG_ERRO = uart_user_message[15];
 8002cc0:	4b02      	ldr	r3, [pc, #8]	; (8002ccc <uart2MessageReceived+0x44>)
 8002cc2:	7bda      	ldrb	r2, [r3, #15]
 8002cc4:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <uart2MessageReceived+0x58>)
 8002cc6:	701a      	strb	r2, [r3, #0]
    break;
 8002cc8:	e7ec      	b.n	8002ca4 <uart2MessageReceived+0x1c>
 8002cca:	bf00      	nop
 8002ccc:	200001b8 	.word	0x200001b8
 8002cd0:	08003f64 	.word	0x08003f64
 8002cd4:	200001c7 	.word	0x200001c7
 8002cd8:	200010fc 	.word	0x200010fc
 8002cdc:	20000f9c 	.word	0x20000f9c
 8002ce0:	20000f3d 	.word	0x20000f3d

08002ce4 <xbeePacks>:
//  can_vet_tx[7] = can_vector[REAL_CLK_CAN_ID].word_3 >> 8;
//  CAN_Transmit(can_vet_tx, REAL_CLK_CAN_ID);
//}

void xbeePacks(void)
{
 8002ce4:	b510      	push	{r4, lr}
 8002ce6:	b082      	sub	sp, #8
  uint16_t i;

  /*Pack 0*/
  for(i = 260; i < 264; i++)
 8002ce8:	f44f 7482 	mov.w	r4, #260	; 0x104
 8002cec:	e00d      	b.n	8002d0a <xbeePacks+0x26>
    xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1, can_vector[i].word_2, can_vector[i].word_3);
 8002cee:	493b      	ldr	r1, [pc, #236]	; (8002ddc <xbeePacks+0xf8>)
 8002cf0:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
 8002cf4:	88d3      	ldrh	r3, [r2, #6]
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	8893      	ldrh	r3, [r2, #4]
 8002cfa:	8852      	ldrh	r2, [r2, #2]
 8002cfc:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 8002d00:	4620      	mov	r0, r4
 8002d02:	f000 fb05 	bl	8003310 <xbeeSend>
  for(i = 260; i < 264; i++)
 8002d06:	3401      	adds	r4, #1
 8002d08:	b2a4      	uxth	r4, r4
 8002d0a:	f5b4 7f84 	cmp.w	r4, #264	; 0x108
 8002d0e:	d3ee      	bcc.n	8002cee <xbeePacks+0xa>

  /*Pack 1*/
  for(i = 265; i < 269; i++)
 8002d10:	f240 1409 	movw	r4, #265	; 0x109
 8002d14:	e00d      	b.n	8002d32 <xbeePacks+0x4e>
    xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1, can_vector[i].word_2, can_vector[i].word_3);
 8002d16:	4931      	ldr	r1, [pc, #196]	; (8002ddc <xbeePacks+0xf8>)
 8002d18:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
 8002d1c:	88d3      	ldrh	r3, [r2, #6]
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	8893      	ldrh	r3, [r2, #4]
 8002d22:	8852      	ldrh	r2, [r2, #2]
 8002d24:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 8002d28:	4620      	mov	r0, r4
 8002d2a:	f000 faf1 	bl	8003310 <xbeeSend>
  for(i = 265; i < 269; i++)
 8002d2e:	3401      	adds	r4, #1
 8002d30:	b2a4      	uxth	r4, r4
 8002d32:	f5b4 7f86 	cmp.w	r4, #268	; 0x10c
 8002d36:	d9ee      	bls.n	8002d16 <xbeePacks+0x32>

  /*Pack 2*/
  for(i = 270; i < 274; i++)
 8002d38:	f44f 7487 	mov.w	r4, #270	; 0x10e
 8002d3c:	e00d      	b.n	8002d5a <xbeePacks+0x76>
    xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1, can_vector[i].word_2, can_vector[i].word_3);
 8002d3e:	4927      	ldr	r1, [pc, #156]	; (8002ddc <xbeePacks+0xf8>)
 8002d40:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
 8002d44:	88d3      	ldrh	r3, [r2, #6]
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	8893      	ldrh	r3, [r2, #4]
 8002d4a:	8852      	ldrh	r2, [r2, #2]
 8002d4c:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 8002d50:	4620      	mov	r0, r4
 8002d52:	f000 fadd 	bl	8003310 <xbeeSend>
  for(i = 270; i < 274; i++)
 8002d56:	3401      	adds	r4, #1
 8002d58:	b2a4      	uxth	r4, r4
 8002d5a:	f5b4 7f89 	cmp.w	r4, #274	; 0x112
 8002d5e:	d3ee      	bcc.n	8002d3e <xbeePacks+0x5a>

  /*Pack 3*/
  for(i = 275; i < 279; i++)
 8002d60:	f240 1413 	movw	r4, #275	; 0x113
 8002d64:	e00d      	b.n	8002d82 <xbeePacks+0x9e>
    xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1, can_vector[i].word_2, can_vector[i].word_3);
 8002d66:	491d      	ldr	r1, [pc, #116]	; (8002ddc <xbeePacks+0xf8>)
 8002d68:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
 8002d6c:	88d3      	ldrh	r3, [r2, #6]
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	8893      	ldrh	r3, [r2, #4]
 8002d72:	8852      	ldrh	r2, [r2, #2]
 8002d74:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 8002d78:	4620      	mov	r0, r4
 8002d7a:	f000 fac9 	bl	8003310 <xbeeSend>
  for(i = 275; i < 279; i++)
 8002d7e:	3401      	adds	r4, #1
 8002d80:	b2a4      	uxth	r4, r4
 8002d82:	f5b4 7f8b 	cmp.w	r4, #278	; 0x116
 8002d86:	d9ee      	bls.n	8002d66 <xbeePacks+0x82>

  /*Pack 4*/
  for(i = 280; i < 284; i++)
 8002d88:	f44f 748c 	mov.w	r4, #280	; 0x118
 8002d8c:	e00d      	b.n	8002daa <xbeePacks+0xc6>
    xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1, can_vector[i].word_2, can_vector[i].word_3);
 8002d8e:	4913      	ldr	r1, [pc, #76]	; (8002ddc <xbeePacks+0xf8>)
 8002d90:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
 8002d94:	88d3      	ldrh	r3, [r2, #6]
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	8893      	ldrh	r3, [r2, #4]
 8002d9a:	8852      	ldrh	r2, [r2, #2]
 8002d9c:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 8002da0:	4620      	mov	r0, r4
 8002da2:	f000 fab5 	bl	8003310 <xbeeSend>
  for(i = 280; i < 284; i++)
 8002da6:	3401      	adds	r4, #1
 8002da8:	b2a4      	uxth	r4, r4
 8002daa:	f5b4 7f8e 	cmp.w	r4, #284	; 0x11c
 8002dae:	d3ee      	bcc.n	8002d8e <xbeePacks+0xaa>

  /*Pack 5*/
  for(i = 285; i < 289; i++)
 8002db0:	f240 141d 	movw	r4, #285	; 0x11d
 8002db4:	e00d      	b.n	8002dd2 <xbeePacks+0xee>
    xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1, can_vector[i].word_2, can_vector[i].word_3);
 8002db6:	4909      	ldr	r1, [pc, #36]	; (8002ddc <xbeePacks+0xf8>)
 8002db8:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
 8002dbc:	88d3      	ldrh	r3, [r2, #6]
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	8893      	ldrh	r3, [r2, #4]
 8002dc2:	8852      	ldrh	r2, [r2, #2]
 8002dc4:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 8002dc8:	4620      	mov	r0, r4
 8002dca:	f000 faa1 	bl	8003310 <xbeeSend>
  for(i = 285; i < 289; i++)
 8002dce:	3401      	adds	r4, #1
 8002dd0:	b2a4      	uxth	r4, r4
 8002dd2:	f5b4 7f90 	cmp.w	r4, #288	; 0x120
 8002dd6:	d9ee      	bls.n	8002db6 <xbeePacks+0xd2>
}
 8002dd8:	b002      	add	sp, #8
 8002dda:	bd10      	pop	{r4, pc}
 8002ddc:	200002b8 	.word	0x200002b8

08002de0 <xbeeGeneral>:

void xbeeGeneral(void)
{
 8002de0:	b510      	push	{r4, lr}
 8002de2:	b082      	sub	sp, #8
  uint16_t i;

	/*Bateria General Information*/
	xbeeSend(0, can_vector[0].word_0, 0, 0, 0);
 8002de4:	2000      	movs	r0, #0
 8002de6:	9000      	str	r0, [sp, #0]
 8002de8:	4603      	mov	r3, r0
 8002dea:	4602      	mov	r2, r0
 8002dec:	493a      	ldr	r1, [pc, #232]	; (8002ed8 <xbeeGeneral+0xf8>)
 8002dee:	8809      	ldrh	r1, [r1, #0]
 8002df0:	f000 fa8e 	bl	8003310 <xbeeSend>
  for(i = 51; i < 55; i++)
 8002df4:	2433      	movs	r4, #51	; 0x33
 8002df6:	2c36      	cmp	r4, #54	; 0x36
 8002df8:	d80e      	bhi.n	8002e18 <xbeeGeneral+0x38>
    xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1, can_vector[i].word_2, can_vector[i].word_3);
 8002dfa:	4937      	ldr	r1, [pc, #220]	; (8002ed8 <xbeeGeneral+0xf8>)
 8002dfc:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
 8002e00:	88d3      	ldrh	r3, [r2, #6]
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	8893      	ldrh	r3, [r2, #4]
 8002e06:	8852      	ldrh	r2, [r2, #2]
 8002e08:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 8002e0c:	4620      	mov	r0, r4
 8002e0e:	f000 fa7f 	bl	8003310 <xbeeSend>
  for(i = 51; i < 55; i++)
 8002e12:	3401      	adds	r4, #1
 8002e14:	b2a4      	uxth	r4, r4
 8002e16:	e7ee      	b.n	8002df6 <xbeeGeneral+0x16>



	/*Aquisição General Information*/
  xbeeSend(170, can_vector[170].word_0, can_vector[170].word_1, can_vector[170].word_2, can_vector[170].word_3);
 8002e18:	4c2f      	ldr	r4, [pc, #188]	; (8002ed8 <xbeeGeneral+0xf8>)
 8002e1a:	f8b4 3556 	ldrh.w	r3, [r4, #1366]	; 0x556
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	f8b4 3554 	ldrh.w	r3, [r4, #1364]	; 0x554
 8002e24:	f8b4 2552 	ldrh.w	r2, [r4, #1362]	; 0x552
 8002e28:	f8b4 1550 	ldrh.w	r1, [r4, #1360]	; 0x550
 8002e2c:	20aa      	movs	r0, #170	; 0xaa
 8002e2e:	f000 fa6f 	bl	8003310 <xbeeSend>
  xbeeSend(171, can_vector[171].word_0, can_vector[171].word_1, can_vector[171].word_2, can_vector[171].word_3);
 8002e32:	f8b4 355e 	ldrh.w	r3, [r4, #1374]	; 0x55e
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	f8b4 355c 	ldrh.w	r3, [r4, #1372]	; 0x55c
 8002e3c:	f8b4 255a 	ldrh.w	r2, [r4, #1370]	; 0x55a
 8002e40:	f8b4 1558 	ldrh.w	r1, [r4, #1368]	; 0x558
 8002e44:	20ab      	movs	r0, #171	; 0xab
 8002e46:	f000 fa63 	bl	8003310 <xbeeSend>
  xbeeSend(161, can_vector[161].word_0, can_vector[161].word_1, can_vector[161].word_2, can_vector[161].word_3);
 8002e4a:	f8b4 350e 	ldrh.w	r3, [r4, #1294]	; 0x50e
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	f8b4 350c 	ldrh.w	r3, [r4, #1292]	; 0x50c
 8002e54:	f8b4 250a 	ldrh.w	r2, [r4, #1290]	; 0x50a
 8002e58:	f8b4 1508 	ldrh.w	r1, [r4, #1288]	; 0x508
 8002e5c:	20a1      	movs	r0, #161	; 0xa1
 8002e5e:	f000 fa57 	bl	8003310 <xbeeSend>
  xbeeSend(162, can_vector[161].word_0, can_vector[161].word_1, can_vector[161].word_2, can_vector[161].word_3);
 8002e62:	f8b4 350e 	ldrh.w	r3, [r4, #1294]	; 0x50e
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	f8b4 350c 	ldrh.w	r3, [r4, #1292]	; 0x50c
 8002e6c:	f8b4 250a 	ldrh.w	r2, [r4, #1290]	; 0x50a
 8002e70:	f8b4 1508 	ldrh.w	r1, [r4, #1288]	; 0x508
 8002e74:	20a2      	movs	r0, #162	; 0xa2
 8002e76:	f000 fa4b 	bl	8003310 <xbeeSend>
  for(i = 156; i < 160; i++)
 8002e7a:	249c      	movs	r4, #156	; 0x9c
 8002e7c:	2c9f      	cmp	r4, #159	; 0x9f
 8002e7e:	d80e      	bhi.n	8002e9e <xbeeGeneral+0xbe>
    xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1, can_vector[i].word_2, can_vector[i].word_3);
 8002e80:	4915      	ldr	r1, [pc, #84]	; (8002ed8 <xbeeGeneral+0xf8>)
 8002e82:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
 8002e86:	88d3      	ldrh	r3, [r2, #6]
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	8893      	ldrh	r3, [r2, #4]
 8002e8c:	8852      	ldrh	r2, [r2, #2]
 8002e8e:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 8002e92:	4620      	mov	r0, r4
 8002e94:	f000 fa3c 	bl	8003310 <xbeeSend>
  for(i = 156; i < 160; i++)
 8002e98:	3401      	adds	r4, #1
 8002e9a:	b2a4      	uxth	r4, r4
 8002e9c:	e7ee      	b.n	8002e7c <xbeeGeneral+0x9c>


  
	/*Controle Information*/
  xbeeSend(1, can_vector[1].word_0, can_vector[1].word_1, can_vector[1].word_2, can_vector[1].word_3);
 8002e9e:	490e      	ldr	r1, [pc, #56]	; (8002ed8 <xbeeGeneral+0xf8>)
 8002ea0:	89cb      	ldrh	r3, [r1, #14]
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	898b      	ldrh	r3, [r1, #12]
 8002ea6:	894a      	ldrh	r2, [r1, #10]
 8002ea8:	8909      	ldrh	r1, [r1, #8]
 8002eaa:	2001      	movs	r0, #1
 8002eac:	f000 fa30 	bl	8003310 <xbeeSend>
  for(i = 101; i < 108; i++)
 8002eb0:	2465      	movs	r4, #101	; 0x65
 8002eb2:	e00d      	b.n	8002ed0 <xbeeGeneral+0xf0>
    xbeeSend(i, can_vector[i].word_0, can_vector[i].word_1, can_vector[i].word_2, can_vector[i].word_3);
 8002eb4:	4908      	ldr	r1, [pc, #32]	; (8002ed8 <xbeeGeneral+0xf8>)
 8002eb6:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
 8002eba:	88d3      	ldrh	r3, [r2, #6]
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	8893      	ldrh	r3, [r2, #4]
 8002ec0:	8852      	ldrh	r2, [r2, #2]
 8002ec2:	f831 1034 	ldrh.w	r1, [r1, r4, lsl #3]
 8002ec6:	4620      	mov	r0, r4
 8002ec8:	f000 fa22 	bl	8003310 <xbeeSend>
  for(i = 101; i < 108; i++)
 8002ecc:	3401      	adds	r4, #1
 8002ece:	b2a4      	uxth	r4, r4
 8002ed0:	2c6b      	cmp	r4, #107	; 0x6b
 8002ed2:	d9ef      	bls.n	8002eb4 <xbeeGeneral+0xd4>
}
 8002ed4:	b002      	add	sp, #8
 8002ed6:	bd10      	pop	{r4, pc}
 8002ed8:	200002b8 	.word	0x200002b8

08002edc <telemetrySend>:

void telemetrySend(void)
{
 8002edc:	b508      	push	{r3, lr}
  if((actualTimer-packTimer.previous)>packTimer.interval){
 8002ede:	4a09      	ldr	r2, [pc, #36]	; (8002f04 <telemetrySend+0x28>)
 8002ee0:	6811      	ldr	r1, [r2, #0]
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <telemetrySend+0x2c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	1a5b      	subs	r3, r3, r1
 8002ee8:	8892      	ldrh	r2, [r2, #4]
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d802      	bhi.n	8002ef4 <telemetrySend+0x18>
    xbeePacks();
    packTimer.previous = HAL_GetTick();
  }
  xbeeGeneral();
 8002eee:	f7ff ff77 	bl	8002de0 <xbeeGeneral>
}
 8002ef2:	bd08      	pop	{r3, pc}
    xbeePacks();
 8002ef4:	f7ff fef6 	bl	8002ce4 <xbeePacks>
    packTimer.previous = HAL_GetTick();
 8002ef8:	f7fd f972 	bl	80001e0 <HAL_GetTick>
 8002efc:	4b01      	ldr	r3, [pc, #4]	; (8002f04 <telemetrySend+0x28>)
 8002efe:	6018      	str	r0, [r3, #0]
 8002f00:	e7f5      	b.n	8002eee <telemetrySend+0x12>
 8002f02:	bf00      	nop
 8002f04:	20000df8 	.word	0x20000df8
 8002f08:	20000e00 	.word	0x20000e00

08002f0c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002f0c:	b500      	push	{lr}
 8002f0e:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f10:	2300      	movs	r3, #0
 8002f12:	9302      	str	r3, [sp, #8]
 8002f14:	9303      	str	r3, [sp, #12]
 8002f16:	9304      	str	r3, [sp, #16]
 8002f18:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f1e:	4814      	ldr	r0, [pc, #80]	; (8002f70 <MX_TIM3_Init+0x64>)
 8002f20:	4a14      	ldr	r2, [pc, #80]	; (8002f74 <MX_TIM3_Init+0x68>)
 8002f22:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8002f24:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f26:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 8002f28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f2c:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f2e:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f30:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f32:	f7fe fc09 	bl	8001748 <HAL_TIM_Base_Init>
 8002f36:	b990      	cbnz	r0, 8002f5e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f3c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f3e:	a902      	add	r1, sp, #8
 8002f40:	480b      	ldr	r0, [pc, #44]	; (8002f70 <MX_TIM3_Init+0x64>)
 8002f42:	f7fe fc39 	bl	80017b8 <HAL_TIM_ConfigClockSource>
 8002f46:	b968      	cbnz	r0, 8002f64 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f4c:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f4e:	4669      	mov	r1, sp
 8002f50:	4807      	ldr	r0, [pc, #28]	; (8002f70 <MX_TIM3_Init+0x64>)
 8002f52:	f7fe fc9f 	bl	8001894 <HAL_TIMEx_MasterConfigSynchronization>
 8002f56:	b940      	cbnz	r0, 8002f6a <MX_TIM3_Init+0x5e>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f58:	b007      	add	sp, #28
 8002f5a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002f5e:	f7ff fc4f 	bl	8002800 <Error_Handler>
 8002f62:	e7e9      	b.n	8002f38 <MX_TIM3_Init+0x2c>
    Error_Handler();
 8002f64:	f7ff fc4c 	bl	8002800 <Error_Handler>
 8002f68:	e7ee      	b.n	8002f48 <MX_TIM3_Init+0x3c>
    Error_Handler();
 8002f6a:	f7ff fc49 	bl	8002800 <Error_Handler>
}
 8002f6e:	e7f3      	b.n	8002f58 <MX_TIM3_Init+0x4c>
 8002f70:	20000fa0 	.word	0x20000fa0
 8002f74:	40000400 	.word	0x40000400

08002f78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 8002f78:	6802      	ldr	r2, [r0, #0]
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <HAL_TIM_Base_MspInit+0x28>)
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d000      	beq.n	8002f82 <HAL_TIM_Base_MspInit+0xa>
 8002f80:	4770      	bx	lr
{
 8002f82:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f84:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8002f88:	69da      	ldr	r2, [r3, #28]
 8002f8a:	f042 0202 	orr.w	r2, r2, #2
 8002f8e:	61da      	str	r2, [r3, #28]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	9301      	str	r3, [sp, #4]
 8002f98:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002f9a:	b002      	add	sp, #8
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40000400 	.word	0x40000400

08002fa4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002fa4:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fa6:	480a      	ldr	r0, [pc, #40]	; (8002fd0 <MX_USART2_UART_Init+0x2c>)
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <MX_USART2_UART_Init+0x30>)
 8002faa:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8002fac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002fb0:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fb6:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fb8:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fba:	220c      	movs	r2, #12
 8002fbc:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fbe:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fc0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fc2:	f7fe fd6f 	bl	8001aa4 <HAL_UART_Init>
 8002fc6:	b900      	cbnz	r0, 8002fca <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fc8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002fca:	f7ff fc19 	bl	8002800 <Error_Handler>
}
 8002fce:	e7fb      	b.n	8002fc8 <MX_USART2_UART_Init+0x24>
 8002fd0:	20000fe8 	.word	0x20000fe8
 8002fd4:	40004400 	.word	0x40004400

08002fd8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002fd8:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002fda:	480b      	ldr	r0, [pc, #44]	; (8003008 <MX_USART3_UART_Init+0x30>)
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <MX_USART3_UART_Init+0x34>)
 8002fde:	6443      	str	r3, [r0, #68]	; 0x44
  huart3.Init.BaudRate = 115200;
 8002fe0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002fe4:	6483      	str	r3, [r0, #72]	; 0x48
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	64c3      	str	r3, [r0, #76]	; 0x4c
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002fea:	6503      	str	r3, [r0, #80]	; 0x50
  huart3.Init.Parity = UART_PARITY_NONE;
 8002fec:	6543      	str	r3, [r0, #84]	; 0x54
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002fee:	220c      	movs	r2, #12
 8002ff0:	6582      	str	r2, [r0, #88]	; 0x58
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ff2:	65c3      	str	r3, [r0, #92]	; 0x5c
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff4:	6603      	str	r3, [r0, #96]	; 0x60
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ff6:	3044      	adds	r0, #68	; 0x44
 8002ff8:	f7fe fd54 	bl	8001aa4 <HAL_UART_Init>
 8002ffc:	b900      	cbnz	r0, 8003000 <MX_USART3_UART_Init+0x28>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ffe:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003000:	f7ff fbfe 	bl	8002800 <Error_Handler>
}
 8003004:	e7fb      	b.n	8002ffe <MX_USART3_UART_Init+0x26>
 8003006:	bf00      	nop
 8003008:	20000fe8 	.word	0x20000fe8
 800300c:	40004800 	.word	0x40004800

08003010 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003010:	b570      	push	{r4, r5, r6, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003016:	2300      	movs	r3, #0
 8003018:	9304      	str	r3, [sp, #16]
 800301a:	9305      	str	r3, [sp, #20]
 800301c:	9306      	str	r3, [sp, #24]
 800301e:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 8003020:	6803      	ldr	r3, [r0, #0]
 8003022:	4a55      	ldr	r2, [pc, #340]	; (8003178 <HAL_UART_MspInit+0x168>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d004      	beq.n	8003032 <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8003028:	4a54      	ldr	r2, [pc, #336]	; (800317c <HAL_UART_MspInit+0x16c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d051      	beq.n	80030d2 <HAL_UART_MspInit+0xc2>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800302e:	b008      	add	sp, #32
 8003030:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8003032:	4b53      	ldr	r3, [pc, #332]	; (8003180 <HAL_UART_MspInit+0x170>)
 8003034:	69da      	ldr	r2, [r3, #28]
 8003036:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800303a:	61da      	str	r2, [r3, #28]
 800303c:	69da      	ldr	r2, [r3, #28]
 800303e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003042:	9200      	str	r2, [sp, #0]
 8003044:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003046:	699a      	ldr	r2, [r3, #24]
 8003048:	f042 0204 	orr.w	r2, r2, #4
 800304c:	619a      	str	r2, [r3, #24]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	9301      	str	r3, [sp, #4]
 8003056:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART2_TX_XBee_Pin;
 8003058:	2304      	movs	r3, #4
 800305a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305c:	2302      	movs	r3, #2
 800305e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003060:	2303      	movs	r3, #3
 8003062:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(USART2_TX_XBee_GPIO_Port, &GPIO_InitStruct);
 8003064:	4e47      	ldr	r6, [pc, #284]	; (8003184 <HAL_UART_MspInit+0x174>)
 8003066:	a904      	add	r1, sp, #16
 8003068:	4630      	mov	r0, r6
 800306a:	f7fd fe1f 	bl	8000cac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_RX_XBee_Pin;
 800306e:	2308      	movs	r3, #8
 8003070:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003072:	2500      	movs	r5, #0
 8003074:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003076:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(USART2_RX_XBee_GPIO_Port, &GPIO_InitStruct);
 8003078:	a904      	add	r1, sp, #16
 800307a:	4630      	mov	r0, r6
 800307c:	f7fd fe16 	bl	8000cac <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003080:	4841      	ldr	r0, [pc, #260]	; (8003188 <HAL_UART_MspInit+0x178>)
 8003082:	4b42      	ldr	r3, [pc, #264]	; (800318c <HAL_UART_MspInit+0x17c>)
 8003084:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003088:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800308c:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003090:	2380      	movs	r3, #128	; 0x80
 8003092:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003096:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800309a:	f8c0 509c 	str.w	r5, [r0, #156]	; 0x9c
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800309e:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030a2:	f8c0 50a4 	str.w	r5, [r0, #164]	; 0xa4
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80030a6:	3088      	adds	r0, #136	; 0x88
 80030a8:	f7fd fc80 	bl	80009ac <HAL_DMA_Init>
 80030ac:	b970      	cbnz	r0, 80030cc <HAL_UART_MspInit+0xbc>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80030ae:	4b36      	ldr	r3, [pc, #216]	; (8003188 <HAL_UART_MspInit+0x178>)
 80030b0:	f103 0288 	add.w	r2, r3, #136	; 0x88
 80030b4:	63a2      	str	r2, [r4, #56]	; 0x38
 80030b6:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80030ba:	2200      	movs	r2, #0
 80030bc:	4611      	mov	r1, r2
 80030be:	2026      	movs	r0, #38	; 0x26
 80030c0:	f7fd fc04 	bl	80008cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80030c4:	2026      	movs	r0, #38	; 0x26
 80030c6:	f7fd fc39 	bl	800093c <HAL_NVIC_EnableIRQ>
 80030ca:	e7b0      	b.n	800302e <HAL_UART_MspInit+0x1e>
      Error_Handler();
 80030cc:	f7ff fb98 	bl	8002800 <Error_Handler>
 80030d0:	e7ed      	b.n	80030ae <HAL_UART_MspInit+0x9e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80030d2:	4b2b      	ldr	r3, [pc, #172]	; (8003180 <HAL_UART_MspInit+0x170>)
 80030d4:	69da      	ldr	r2, [r3, #28]
 80030d6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80030da:	61da      	str	r2, [r3, #28]
 80030dc:	69da      	ldr	r2, [r3, #28]
 80030de:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80030e2:	9202      	str	r2, [sp, #8]
 80030e4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e6:	699a      	ldr	r2, [r3, #24]
 80030e8:	f042 0208 	orr.w	r2, r2, #8
 80030ec:	619a      	str	r2, [r3, #24]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	9303      	str	r3, [sp, #12]
 80030f6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART3_TX_LCD_Pin;
 80030f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030fc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fe:	2302      	movs	r3, #2
 8003100:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003102:	2303      	movs	r3, #3
 8003104:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(USART3_TX_LCD_GPIO_Port, &GPIO_InitStruct);
 8003106:	4e22      	ldr	r6, [pc, #136]	; (8003190 <HAL_UART_MspInit+0x180>)
 8003108:	a904      	add	r1, sp, #16
 800310a:	4630      	mov	r0, r6
 800310c:	f7fd fdce 	bl	8000cac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RX_LCD_Pin;
 8003110:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003114:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003116:	2500      	movs	r5, #0
 8003118:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(USART3_RX_LCD_GPIO_Port, &GPIO_InitStruct);
 800311c:	a904      	add	r1, sp, #16
 800311e:	4630      	mov	r0, r6
 8003120:	f7fd fdc4 	bl	8000cac <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003124:	4818      	ldr	r0, [pc, #96]	; (8003188 <HAL_UART_MspInit+0x178>)
 8003126:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <HAL_UART_MspInit+0x184>)
 8003128:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800312c:	f8c0 50d0 	str.w	r5, [r0, #208]	; 0xd0
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003130:	f8c0 50d4 	str.w	r5, [r0, #212]	; 0xd4
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800313a:	f8c0 50dc 	str.w	r5, [r0, #220]	; 0xdc
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800313e:	f8c0 50e0 	str.w	r5, [r0, #224]	; 0xe0
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003142:	f8c0 50e4 	str.w	r5, [r0, #228]	; 0xe4
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003146:	f8c0 50e8 	str.w	r5, [r0, #232]	; 0xe8
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800314a:	30cc      	adds	r0, #204	; 0xcc
 800314c:	f7fd fc2e 	bl	80009ac <HAL_DMA_Init>
 8003150:	b970      	cbnz	r0, 8003170 <HAL_UART_MspInit+0x160>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003152:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <HAL_UART_MspInit+0x178>)
 8003154:	f103 02cc 	add.w	r2, r3, #204	; 0xcc
 8003158:	63a2      	str	r2, [r4, #56]	; 0x38
 800315a:	f8c3 40f0 	str.w	r4, [r3, #240]	; 0xf0
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800315e:	2200      	movs	r2, #0
 8003160:	4611      	mov	r1, r2
 8003162:	2027      	movs	r0, #39	; 0x27
 8003164:	f7fd fbb2 	bl	80008cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003168:	2027      	movs	r0, #39	; 0x27
 800316a:	f7fd fbe7 	bl	800093c <HAL_NVIC_EnableIRQ>
}
 800316e:	e75e      	b.n	800302e <HAL_UART_MspInit+0x1e>
      Error_Handler();
 8003170:	f7ff fb46 	bl	8002800 <Error_Handler>
 8003174:	e7ed      	b.n	8003152 <HAL_UART_MspInit+0x142>
 8003176:	bf00      	nop
 8003178:	40004400 	.word	0x40004400
 800317c:	40004800 	.word	0x40004800
 8003180:	40021000 	.word	0x40021000
 8003184:	40010800 	.word	0x40010800
 8003188:	20000fe8 	.word	0x20000fe8
 800318c:	4002006c 	.word	0x4002006c
 8003190:	40010c00 	.word	0x40010c00
 8003194:	40020030 	.word	0x40020030

08003198 <xbeeApiModeSend>:
#include "xbee.h"

SendMode_e mode = BYTES_API;
uint32_t timer_actual_uart = 0;

uint8_t xbeeApiModeSend(char *xbeeBuffer, int buff_size) {
 8003198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800319a:	b089      	sub	sp, #36	; 0x24
 800319c:	4605      	mov	r5, r0
 800319e:	460c      	mov	r4, r1
	/*Send chars through UART (Max 255 chars)*/
	/*Frame with specified address*/
	const char api_start = '\x7E';
 80031a0:	237e      	movs	r3, #126	; 0x7e
 80031a2:	f88d 301f 	strb.w	r3, [sp, #31]
	const char api_frame_type = '\x10';
 80031a6:	2310      	movs	r3, #16
 80031a8:	f88d 301e 	strb.w	r3, [sp, #30]
	const char api_frame_id = '\x00'; /* No response is requested */
 80031ac:	2700      	movs	r7, #0
 80031ae:	f88d 701d 	strb.w	r7, [sp, #29]
	const char api_dest_address_64b[9] = "\x00\x00\x00\x00\x00\x00\xFF\xFF";
 80031b2:	4e53      	ldr	r6, [pc, #332]	; (8003300 <xbeeApiModeSend+0x168>)
 80031b4:	ab05      	add	r3, sp, #20
 80031b6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80031ba:	c303      	stmia	r3!, {r0, r1}
 80031bc:	701a      	strb	r2, [r3, #0]
	const char api_dest_address_16b[3] = "\x00\x00";
 80031be:	68f3      	ldr	r3, [r6, #12]
 80031c0:	f8ad 3010 	strh.w	r3, [sp, #16]
 80031c4:	0c1b      	lsrs	r3, r3, #16
 80031c6:	f88d 3012 	strb.w	r3, [sp, #18]
	const char api_broad_radius = '\x00';
 80031ca:	f88d 700f 	strb.w	r7, [sp, #15]
	const char api_options = '\x40';
 80031ce:	2340      	movs	r3, #64	; 0x40
 80031d0:	f88d 300e 	strb.w	r3, [sp, #14]

	/*Aux variables*/
	int i, length_0;

	/*If the buff size is larger than 255, return 'fail'*/
	if (buff_size > 255)
 80031d4:	2cff      	cmp	r4, #255	; 0xff
 80031d6:	f300 8091 	bgt.w	80032fc <xbeeApiModeSend+0x164>
		return 0;
	length = buff_size + 14; /*The frame length is 14 bytes + msg size*/
 80031da:	f104 060e 	add.w	r6, r4, #14

	/*Checksum calc step by step*/
	checksum = api_frame_type + api_frame_id; /*Sum 'type' and 'ID'*/
 80031de:	2310      	movs	r3, #16
 80031e0:	9302      	str	r3, [sp, #8]
	for (i = 0; i < 8; i++)
 80031e2:	463b      	mov	r3, r7
 80031e4:	e008      	b.n	80031f8 <xbeeApiModeSend+0x60>
		checksum += api_dest_address_64b[i]; /*Sum the 64b address*/
 80031e6:	f103 0220 	add.w	r2, r3, #32
 80031ea:	446a      	add	r2, sp
 80031ec:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 80031f0:	9a02      	ldr	r2, [sp, #8]
 80031f2:	440a      	add	r2, r1
 80031f4:	9202      	str	r2, [sp, #8]
	for (i = 0; i < 8; i++)
 80031f6:	3301      	adds	r3, #1
 80031f8:	2b07      	cmp	r3, #7
 80031fa:	ddf4      	ble.n	80031e6 <xbeeApiModeSend+0x4e>
	for (i = 0; i < 2; i++)
 80031fc:	2300      	movs	r3, #0
 80031fe:	e008      	b.n	8003212 <xbeeApiModeSend+0x7a>
		checksum += api_dest_address_16b[i]; /*Sum the 16b address*/
 8003200:	f103 0220 	add.w	r2, r3, #32
 8003204:	446a      	add	r2, sp
 8003206:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 800320a:	9a02      	ldr	r2, [sp, #8]
 800320c:	440a      	add	r2, r1
 800320e:	9202      	str	r2, [sp, #8]
	for (i = 0; i < 2; i++)
 8003210:	3301      	adds	r3, #1
 8003212:	2b01      	cmp	r3, #1
 8003214:	ddf4      	ble.n	8003200 <xbeeApiModeSend+0x68>
	checksum += api_broad_radius + api_options; /*Sum 'BroadcastRadius' and 'options'*/
 8003216:	9b02      	ldr	r3, [sp, #8]
 8003218:	3340      	adds	r3, #64	; 0x40
 800321a:	9302      	str	r3, [sp, #8]
	for (i = 0; i < buff_size; i++)
 800321c:	2300      	movs	r3, #0
 800321e:	e004      	b.n	800322a <xbeeApiModeSend+0x92>
		checksum += (int) xbeeBuffer[i]; /*Sum the message*/
 8003220:	5ce9      	ldrb	r1, [r5, r3]
 8003222:	9a02      	ldr	r2, [sp, #8]
 8003224:	440a      	add	r2, r1
 8003226:	9202      	str	r2, [sp, #8]
	for (i = 0; i < buff_size; i++)
 8003228:	3301      	adds	r3, #1
 800322a:	42a3      	cmp	r3, r4
 800322c:	dbf8      	blt.n	8003220 <xbeeApiModeSend+0x88>
	checksum = checksum & 0xFF; /*keep only the lowest 8 bits*/
 800322e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003232:	9302      	str	r3, [sp, #8]
	checksum = 255 - checksum; /*Negate it and get checksum*/
 8003234:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8003238:	9302      	str	r3, [sp, #8]


	/*Send message to ID 0013A20041932DE3*/

	HAL_UART_Transmit(&huart2, &api_start, 1, 100); /*Send 'start*/
 800323a:	4f32      	ldr	r7, [pc, #200]	; (8003304 <xbeeApiModeSend+0x16c>)
 800323c:	2364      	movs	r3, #100	; 0x64
 800323e:	2201      	movs	r2, #1
 8003240:	f10d 011f 	add.w	r1, sp, #31
 8003244:	4638      	mov	r0, r7
 8003246:	f7fe fc5c 	bl	8001b02 <HAL_UART_Transmit>
	length_0 = 0xFF00 & length;
 800324a:	f406 437f 	and.w	r3, r6, #65280	; 0xff00
 800324e:	9301      	str	r3, [sp, #4]
	HAL_UART_Transmit(&huart2, &(length_0), 1, 100); /*Send 'length' first byte*/
 8003250:	2364      	movs	r3, #100	; 0x64
 8003252:	2201      	movs	r2, #1
 8003254:	a901      	add	r1, sp, #4
 8003256:	4638      	mov	r0, r7
 8003258:	f7fe fc53 	bl	8001b02 <HAL_UART_Transmit>
	length_0 = 0xFF & length;
 800325c:	b2f6      	uxtb	r6, r6
 800325e:	9601      	str	r6, [sp, #4]
	HAL_UART_Transmit(&huart2, &(length_0), 1, 100); /*Send 'length' second byte*/
 8003260:	2364      	movs	r3, #100	; 0x64
 8003262:	2201      	movs	r2, #1
 8003264:	a901      	add	r1, sp, #4
 8003266:	4638      	mov	r0, r7
 8003268:	f7fe fc4b 	bl	8001b02 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, &api_frame_type, 1, 100); /*Send 'freme type'*/
 800326c:	2364      	movs	r3, #100	; 0x64
 800326e:	2201      	movs	r2, #1
 8003270:	f10d 011e 	add.w	r1, sp, #30
 8003274:	4638      	mov	r0, r7
 8003276:	f7fe fc44 	bl	8001b02 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, &api_frame_id, 1, 100); /*Send 'freme id'*/
 800327a:	2364      	movs	r3, #100	; 0x64
 800327c:	2201      	movs	r2, #1
 800327e:	f10d 011d 	add.w	r1, sp, #29
 8003282:	4638      	mov	r0, r7
 8003284:	f7fe fc3d 	bl	8001b02 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, api_dest_address_64b, 8, 100); /*Send '64b address'*/
 8003288:	2364      	movs	r3, #100	; 0x64
 800328a:	2208      	movs	r2, #8
 800328c:	a905      	add	r1, sp, #20
 800328e:	4638      	mov	r0, r7
 8003290:	f7fe fc37 	bl	8001b02 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, api_dest_address_16b, 2, 100); /*Send '16b address'*/
 8003294:	2364      	movs	r3, #100	; 0x64
 8003296:	2202      	movs	r2, #2
 8003298:	a904      	add	r1, sp, #16
 800329a:	4638      	mov	r0, r7
 800329c:	f7fe fc31 	bl	8001b02 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, &api_broad_radius, 1, 100); /*Send 'freme type'*/
 80032a0:	2364      	movs	r3, #100	; 0x64
 80032a2:	2201      	movs	r2, #1
 80032a4:	f10d 010f 	add.w	r1, sp, #15
 80032a8:	4638      	mov	r0, r7
 80032aa:	f7fe fc2a 	bl	8001b02 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, &api_options, 1, 100); /*Send 'options'*/
 80032ae:	2364      	movs	r3, #100	; 0x64
 80032b0:	2201      	movs	r2, #1
 80032b2:	f10d 010e 	add.w	r1, sp, #14
 80032b6:	4638      	mov	r0, r7
 80032b8:	f7fe fc23 	bl	8001b02 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, xbeeBuffer, buff_size, 100); /*Send the message*/
 80032bc:	2364      	movs	r3, #100	; 0x64
 80032be:	b2a2      	uxth	r2, r4
 80032c0:	4629      	mov	r1, r5
 80032c2:	4638      	mov	r0, r7
 80032c4:	f7fe fc1d 	bl	8001b02 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, &checksum, 1, 100); /*Send 'checksum'*/
 80032c8:	2364      	movs	r3, #100	; 0x64
 80032ca:	2201      	movs	r2, #1
 80032cc:	a902      	add	r1, sp, #8
 80032ce:	4638      	mov	r0, r7
 80032d0:	f7fe fc17 	bl	8001b02 <HAL_UART_Transmit>

	/*Reflesh the whatchDog*/

	if (HAL_GetTick() - timer_actual_uart > 60) {
 80032d4:	f7fc ff84 	bl	80001e0 <HAL_GetTick>
 80032d8:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <xbeeApiModeSend+0x170>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	1ac0      	subs	r0, r0, r3
 80032de:	283c      	cmp	r0, #60	; 0x3c
 80032e0:	d802      	bhi.n	80032e8 <xbeeApiModeSend+0x150>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
		timer_actual_uart = HAL_GetTick();
	}
	return 1; /*Return 'success'*/
 80032e2:	2001      	movs	r0, #1
}
 80032e4:	b009      	add	sp, #36	; 0x24
 80032e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80032e8:	2102      	movs	r1, #2
 80032ea:	4808      	ldr	r0, [pc, #32]	; (800330c <xbeeApiModeSend+0x174>)
 80032ec:	f7fd fdfd 	bl	8000eea <HAL_GPIO_TogglePin>
		timer_actual_uart = HAL_GetTick();
 80032f0:	f7fc ff76 	bl	80001e0 <HAL_GetTick>
 80032f4:	4b04      	ldr	r3, [pc, #16]	; (8003308 <xbeeApiModeSend+0x170>)
 80032f6:	6018      	str	r0, [r3, #0]
	return 1; /*Return 'success'*/
 80032f8:	2001      	movs	r0, #1
 80032fa:	e7f3      	b.n	80032e4 <xbeeApiModeSend+0x14c>
		return 0;
 80032fc:	2000      	movs	r0, #0
 80032fe:	e7f1      	b.n	80032e4 <xbeeApiModeSend+0x14c>
 8003300:	08003de8 	.word	0x08003de8
 8003304:	20000fe8 	.word	0x20000fe8
 8003308:	200010f8 	.word	0x200010f8
 800330c:	40010800 	.word	0x40010800

08003310 <xbeeSend>:
//        	break;
//    }
//}


void xbeeSend(int id, ...) {
 8003310:	b40f      	push	{r0, r1, r2, r3}
 8003312:	b500      	push	{lr}
 8003314:	b0a9      	sub	sp, #164	; 0xa4
 8003316:	ab2a      	add	r3, sp, #168	; 0xa8
 8003318:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	va_start(args, id);
 800331c:	9327      	str	r3, [sp, #156]	; 0x9c

	uint16_t data_word[4];

	for (int i = 0; i < 4; i++) {
 800331e:	2300      	movs	r3, #0
 8003320:	e009      	b.n	8003336 <xbeeSend+0x26>
		data_word[i] = (uint16_t) va_arg(args, int);
 8003322:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8003324:	1d08      	adds	r0, r1, #4
 8003326:	9027      	str	r0, [sp, #156]	; 0x9c
 8003328:	8808      	ldrh	r0, [r1, #0]
 800332a:	a928      	add	r1, sp, #160	; 0xa0
 800332c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8003330:	f821 0c0c 	strh.w	r0, [r1, #-12]
	for (int i = 0; i < 4; i++) {
 8003334:	3301      	adds	r3, #1
 8003336:	2b03      	cmp	r3, #3
 8003338:	ddf3      	ble.n	8003322 <xbeeSend+0x12>
	}
	va_end(args);

	uint8_t xbeeBuffer[128];
	int len;
	switch (mode) {
 800333a:	4b2e      	ldr	r3, [pc, #184]	; (80033f4 <xbeeSend+0xe4>)
 800333c:	791b      	ldrb	r3, [r3, #4]
 800333e:	2b03      	cmp	r3, #3
 8003340:	d812      	bhi.n	8003368 <xbeeSend+0x58>
 8003342:	e8df f003 	tbb	[pc, r3]
 8003346:	1902      	.short	0x1902
 8003348:	432d      	.short	0x432d
	case BYTES_API:
		xbeeBuffer[0] = (id);
 800334a:	f88d 2014 	strb.w	r2, [sp, #20]
		xbeeBuffer[1] = (id >> 8);
 800334e:	1212      	asrs	r2, r2, #8
 8003350:	f88d 2015 	strb.w	r2, [sp, #21]
		memcpy(xbeeBuffer + 2, data_word, 8);
 8003354:	ab25      	add	r3, sp, #148	; 0x94
 8003356:	cb03      	ldmia	r3!, {r0, r1}
 8003358:	f8cd 0016 	str.w	r0, [sp, #22]
 800335c:	f8cd 101a 	str.w	r1, [sp, #26]
		len = 10;
		xbeeApiModeSend(xbeeBuffer, len);
 8003360:	210a      	movs	r1, #10
 8003362:	a805      	add	r0, sp, #20
 8003364:	f7ff ff18 	bl	8003198 <xbeeApiModeSend>
		memcpy(xbeeBuffer + 2, data_word, sizeof(uint16_t) * 4);
		memcpy(xbeeBuffer + 10, '\n', 1);
		HAL_UART_Transmit(&huart2, xbeeBuffer, 11, 100);
	}

	HAL_Delay(DELAY_XBEE);
 8003368:	2000      	movs	r0, #0
 800336a:	f7fc ff3f 	bl	80001ec <HAL_Delay>
}
 800336e:	b029      	add	sp, #164	; 0xa4
 8003370:	f85d eb04 	ldr.w	lr, [sp], #4
 8003374:	b004      	add	sp, #16
 8003376:	4770      	bx	lr
				data_word[1], data_word[2], data_word[3]);
 8003378:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
 800337c:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 8003380:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
		len = sprintf(xbeeBuffer, "%u\t%u\t%u\t%u\t%u", id, data_word[0],
 8003384:	9002      	str	r0, [sp, #8]
 8003386:	9101      	str	r1, [sp, #4]
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 800338e:	491a      	ldr	r1, [pc, #104]	; (80033f8 <xbeeSend+0xe8>)
 8003390:	a805      	add	r0, sp, #20
 8003392:	f000 f897 	bl	80034c4 <siprintf>
 8003396:	4601      	mov	r1, r0
		xbeeApiModeSend(xbeeBuffer, len);
 8003398:	a805      	add	r0, sp, #20
 800339a:	f7ff fefd 	bl	8003198 <xbeeApiModeSend>
		break;
 800339e:	e7e3      	b.n	8003368 <xbeeSend+0x58>
				data_word[1], data_word[2], data_word[3]);
 80033a0:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
 80033a4:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 80033a8:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
		len = sprintf(xbeeBuffer, "%u\t%u\t%u\t%u\t%u\n", id, data_word[0],
 80033ac:	9002      	str	r0, [sp, #8]
 80033ae:	9101      	str	r1, [sp, #4]
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 80033b6:	4911      	ldr	r1, [pc, #68]	; (80033fc <xbeeSend+0xec>)
 80033b8:	a805      	add	r0, sp, #20
 80033ba:	f000 f883 	bl	80034c4 <siprintf>
		HAL_UART_Transmit(&huart2, xbeeBuffer, len, 100);
 80033be:	2364      	movs	r3, #100	; 0x64
 80033c0:	b282      	uxth	r2, r0
 80033c2:	a905      	add	r1, sp, #20
 80033c4:	480e      	ldr	r0, [pc, #56]	; (8003400 <xbeeSend+0xf0>)
 80033c6:	f7fe fb9c 	bl	8001b02 <HAL_UART_Transmit>
		break;
 80033ca:	e7cd      	b.n	8003368 <xbeeSend+0x58>
		memcpy(xbeeBuffer, id, sizeof(uint16_t));
 80033cc:	8813      	ldrh	r3, [r2, #0]
 80033ce:	f8ad 3014 	strh.w	r3, [sp, #20]
		memcpy(xbeeBuffer + 2, data_word, sizeof(uint16_t) * 4);
 80033d2:	ab25      	add	r3, sp, #148	; 0x94
 80033d4:	cb03      	ldmia	r3!, {r0, r1}
 80033d6:	f8cd 0016 	str.w	r0, [sp, #22]
 80033da:	f8cd 101a 	str.w	r1, [sp, #26]
		memcpy(xbeeBuffer + 10, '\n', 1);
 80033de:	2300      	movs	r3, #0
 80033e0:	7a9b      	ldrb	r3, [r3, #10]
 80033e2:	f88d 301e 	strb.w	r3, [sp, #30]
		HAL_UART_Transmit(&huart2, xbeeBuffer, 11, 100);
 80033e6:	2364      	movs	r3, #100	; 0x64
 80033e8:	220b      	movs	r2, #11
 80033ea:	a905      	add	r1, sp, #20
 80033ec:	4804      	ldr	r0, [pc, #16]	; (8003400 <xbeeSend+0xf0>)
 80033ee:	f7fe fb88 	bl	8001b02 <HAL_UART_Transmit>
 80033f2:	e7b9      	b.n	8003368 <xbeeSend+0x58>
 80033f4:	200010f8 	.word	0x200010f8
 80033f8:	08003f6c 	.word	0x08003f6c
 80033fc:	08003f7c 	.word	0x08003f7c
 8003400:	20000fe8 	.word	0x20000fe8

08003404 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003404:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003406:	e003      	b.n	8003410 <LoopCopyDataInit>

08003408 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003408:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800340a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800340c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800340e:	3104      	adds	r1, #4

08003410 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003410:	480a      	ldr	r0, [pc, #40]	; (800343c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003412:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003414:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003416:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003418:	d3f6      	bcc.n	8003408 <CopyDataInit>
  ldr r2, =_sbss
 800341a:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800341c:	e002      	b.n	8003424 <LoopFillZerobss>

0800341e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800341e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003420:	f842 3b04 	str.w	r3, [r2], #4

08003424 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003424:	4b08      	ldr	r3, [pc, #32]	; (8003448 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003426:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003428:	d3f9      	bcc.n	800341e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800342a:	f7ff fbf7 	bl	8002c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800342e:	f000 f80f 	bl	8003450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003432:	f7ff f9c1 	bl	80027b8 <main>
  bx lr
 8003436:	4770      	bx	lr
  ldr r3, =_sidata
 8003438:	08003fc8 	.word	0x08003fc8
  ldr r0, =_sdata
 800343c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003440:	20000094 	.word	0x20000094
  ldr r2, =_sbss
 8003444:	20000094 	.word	0x20000094
  ldr r3, = _ebss
 8003448:	20001114 	.word	0x20001114

0800344c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800344c:	e7fe      	b.n	800344c <ADC1_2_IRQHandler>
	...

08003450 <__libc_init_array>:
 8003450:	b570      	push	{r4, r5, r6, lr}
 8003452:	2600      	movs	r6, #0
 8003454:	4d0c      	ldr	r5, [pc, #48]	; (8003488 <__libc_init_array+0x38>)
 8003456:	4c0d      	ldr	r4, [pc, #52]	; (800348c <__libc_init_array+0x3c>)
 8003458:	1b64      	subs	r4, r4, r5
 800345a:	10a4      	asrs	r4, r4, #2
 800345c:	42a6      	cmp	r6, r4
 800345e:	d109      	bne.n	8003474 <__libc_init_array+0x24>
 8003460:	f000 fcaa 	bl	8003db8 <_init>
 8003464:	2600      	movs	r6, #0
 8003466:	4d0a      	ldr	r5, [pc, #40]	; (8003490 <__libc_init_array+0x40>)
 8003468:	4c0a      	ldr	r4, [pc, #40]	; (8003494 <__libc_init_array+0x44>)
 800346a:	1b64      	subs	r4, r4, r5
 800346c:	10a4      	asrs	r4, r4, #2
 800346e:	42a6      	cmp	r6, r4
 8003470:	d105      	bne.n	800347e <__libc_init_array+0x2e>
 8003472:	bd70      	pop	{r4, r5, r6, pc}
 8003474:	f855 3b04 	ldr.w	r3, [r5], #4
 8003478:	4798      	blx	r3
 800347a:	3601      	adds	r6, #1
 800347c:	e7ee      	b.n	800345c <__libc_init_array+0xc>
 800347e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003482:	4798      	blx	r3
 8003484:	3601      	adds	r6, #1
 8003486:	e7f2      	b.n	800346e <__libc_init_array+0x1e>
 8003488:	08003fc0 	.word	0x08003fc0
 800348c:	08003fc0 	.word	0x08003fc0
 8003490:	08003fc0 	.word	0x08003fc0
 8003494:	08003fc4 	.word	0x08003fc4

08003498 <memcpy>:
 8003498:	440a      	add	r2, r1
 800349a:	4291      	cmp	r1, r2
 800349c:	f100 33ff 	add.w	r3, r0, #4294967295
 80034a0:	d100      	bne.n	80034a4 <memcpy+0xc>
 80034a2:	4770      	bx	lr
 80034a4:	b510      	push	{r4, lr}
 80034a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034aa:	4291      	cmp	r1, r2
 80034ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034b0:	d1f9      	bne.n	80034a6 <memcpy+0xe>
 80034b2:	bd10      	pop	{r4, pc}

080034b4 <memset>:
 80034b4:	4603      	mov	r3, r0
 80034b6:	4402      	add	r2, r0
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d100      	bne.n	80034be <memset+0xa>
 80034bc:	4770      	bx	lr
 80034be:	f803 1b01 	strb.w	r1, [r3], #1
 80034c2:	e7f9      	b.n	80034b8 <memset+0x4>

080034c4 <siprintf>:
 80034c4:	b40e      	push	{r1, r2, r3}
 80034c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80034ca:	b500      	push	{lr}
 80034cc:	b09c      	sub	sp, #112	; 0x70
 80034ce:	ab1d      	add	r3, sp, #116	; 0x74
 80034d0:	9002      	str	r0, [sp, #8]
 80034d2:	9006      	str	r0, [sp, #24]
 80034d4:	9107      	str	r1, [sp, #28]
 80034d6:	9104      	str	r1, [sp, #16]
 80034d8:	4808      	ldr	r0, [pc, #32]	; (80034fc <siprintf+0x38>)
 80034da:	4909      	ldr	r1, [pc, #36]	; (8003500 <siprintf+0x3c>)
 80034dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80034e0:	9105      	str	r1, [sp, #20]
 80034e2:	6800      	ldr	r0, [r0, #0]
 80034e4:	a902      	add	r1, sp, #8
 80034e6:	9301      	str	r3, [sp, #4]
 80034e8:	f000 f868 	bl	80035bc <_svfiprintf_r>
 80034ec:	2200      	movs	r2, #0
 80034ee:	9b02      	ldr	r3, [sp, #8]
 80034f0:	701a      	strb	r2, [r3, #0]
 80034f2:	b01c      	add	sp, #112	; 0x70
 80034f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80034f8:	b003      	add	sp, #12
 80034fa:	4770      	bx	lr
 80034fc:	20000030 	.word	0x20000030
 8003500:	ffff0208 	.word	0xffff0208

08003504 <__ssputs_r>:
 8003504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003508:	688e      	ldr	r6, [r1, #8]
 800350a:	4682      	mov	sl, r0
 800350c:	429e      	cmp	r6, r3
 800350e:	460c      	mov	r4, r1
 8003510:	4690      	mov	r8, r2
 8003512:	461f      	mov	r7, r3
 8003514:	d838      	bhi.n	8003588 <__ssputs_r+0x84>
 8003516:	898a      	ldrh	r2, [r1, #12]
 8003518:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800351c:	d032      	beq.n	8003584 <__ssputs_r+0x80>
 800351e:	6825      	ldr	r5, [r4, #0]
 8003520:	6909      	ldr	r1, [r1, #16]
 8003522:	3301      	adds	r3, #1
 8003524:	eba5 0901 	sub.w	r9, r5, r1
 8003528:	6965      	ldr	r5, [r4, #20]
 800352a:	444b      	add	r3, r9
 800352c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003530:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003534:	106d      	asrs	r5, r5, #1
 8003536:	429d      	cmp	r5, r3
 8003538:	bf38      	it	cc
 800353a:	461d      	movcc	r5, r3
 800353c:	0553      	lsls	r3, r2, #21
 800353e:	d531      	bpl.n	80035a4 <__ssputs_r+0xa0>
 8003540:	4629      	mov	r1, r5
 8003542:	f000 fb61 	bl	8003c08 <_malloc_r>
 8003546:	4606      	mov	r6, r0
 8003548:	b950      	cbnz	r0, 8003560 <__ssputs_r+0x5c>
 800354a:	230c      	movs	r3, #12
 800354c:	f04f 30ff 	mov.w	r0, #4294967295
 8003550:	f8ca 3000 	str.w	r3, [sl]
 8003554:	89a3      	ldrh	r3, [r4, #12]
 8003556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800355a:	81a3      	strh	r3, [r4, #12]
 800355c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003560:	464a      	mov	r2, r9
 8003562:	6921      	ldr	r1, [r4, #16]
 8003564:	f7ff ff98 	bl	8003498 <memcpy>
 8003568:	89a3      	ldrh	r3, [r4, #12]
 800356a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800356e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003572:	81a3      	strh	r3, [r4, #12]
 8003574:	6126      	str	r6, [r4, #16]
 8003576:	444e      	add	r6, r9
 8003578:	6026      	str	r6, [r4, #0]
 800357a:	463e      	mov	r6, r7
 800357c:	6165      	str	r5, [r4, #20]
 800357e:	eba5 0509 	sub.w	r5, r5, r9
 8003582:	60a5      	str	r5, [r4, #8]
 8003584:	42be      	cmp	r6, r7
 8003586:	d900      	bls.n	800358a <__ssputs_r+0x86>
 8003588:	463e      	mov	r6, r7
 800358a:	4632      	mov	r2, r6
 800358c:	4641      	mov	r1, r8
 800358e:	6820      	ldr	r0, [r4, #0]
 8003590:	f000 fab8 	bl	8003b04 <memmove>
 8003594:	68a3      	ldr	r3, [r4, #8]
 8003596:	2000      	movs	r0, #0
 8003598:	1b9b      	subs	r3, r3, r6
 800359a:	60a3      	str	r3, [r4, #8]
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	4433      	add	r3, r6
 80035a0:	6023      	str	r3, [r4, #0]
 80035a2:	e7db      	b.n	800355c <__ssputs_r+0x58>
 80035a4:	462a      	mov	r2, r5
 80035a6:	f000 fba3 	bl	8003cf0 <_realloc_r>
 80035aa:	4606      	mov	r6, r0
 80035ac:	2800      	cmp	r0, #0
 80035ae:	d1e1      	bne.n	8003574 <__ssputs_r+0x70>
 80035b0:	4650      	mov	r0, sl
 80035b2:	6921      	ldr	r1, [r4, #16]
 80035b4:	f000 fac0 	bl	8003b38 <_free_r>
 80035b8:	e7c7      	b.n	800354a <__ssputs_r+0x46>
	...

080035bc <_svfiprintf_r>:
 80035bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035c0:	4698      	mov	r8, r3
 80035c2:	898b      	ldrh	r3, [r1, #12]
 80035c4:	4607      	mov	r7, r0
 80035c6:	061b      	lsls	r3, r3, #24
 80035c8:	460d      	mov	r5, r1
 80035ca:	4614      	mov	r4, r2
 80035cc:	b09d      	sub	sp, #116	; 0x74
 80035ce:	d50e      	bpl.n	80035ee <_svfiprintf_r+0x32>
 80035d0:	690b      	ldr	r3, [r1, #16]
 80035d2:	b963      	cbnz	r3, 80035ee <_svfiprintf_r+0x32>
 80035d4:	2140      	movs	r1, #64	; 0x40
 80035d6:	f000 fb17 	bl	8003c08 <_malloc_r>
 80035da:	6028      	str	r0, [r5, #0]
 80035dc:	6128      	str	r0, [r5, #16]
 80035de:	b920      	cbnz	r0, 80035ea <_svfiprintf_r+0x2e>
 80035e0:	230c      	movs	r3, #12
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	f04f 30ff 	mov.w	r0, #4294967295
 80035e8:	e0d1      	b.n	800378e <_svfiprintf_r+0x1d2>
 80035ea:	2340      	movs	r3, #64	; 0x40
 80035ec:	616b      	str	r3, [r5, #20]
 80035ee:	2300      	movs	r3, #0
 80035f0:	9309      	str	r3, [sp, #36]	; 0x24
 80035f2:	2320      	movs	r3, #32
 80035f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035f8:	2330      	movs	r3, #48	; 0x30
 80035fa:	f04f 0901 	mov.w	r9, #1
 80035fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8003602:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80037a8 <_svfiprintf_r+0x1ec>
 8003606:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800360a:	4623      	mov	r3, r4
 800360c:	469a      	mov	sl, r3
 800360e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003612:	b10a      	cbz	r2, 8003618 <_svfiprintf_r+0x5c>
 8003614:	2a25      	cmp	r2, #37	; 0x25
 8003616:	d1f9      	bne.n	800360c <_svfiprintf_r+0x50>
 8003618:	ebba 0b04 	subs.w	fp, sl, r4
 800361c:	d00b      	beq.n	8003636 <_svfiprintf_r+0x7a>
 800361e:	465b      	mov	r3, fp
 8003620:	4622      	mov	r2, r4
 8003622:	4629      	mov	r1, r5
 8003624:	4638      	mov	r0, r7
 8003626:	f7ff ff6d 	bl	8003504 <__ssputs_r>
 800362a:	3001      	adds	r0, #1
 800362c:	f000 80aa 	beq.w	8003784 <_svfiprintf_r+0x1c8>
 8003630:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003632:	445a      	add	r2, fp
 8003634:	9209      	str	r2, [sp, #36]	; 0x24
 8003636:	f89a 3000 	ldrb.w	r3, [sl]
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 80a2 	beq.w	8003784 <_svfiprintf_r+0x1c8>
 8003640:	2300      	movs	r3, #0
 8003642:	f04f 32ff 	mov.w	r2, #4294967295
 8003646:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800364a:	f10a 0a01 	add.w	sl, sl, #1
 800364e:	9304      	str	r3, [sp, #16]
 8003650:	9307      	str	r3, [sp, #28]
 8003652:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003656:	931a      	str	r3, [sp, #104]	; 0x68
 8003658:	4654      	mov	r4, sl
 800365a:	2205      	movs	r2, #5
 800365c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003660:	4851      	ldr	r0, [pc, #324]	; (80037a8 <_svfiprintf_r+0x1ec>)
 8003662:	f000 fa41 	bl	8003ae8 <memchr>
 8003666:	9a04      	ldr	r2, [sp, #16]
 8003668:	b9d8      	cbnz	r0, 80036a2 <_svfiprintf_r+0xe6>
 800366a:	06d0      	lsls	r0, r2, #27
 800366c:	bf44      	itt	mi
 800366e:	2320      	movmi	r3, #32
 8003670:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003674:	0711      	lsls	r1, r2, #28
 8003676:	bf44      	itt	mi
 8003678:	232b      	movmi	r3, #43	; 0x2b
 800367a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800367e:	f89a 3000 	ldrb.w	r3, [sl]
 8003682:	2b2a      	cmp	r3, #42	; 0x2a
 8003684:	d015      	beq.n	80036b2 <_svfiprintf_r+0xf6>
 8003686:	4654      	mov	r4, sl
 8003688:	2000      	movs	r0, #0
 800368a:	f04f 0c0a 	mov.w	ip, #10
 800368e:	9a07      	ldr	r2, [sp, #28]
 8003690:	4621      	mov	r1, r4
 8003692:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003696:	3b30      	subs	r3, #48	; 0x30
 8003698:	2b09      	cmp	r3, #9
 800369a:	d94e      	bls.n	800373a <_svfiprintf_r+0x17e>
 800369c:	b1b0      	cbz	r0, 80036cc <_svfiprintf_r+0x110>
 800369e:	9207      	str	r2, [sp, #28]
 80036a0:	e014      	b.n	80036cc <_svfiprintf_r+0x110>
 80036a2:	eba0 0308 	sub.w	r3, r0, r8
 80036a6:	fa09 f303 	lsl.w	r3, r9, r3
 80036aa:	4313      	orrs	r3, r2
 80036ac:	46a2      	mov	sl, r4
 80036ae:	9304      	str	r3, [sp, #16]
 80036b0:	e7d2      	b.n	8003658 <_svfiprintf_r+0x9c>
 80036b2:	9b03      	ldr	r3, [sp, #12]
 80036b4:	1d19      	adds	r1, r3, #4
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	9103      	str	r1, [sp, #12]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	bfbb      	ittet	lt
 80036be:	425b      	neglt	r3, r3
 80036c0:	f042 0202 	orrlt.w	r2, r2, #2
 80036c4:	9307      	strge	r3, [sp, #28]
 80036c6:	9307      	strlt	r3, [sp, #28]
 80036c8:	bfb8      	it	lt
 80036ca:	9204      	strlt	r2, [sp, #16]
 80036cc:	7823      	ldrb	r3, [r4, #0]
 80036ce:	2b2e      	cmp	r3, #46	; 0x2e
 80036d0:	d10c      	bne.n	80036ec <_svfiprintf_r+0x130>
 80036d2:	7863      	ldrb	r3, [r4, #1]
 80036d4:	2b2a      	cmp	r3, #42	; 0x2a
 80036d6:	d135      	bne.n	8003744 <_svfiprintf_r+0x188>
 80036d8:	9b03      	ldr	r3, [sp, #12]
 80036da:	3402      	adds	r4, #2
 80036dc:	1d1a      	adds	r2, r3, #4
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	9203      	str	r2, [sp, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	bfb8      	it	lt
 80036e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80036ea:	9305      	str	r3, [sp, #20]
 80036ec:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80037ac <_svfiprintf_r+0x1f0>
 80036f0:	2203      	movs	r2, #3
 80036f2:	4650      	mov	r0, sl
 80036f4:	7821      	ldrb	r1, [r4, #0]
 80036f6:	f000 f9f7 	bl	8003ae8 <memchr>
 80036fa:	b140      	cbz	r0, 800370e <_svfiprintf_r+0x152>
 80036fc:	2340      	movs	r3, #64	; 0x40
 80036fe:	eba0 000a 	sub.w	r0, r0, sl
 8003702:	fa03 f000 	lsl.w	r0, r3, r0
 8003706:	9b04      	ldr	r3, [sp, #16]
 8003708:	3401      	adds	r4, #1
 800370a:	4303      	orrs	r3, r0
 800370c:	9304      	str	r3, [sp, #16]
 800370e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003712:	2206      	movs	r2, #6
 8003714:	4826      	ldr	r0, [pc, #152]	; (80037b0 <_svfiprintf_r+0x1f4>)
 8003716:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800371a:	f000 f9e5 	bl	8003ae8 <memchr>
 800371e:	2800      	cmp	r0, #0
 8003720:	d038      	beq.n	8003794 <_svfiprintf_r+0x1d8>
 8003722:	4b24      	ldr	r3, [pc, #144]	; (80037b4 <_svfiprintf_r+0x1f8>)
 8003724:	bb1b      	cbnz	r3, 800376e <_svfiprintf_r+0x1b2>
 8003726:	9b03      	ldr	r3, [sp, #12]
 8003728:	3307      	adds	r3, #7
 800372a:	f023 0307 	bic.w	r3, r3, #7
 800372e:	3308      	adds	r3, #8
 8003730:	9303      	str	r3, [sp, #12]
 8003732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003734:	4433      	add	r3, r6
 8003736:	9309      	str	r3, [sp, #36]	; 0x24
 8003738:	e767      	b.n	800360a <_svfiprintf_r+0x4e>
 800373a:	460c      	mov	r4, r1
 800373c:	2001      	movs	r0, #1
 800373e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003742:	e7a5      	b.n	8003690 <_svfiprintf_r+0xd4>
 8003744:	2300      	movs	r3, #0
 8003746:	f04f 0c0a 	mov.w	ip, #10
 800374a:	4619      	mov	r1, r3
 800374c:	3401      	adds	r4, #1
 800374e:	9305      	str	r3, [sp, #20]
 8003750:	4620      	mov	r0, r4
 8003752:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003756:	3a30      	subs	r2, #48	; 0x30
 8003758:	2a09      	cmp	r2, #9
 800375a:	d903      	bls.n	8003764 <_svfiprintf_r+0x1a8>
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0c5      	beq.n	80036ec <_svfiprintf_r+0x130>
 8003760:	9105      	str	r1, [sp, #20]
 8003762:	e7c3      	b.n	80036ec <_svfiprintf_r+0x130>
 8003764:	4604      	mov	r4, r0
 8003766:	2301      	movs	r3, #1
 8003768:	fb0c 2101 	mla	r1, ip, r1, r2
 800376c:	e7f0      	b.n	8003750 <_svfiprintf_r+0x194>
 800376e:	ab03      	add	r3, sp, #12
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	462a      	mov	r2, r5
 8003774:	4638      	mov	r0, r7
 8003776:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <_svfiprintf_r+0x1fc>)
 8003778:	a904      	add	r1, sp, #16
 800377a:	f3af 8000 	nop.w
 800377e:	1c42      	adds	r2, r0, #1
 8003780:	4606      	mov	r6, r0
 8003782:	d1d6      	bne.n	8003732 <_svfiprintf_r+0x176>
 8003784:	89ab      	ldrh	r3, [r5, #12]
 8003786:	065b      	lsls	r3, r3, #25
 8003788:	f53f af2c 	bmi.w	80035e4 <_svfiprintf_r+0x28>
 800378c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800378e:	b01d      	add	sp, #116	; 0x74
 8003790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003794:	ab03      	add	r3, sp, #12
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	462a      	mov	r2, r5
 800379a:	4638      	mov	r0, r7
 800379c:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <_svfiprintf_r+0x1fc>)
 800379e:	a904      	add	r1, sp, #16
 80037a0:	f000 f87c 	bl	800389c <_printf_i>
 80037a4:	e7eb      	b.n	800377e <_svfiprintf_r+0x1c2>
 80037a6:	bf00      	nop
 80037a8:	08003f8c 	.word	0x08003f8c
 80037ac:	08003f92 	.word	0x08003f92
 80037b0:	08003f96 	.word	0x08003f96
 80037b4:	00000000 	.word	0x00000000
 80037b8:	08003505 	.word	0x08003505

080037bc <_printf_common>:
 80037bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037c0:	4616      	mov	r6, r2
 80037c2:	4699      	mov	r9, r3
 80037c4:	688a      	ldr	r2, [r1, #8]
 80037c6:	690b      	ldr	r3, [r1, #16]
 80037c8:	4607      	mov	r7, r0
 80037ca:	4293      	cmp	r3, r2
 80037cc:	bfb8      	it	lt
 80037ce:	4613      	movlt	r3, r2
 80037d0:	6033      	str	r3, [r6, #0]
 80037d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037d6:	460c      	mov	r4, r1
 80037d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037dc:	b10a      	cbz	r2, 80037e2 <_printf_common+0x26>
 80037de:	3301      	adds	r3, #1
 80037e0:	6033      	str	r3, [r6, #0]
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	0699      	lsls	r1, r3, #26
 80037e6:	bf42      	ittt	mi
 80037e8:	6833      	ldrmi	r3, [r6, #0]
 80037ea:	3302      	addmi	r3, #2
 80037ec:	6033      	strmi	r3, [r6, #0]
 80037ee:	6825      	ldr	r5, [r4, #0]
 80037f0:	f015 0506 	ands.w	r5, r5, #6
 80037f4:	d106      	bne.n	8003804 <_printf_common+0x48>
 80037f6:	f104 0a19 	add.w	sl, r4, #25
 80037fa:	68e3      	ldr	r3, [r4, #12]
 80037fc:	6832      	ldr	r2, [r6, #0]
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	42ab      	cmp	r3, r5
 8003802:	dc28      	bgt.n	8003856 <_printf_common+0x9a>
 8003804:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003808:	1e13      	subs	r3, r2, #0
 800380a:	6822      	ldr	r2, [r4, #0]
 800380c:	bf18      	it	ne
 800380e:	2301      	movne	r3, #1
 8003810:	0692      	lsls	r2, r2, #26
 8003812:	d42d      	bmi.n	8003870 <_printf_common+0xb4>
 8003814:	4649      	mov	r1, r9
 8003816:	4638      	mov	r0, r7
 8003818:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800381c:	47c0      	blx	r8
 800381e:	3001      	adds	r0, #1
 8003820:	d020      	beq.n	8003864 <_printf_common+0xa8>
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	68e5      	ldr	r5, [r4, #12]
 8003826:	f003 0306 	and.w	r3, r3, #6
 800382a:	2b04      	cmp	r3, #4
 800382c:	bf18      	it	ne
 800382e:	2500      	movne	r5, #0
 8003830:	6832      	ldr	r2, [r6, #0]
 8003832:	f04f 0600 	mov.w	r6, #0
 8003836:	68a3      	ldr	r3, [r4, #8]
 8003838:	bf08      	it	eq
 800383a:	1aad      	subeq	r5, r5, r2
 800383c:	6922      	ldr	r2, [r4, #16]
 800383e:	bf08      	it	eq
 8003840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003844:	4293      	cmp	r3, r2
 8003846:	bfc4      	itt	gt
 8003848:	1a9b      	subgt	r3, r3, r2
 800384a:	18ed      	addgt	r5, r5, r3
 800384c:	341a      	adds	r4, #26
 800384e:	42b5      	cmp	r5, r6
 8003850:	d11a      	bne.n	8003888 <_printf_common+0xcc>
 8003852:	2000      	movs	r0, #0
 8003854:	e008      	b.n	8003868 <_printf_common+0xac>
 8003856:	2301      	movs	r3, #1
 8003858:	4652      	mov	r2, sl
 800385a:	4649      	mov	r1, r9
 800385c:	4638      	mov	r0, r7
 800385e:	47c0      	blx	r8
 8003860:	3001      	adds	r0, #1
 8003862:	d103      	bne.n	800386c <_printf_common+0xb0>
 8003864:	f04f 30ff 	mov.w	r0, #4294967295
 8003868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800386c:	3501      	adds	r5, #1
 800386e:	e7c4      	b.n	80037fa <_printf_common+0x3e>
 8003870:	2030      	movs	r0, #48	; 0x30
 8003872:	18e1      	adds	r1, r4, r3
 8003874:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800387e:	4422      	add	r2, r4
 8003880:	3302      	adds	r3, #2
 8003882:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003886:	e7c5      	b.n	8003814 <_printf_common+0x58>
 8003888:	2301      	movs	r3, #1
 800388a:	4622      	mov	r2, r4
 800388c:	4649      	mov	r1, r9
 800388e:	4638      	mov	r0, r7
 8003890:	47c0      	blx	r8
 8003892:	3001      	adds	r0, #1
 8003894:	d0e6      	beq.n	8003864 <_printf_common+0xa8>
 8003896:	3601      	adds	r6, #1
 8003898:	e7d9      	b.n	800384e <_printf_common+0x92>
	...

0800389c <_printf_i>:
 800389c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038a0:	7e0f      	ldrb	r7, [r1, #24]
 80038a2:	4691      	mov	r9, r2
 80038a4:	2f78      	cmp	r7, #120	; 0x78
 80038a6:	4680      	mov	r8, r0
 80038a8:	460c      	mov	r4, r1
 80038aa:	469a      	mov	sl, r3
 80038ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80038ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80038b2:	d807      	bhi.n	80038c4 <_printf_i+0x28>
 80038b4:	2f62      	cmp	r7, #98	; 0x62
 80038b6:	d80a      	bhi.n	80038ce <_printf_i+0x32>
 80038b8:	2f00      	cmp	r7, #0
 80038ba:	f000 80d9 	beq.w	8003a70 <_printf_i+0x1d4>
 80038be:	2f58      	cmp	r7, #88	; 0x58
 80038c0:	f000 80a4 	beq.w	8003a0c <_printf_i+0x170>
 80038c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038cc:	e03a      	b.n	8003944 <_printf_i+0xa8>
 80038ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038d2:	2b15      	cmp	r3, #21
 80038d4:	d8f6      	bhi.n	80038c4 <_printf_i+0x28>
 80038d6:	a101      	add	r1, pc, #4	; (adr r1, 80038dc <_printf_i+0x40>)
 80038d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038dc:	08003935 	.word	0x08003935
 80038e0:	08003949 	.word	0x08003949
 80038e4:	080038c5 	.word	0x080038c5
 80038e8:	080038c5 	.word	0x080038c5
 80038ec:	080038c5 	.word	0x080038c5
 80038f0:	080038c5 	.word	0x080038c5
 80038f4:	08003949 	.word	0x08003949
 80038f8:	080038c5 	.word	0x080038c5
 80038fc:	080038c5 	.word	0x080038c5
 8003900:	080038c5 	.word	0x080038c5
 8003904:	080038c5 	.word	0x080038c5
 8003908:	08003a57 	.word	0x08003a57
 800390c:	08003979 	.word	0x08003979
 8003910:	08003a39 	.word	0x08003a39
 8003914:	080038c5 	.word	0x080038c5
 8003918:	080038c5 	.word	0x080038c5
 800391c:	08003a79 	.word	0x08003a79
 8003920:	080038c5 	.word	0x080038c5
 8003924:	08003979 	.word	0x08003979
 8003928:	080038c5 	.word	0x080038c5
 800392c:	080038c5 	.word	0x080038c5
 8003930:	08003a41 	.word	0x08003a41
 8003934:	682b      	ldr	r3, [r5, #0]
 8003936:	1d1a      	adds	r2, r3, #4
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	602a      	str	r2, [r5, #0]
 800393c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003940:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003944:	2301      	movs	r3, #1
 8003946:	e0a4      	b.n	8003a92 <_printf_i+0x1f6>
 8003948:	6820      	ldr	r0, [r4, #0]
 800394a:	6829      	ldr	r1, [r5, #0]
 800394c:	0606      	lsls	r6, r0, #24
 800394e:	f101 0304 	add.w	r3, r1, #4
 8003952:	d50a      	bpl.n	800396a <_printf_i+0xce>
 8003954:	680e      	ldr	r6, [r1, #0]
 8003956:	602b      	str	r3, [r5, #0]
 8003958:	2e00      	cmp	r6, #0
 800395a:	da03      	bge.n	8003964 <_printf_i+0xc8>
 800395c:	232d      	movs	r3, #45	; 0x2d
 800395e:	4276      	negs	r6, r6
 8003960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003964:	230a      	movs	r3, #10
 8003966:	485e      	ldr	r0, [pc, #376]	; (8003ae0 <_printf_i+0x244>)
 8003968:	e019      	b.n	800399e <_printf_i+0x102>
 800396a:	680e      	ldr	r6, [r1, #0]
 800396c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003970:	602b      	str	r3, [r5, #0]
 8003972:	bf18      	it	ne
 8003974:	b236      	sxthne	r6, r6
 8003976:	e7ef      	b.n	8003958 <_printf_i+0xbc>
 8003978:	682b      	ldr	r3, [r5, #0]
 800397a:	6820      	ldr	r0, [r4, #0]
 800397c:	1d19      	adds	r1, r3, #4
 800397e:	6029      	str	r1, [r5, #0]
 8003980:	0601      	lsls	r1, r0, #24
 8003982:	d501      	bpl.n	8003988 <_printf_i+0xec>
 8003984:	681e      	ldr	r6, [r3, #0]
 8003986:	e002      	b.n	800398e <_printf_i+0xf2>
 8003988:	0646      	lsls	r6, r0, #25
 800398a:	d5fb      	bpl.n	8003984 <_printf_i+0xe8>
 800398c:	881e      	ldrh	r6, [r3, #0]
 800398e:	2f6f      	cmp	r7, #111	; 0x6f
 8003990:	bf0c      	ite	eq
 8003992:	2308      	moveq	r3, #8
 8003994:	230a      	movne	r3, #10
 8003996:	4852      	ldr	r0, [pc, #328]	; (8003ae0 <_printf_i+0x244>)
 8003998:	2100      	movs	r1, #0
 800399a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800399e:	6865      	ldr	r5, [r4, #4]
 80039a0:	2d00      	cmp	r5, #0
 80039a2:	bfa8      	it	ge
 80039a4:	6821      	ldrge	r1, [r4, #0]
 80039a6:	60a5      	str	r5, [r4, #8]
 80039a8:	bfa4      	itt	ge
 80039aa:	f021 0104 	bicge.w	r1, r1, #4
 80039ae:	6021      	strge	r1, [r4, #0]
 80039b0:	b90e      	cbnz	r6, 80039b6 <_printf_i+0x11a>
 80039b2:	2d00      	cmp	r5, #0
 80039b4:	d04d      	beq.n	8003a52 <_printf_i+0x1b6>
 80039b6:	4615      	mov	r5, r2
 80039b8:	fbb6 f1f3 	udiv	r1, r6, r3
 80039bc:	fb03 6711 	mls	r7, r3, r1, r6
 80039c0:	5dc7      	ldrb	r7, [r0, r7]
 80039c2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80039c6:	4637      	mov	r7, r6
 80039c8:	42bb      	cmp	r3, r7
 80039ca:	460e      	mov	r6, r1
 80039cc:	d9f4      	bls.n	80039b8 <_printf_i+0x11c>
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d10b      	bne.n	80039ea <_printf_i+0x14e>
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	07de      	lsls	r6, r3, #31
 80039d6:	d508      	bpl.n	80039ea <_printf_i+0x14e>
 80039d8:	6923      	ldr	r3, [r4, #16]
 80039da:	6861      	ldr	r1, [r4, #4]
 80039dc:	4299      	cmp	r1, r3
 80039de:	bfde      	ittt	le
 80039e0:	2330      	movle	r3, #48	; 0x30
 80039e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039ea:	1b52      	subs	r2, r2, r5
 80039ec:	6122      	str	r2, [r4, #16]
 80039ee:	464b      	mov	r3, r9
 80039f0:	4621      	mov	r1, r4
 80039f2:	4640      	mov	r0, r8
 80039f4:	f8cd a000 	str.w	sl, [sp]
 80039f8:	aa03      	add	r2, sp, #12
 80039fa:	f7ff fedf 	bl	80037bc <_printf_common>
 80039fe:	3001      	adds	r0, #1
 8003a00:	d14c      	bne.n	8003a9c <_printf_i+0x200>
 8003a02:	f04f 30ff 	mov.w	r0, #4294967295
 8003a06:	b004      	add	sp, #16
 8003a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a0c:	4834      	ldr	r0, [pc, #208]	; (8003ae0 <_printf_i+0x244>)
 8003a0e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003a12:	6829      	ldr	r1, [r5, #0]
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a1a:	6029      	str	r1, [r5, #0]
 8003a1c:	061d      	lsls	r5, r3, #24
 8003a1e:	d514      	bpl.n	8003a4a <_printf_i+0x1ae>
 8003a20:	07df      	lsls	r7, r3, #31
 8003a22:	bf44      	itt	mi
 8003a24:	f043 0320 	orrmi.w	r3, r3, #32
 8003a28:	6023      	strmi	r3, [r4, #0]
 8003a2a:	b91e      	cbnz	r6, 8003a34 <_printf_i+0x198>
 8003a2c:	6823      	ldr	r3, [r4, #0]
 8003a2e:	f023 0320 	bic.w	r3, r3, #32
 8003a32:	6023      	str	r3, [r4, #0]
 8003a34:	2310      	movs	r3, #16
 8003a36:	e7af      	b.n	8003998 <_printf_i+0xfc>
 8003a38:	6823      	ldr	r3, [r4, #0]
 8003a3a:	f043 0320 	orr.w	r3, r3, #32
 8003a3e:	6023      	str	r3, [r4, #0]
 8003a40:	2378      	movs	r3, #120	; 0x78
 8003a42:	4828      	ldr	r0, [pc, #160]	; (8003ae4 <_printf_i+0x248>)
 8003a44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a48:	e7e3      	b.n	8003a12 <_printf_i+0x176>
 8003a4a:	0659      	lsls	r1, r3, #25
 8003a4c:	bf48      	it	mi
 8003a4e:	b2b6      	uxthmi	r6, r6
 8003a50:	e7e6      	b.n	8003a20 <_printf_i+0x184>
 8003a52:	4615      	mov	r5, r2
 8003a54:	e7bb      	b.n	80039ce <_printf_i+0x132>
 8003a56:	682b      	ldr	r3, [r5, #0]
 8003a58:	6826      	ldr	r6, [r4, #0]
 8003a5a:	1d18      	adds	r0, r3, #4
 8003a5c:	6961      	ldr	r1, [r4, #20]
 8003a5e:	6028      	str	r0, [r5, #0]
 8003a60:	0635      	lsls	r5, r6, #24
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	d501      	bpl.n	8003a6a <_printf_i+0x1ce>
 8003a66:	6019      	str	r1, [r3, #0]
 8003a68:	e002      	b.n	8003a70 <_printf_i+0x1d4>
 8003a6a:	0670      	lsls	r0, r6, #25
 8003a6c:	d5fb      	bpl.n	8003a66 <_printf_i+0x1ca>
 8003a6e:	8019      	strh	r1, [r3, #0]
 8003a70:	2300      	movs	r3, #0
 8003a72:	4615      	mov	r5, r2
 8003a74:	6123      	str	r3, [r4, #16]
 8003a76:	e7ba      	b.n	80039ee <_printf_i+0x152>
 8003a78:	682b      	ldr	r3, [r5, #0]
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	1d1a      	adds	r2, r3, #4
 8003a7e:	602a      	str	r2, [r5, #0]
 8003a80:	681d      	ldr	r5, [r3, #0]
 8003a82:	6862      	ldr	r2, [r4, #4]
 8003a84:	4628      	mov	r0, r5
 8003a86:	f000 f82f 	bl	8003ae8 <memchr>
 8003a8a:	b108      	cbz	r0, 8003a90 <_printf_i+0x1f4>
 8003a8c:	1b40      	subs	r0, r0, r5
 8003a8e:	6060      	str	r0, [r4, #4]
 8003a90:	6863      	ldr	r3, [r4, #4]
 8003a92:	6123      	str	r3, [r4, #16]
 8003a94:	2300      	movs	r3, #0
 8003a96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a9a:	e7a8      	b.n	80039ee <_printf_i+0x152>
 8003a9c:	462a      	mov	r2, r5
 8003a9e:	4649      	mov	r1, r9
 8003aa0:	4640      	mov	r0, r8
 8003aa2:	6923      	ldr	r3, [r4, #16]
 8003aa4:	47d0      	blx	sl
 8003aa6:	3001      	adds	r0, #1
 8003aa8:	d0ab      	beq.n	8003a02 <_printf_i+0x166>
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	079b      	lsls	r3, r3, #30
 8003aae:	d413      	bmi.n	8003ad8 <_printf_i+0x23c>
 8003ab0:	68e0      	ldr	r0, [r4, #12]
 8003ab2:	9b03      	ldr	r3, [sp, #12]
 8003ab4:	4298      	cmp	r0, r3
 8003ab6:	bfb8      	it	lt
 8003ab8:	4618      	movlt	r0, r3
 8003aba:	e7a4      	b.n	8003a06 <_printf_i+0x16a>
 8003abc:	2301      	movs	r3, #1
 8003abe:	4632      	mov	r2, r6
 8003ac0:	4649      	mov	r1, r9
 8003ac2:	4640      	mov	r0, r8
 8003ac4:	47d0      	blx	sl
 8003ac6:	3001      	adds	r0, #1
 8003ac8:	d09b      	beq.n	8003a02 <_printf_i+0x166>
 8003aca:	3501      	adds	r5, #1
 8003acc:	68e3      	ldr	r3, [r4, #12]
 8003ace:	9903      	ldr	r1, [sp, #12]
 8003ad0:	1a5b      	subs	r3, r3, r1
 8003ad2:	42ab      	cmp	r3, r5
 8003ad4:	dcf2      	bgt.n	8003abc <_printf_i+0x220>
 8003ad6:	e7eb      	b.n	8003ab0 <_printf_i+0x214>
 8003ad8:	2500      	movs	r5, #0
 8003ada:	f104 0619 	add.w	r6, r4, #25
 8003ade:	e7f5      	b.n	8003acc <_printf_i+0x230>
 8003ae0:	08003f9d 	.word	0x08003f9d
 8003ae4:	08003fae 	.word	0x08003fae

08003ae8 <memchr>:
 8003ae8:	4603      	mov	r3, r0
 8003aea:	b510      	push	{r4, lr}
 8003aec:	b2c9      	uxtb	r1, r1
 8003aee:	4402      	add	r2, r0
 8003af0:	4293      	cmp	r3, r2
 8003af2:	4618      	mov	r0, r3
 8003af4:	d101      	bne.n	8003afa <memchr+0x12>
 8003af6:	2000      	movs	r0, #0
 8003af8:	e003      	b.n	8003b02 <memchr+0x1a>
 8003afa:	7804      	ldrb	r4, [r0, #0]
 8003afc:	3301      	adds	r3, #1
 8003afe:	428c      	cmp	r4, r1
 8003b00:	d1f6      	bne.n	8003af0 <memchr+0x8>
 8003b02:	bd10      	pop	{r4, pc}

08003b04 <memmove>:
 8003b04:	4288      	cmp	r0, r1
 8003b06:	b510      	push	{r4, lr}
 8003b08:	eb01 0402 	add.w	r4, r1, r2
 8003b0c:	d902      	bls.n	8003b14 <memmove+0x10>
 8003b0e:	4284      	cmp	r4, r0
 8003b10:	4623      	mov	r3, r4
 8003b12:	d807      	bhi.n	8003b24 <memmove+0x20>
 8003b14:	1e43      	subs	r3, r0, #1
 8003b16:	42a1      	cmp	r1, r4
 8003b18:	d008      	beq.n	8003b2c <memmove+0x28>
 8003b1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b22:	e7f8      	b.n	8003b16 <memmove+0x12>
 8003b24:	4601      	mov	r1, r0
 8003b26:	4402      	add	r2, r0
 8003b28:	428a      	cmp	r2, r1
 8003b2a:	d100      	bne.n	8003b2e <memmove+0x2a>
 8003b2c:	bd10      	pop	{r4, pc}
 8003b2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b36:	e7f7      	b.n	8003b28 <memmove+0x24>

08003b38 <_free_r>:
 8003b38:	b538      	push	{r3, r4, r5, lr}
 8003b3a:	4605      	mov	r5, r0
 8003b3c:	2900      	cmp	r1, #0
 8003b3e:	d040      	beq.n	8003bc2 <_free_r+0x8a>
 8003b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b44:	1f0c      	subs	r4, r1, #4
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	bfb8      	it	lt
 8003b4a:	18e4      	addlt	r4, r4, r3
 8003b4c:	f000 f910 	bl	8003d70 <__malloc_lock>
 8003b50:	4a1c      	ldr	r2, [pc, #112]	; (8003bc4 <_free_r+0x8c>)
 8003b52:	6813      	ldr	r3, [r2, #0]
 8003b54:	b933      	cbnz	r3, 8003b64 <_free_r+0x2c>
 8003b56:	6063      	str	r3, [r4, #4]
 8003b58:	6014      	str	r4, [r2, #0]
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b60:	f000 b90c 	b.w	8003d7c <__malloc_unlock>
 8003b64:	42a3      	cmp	r3, r4
 8003b66:	d908      	bls.n	8003b7a <_free_r+0x42>
 8003b68:	6820      	ldr	r0, [r4, #0]
 8003b6a:	1821      	adds	r1, r4, r0
 8003b6c:	428b      	cmp	r3, r1
 8003b6e:	bf01      	itttt	eq
 8003b70:	6819      	ldreq	r1, [r3, #0]
 8003b72:	685b      	ldreq	r3, [r3, #4]
 8003b74:	1809      	addeq	r1, r1, r0
 8003b76:	6021      	streq	r1, [r4, #0]
 8003b78:	e7ed      	b.n	8003b56 <_free_r+0x1e>
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	b10b      	cbz	r3, 8003b84 <_free_r+0x4c>
 8003b80:	42a3      	cmp	r3, r4
 8003b82:	d9fa      	bls.n	8003b7a <_free_r+0x42>
 8003b84:	6811      	ldr	r1, [r2, #0]
 8003b86:	1850      	adds	r0, r2, r1
 8003b88:	42a0      	cmp	r0, r4
 8003b8a:	d10b      	bne.n	8003ba4 <_free_r+0x6c>
 8003b8c:	6820      	ldr	r0, [r4, #0]
 8003b8e:	4401      	add	r1, r0
 8003b90:	1850      	adds	r0, r2, r1
 8003b92:	4283      	cmp	r3, r0
 8003b94:	6011      	str	r1, [r2, #0]
 8003b96:	d1e0      	bne.n	8003b5a <_free_r+0x22>
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	4401      	add	r1, r0
 8003b9e:	6011      	str	r1, [r2, #0]
 8003ba0:	6053      	str	r3, [r2, #4]
 8003ba2:	e7da      	b.n	8003b5a <_free_r+0x22>
 8003ba4:	d902      	bls.n	8003bac <_free_r+0x74>
 8003ba6:	230c      	movs	r3, #12
 8003ba8:	602b      	str	r3, [r5, #0]
 8003baa:	e7d6      	b.n	8003b5a <_free_r+0x22>
 8003bac:	6820      	ldr	r0, [r4, #0]
 8003bae:	1821      	adds	r1, r4, r0
 8003bb0:	428b      	cmp	r3, r1
 8003bb2:	bf01      	itttt	eq
 8003bb4:	6819      	ldreq	r1, [r3, #0]
 8003bb6:	685b      	ldreq	r3, [r3, #4]
 8003bb8:	1809      	addeq	r1, r1, r0
 8003bba:	6021      	streq	r1, [r4, #0]
 8003bbc:	6063      	str	r3, [r4, #4]
 8003bbe:	6054      	str	r4, [r2, #4]
 8003bc0:	e7cb      	b.n	8003b5a <_free_r+0x22>
 8003bc2:	bd38      	pop	{r3, r4, r5, pc}
 8003bc4:	20001100 	.word	0x20001100

08003bc8 <sbrk_aligned>:
 8003bc8:	b570      	push	{r4, r5, r6, lr}
 8003bca:	4e0e      	ldr	r6, [pc, #56]	; (8003c04 <sbrk_aligned+0x3c>)
 8003bcc:	460c      	mov	r4, r1
 8003bce:	6831      	ldr	r1, [r6, #0]
 8003bd0:	4605      	mov	r5, r0
 8003bd2:	b911      	cbnz	r1, 8003bda <sbrk_aligned+0x12>
 8003bd4:	f000 f8bc 	bl	8003d50 <_sbrk_r>
 8003bd8:	6030      	str	r0, [r6, #0]
 8003bda:	4621      	mov	r1, r4
 8003bdc:	4628      	mov	r0, r5
 8003bde:	f000 f8b7 	bl	8003d50 <_sbrk_r>
 8003be2:	1c43      	adds	r3, r0, #1
 8003be4:	d00a      	beq.n	8003bfc <sbrk_aligned+0x34>
 8003be6:	1cc4      	adds	r4, r0, #3
 8003be8:	f024 0403 	bic.w	r4, r4, #3
 8003bec:	42a0      	cmp	r0, r4
 8003bee:	d007      	beq.n	8003c00 <sbrk_aligned+0x38>
 8003bf0:	1a21      	subs	r1, r4, r0
 8003bf2:	4628      	mov	r0, r5
 8003bf4:	f000 f8ac 	bl	8003d50 <_sbrk_r>
 8003bf8:	3001      	adds	r0, #1
 8003bfa:	d101      	bne.n	8003c00 <sbrk_aligned+0x38>
 8003bfc:	f04f 34ff 	mov.w	r4, #4294967295
 8003c00:	4620      	mov	r0, r4
 8003c02:	bd70      	pop	{r4, r5, r6, pc}
 8003c04:	20001104 	.word	0x20001104

08003c08 <_malloc_r>:
 8003c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c0c:	1ccd      	adds	r5, r1, #3
 8003c0e:	f025 0503 	bic.w	r5, r5, #3
 8003c12:	3508      	adds	r5, #8
 8003c14:	2d0c      	cmp	r5, #12
 8003c16:	bf38      	it	cc
 8003c18:	250c      	movcc	r5, #12
 8003c1a:	2d00      	cmp	r5, #0
 8003c1c:	4607      	mov	r7, r0
 8003c1e:	db01      	blt.n	8003c24 <_malloc_r+0x1c>
 8003c20:	42a9      	cmp	r1, r5
 8003c22:	d905      	bls.n	8003c30 <_malloc_r+0x28>
 8003c24:	230c      	movs	r3, #12
 8003c26:	2600      	movs	r6, #0
 8003c28:	603b      	str	r3, [r7, #0]
 8003c2a:	4630      	mov	r0, r6
 8003c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c30:	4e2e      	ldr	r6, [pc, #184]	; (8003cec <_malloc_r+0xe4>)
 8003c32:	f000 f89d 	bl	8003d70 <__malloc_lock>
 8003c36:	6833      	ldr	r3, [r6, #0]
 8003c38:	461c      	mov	r4, r3
 8003c3a:	bb34      	cbnz	r4, 8003c8a <_malloc_r+0x82>
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	4638      	mov	r0, r7
 8003c40:	f7ff ffc2 	bl	8003bc8 <sbrk_aligned>
 8003c44:	1c43      	adds	r3, r0, #1
 8003c46:	4604      	mov	r4, r0
 8003c48:	d14d      	bne.n	8003ce6 <_malloc_r+0xde>
 8003c4a:	6834      	ldr	r4, [r6, #0]
 8003c4c:	4626      	mov	r6, r4
 8003c4e:	2e00      	cmp	r6, #0
 8003c50:	d140      	bne.n	8003cd4 <_malloc_r+0xcc>
 8003c52:	6823      	ldr	r3, [r4, #0]
 8003c54:	4631      	mov	r1, r6
 8003c56:	4638      	mov	r0, r7
 8003c58:	eb04 0803 	add.w	r8, r4, r3
 8003c5c:	f000 f878 	bl	8003d50 <_sbrk_r>
 8003c60:	4580      	cmp	r8, r0
 8003c62:	d13a      	bne.n	8003cda <_malloc_r+0xd2>
 8003c64:	6821      	ldr	r1, [r4, #0]
 8003c66:	3503      	adds	r5, #3
 8003c68:	1a6d      	subs	r5, r5, r1
 8003c6a:	f025 0503 	bic.w	r5, r5, #3
 8003c6e:	3508      	adds	r5, #8
 8003c70:	2d0c      	cmp	r5, #12
 8003c72:	bf38      	it	cc
 8003c74:	250c      	movcc	r5, #12
 8003c76:	4638      	mov	r0, r7
 8003c78:	4629      	mov	r1, r5
 8003c7a:	f7ff ffa5 	bl	8003bc8 <sbrk_aligned>
 8003c7e:	3001      	adds	r0, #1
 8003c80:	d02b      	beq.n	8003cda <_malloc_r+0xd2>
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	442b      	add	r3, r5
 8003c86:	6023      	str	r3, [r4, #0]
 8003c88:	e00e      	b.n	8003ca8 <_malloc_r+0xa0>
 8003c8a:	6822      	ldr	r2, [r4, #0]
 8003c8c:	1b52      	subs	r2, r2, r5
 8003c8e:	d41e      	bmi.n	8003cce <_malloc_r+0xc6>
 8003c90:	2a0b      	cmp	r2, #11
 8003c92:	d916      	bls.n	8003cc2 <_malloc_r+0xba>
 8003c94:	1961      	adds	r1, r4, r5
 8003c96:	42a3      	cmp	r3, r4
 8003c98:	6025      	str	r5, [r4, #0]
 8003c9a:	bf18      	it	ne
 8003c9c:	6059      	strne	r1, [r3, #4]
 8003c9e:	6863      	ldr	r3, [r4, #4]
 8003ca0:	bf08      	it	eq
 8003ca2:	6031      	streq	r1, [r6, #0]
 8003ca4:	5162      	str	r2, [r4, r5]
 8003ca6:	604b      	str	r3, [r1, #4]
 8003ca8:	4638      	mov	r0, r7
 8003caa:	f104 060b 	add.w	r6, r4, #11
 8003cae:	f000 f865 	bl	8003d7c <__malloc_unlock>
 8003cb2:	f026 0607 	bic.w	r6, r6, #7
 8003cb6:	1d23      	adds	r3, r4, #4
 8003cb8:	1af2      	subs	r2, r6, r3
 8003cba:	d0b6      	beq.n	8003c2a <_malloc_r+0x22>
 8003cbc:	1b9b      	subs	r3, r3, r6
 8003cbe:	50a3      	str	r3, [r4, r2]
 8003cc0:	e7b3      	b.n	8003c2a <_malloc_r+0x22>
 8003cc2:	6862      	ldr	r2, [r4, #4]
 8003cc4:	42a3      	cmp	r3, r4
 8003cc6:	bf0c      	ite	eq
 8003cc8:	6032      	streq	r2, [r6, #0]
 8003cca:	605a      	strne	r2, [r3, #4]
 8003ccc:	e7ec      	b.n	8003ca8 <_malloc_r+0xa0>
 8003cce:	4623      	mov	r3, r4
 8003cd0:	6864      	ldr	r4, [r4, #4]
 8003cd2:	e7b2      	b.n	8003c3a <_malloc_r+0x32>
 8003cd4:	4634      	mov	r4, r6
 8003cd6:	6876      	ldr	r6, [r6, #4]
 8003cd8:	e7b9      	b.n	8003c4e <_malloc_r+0x46>
 8003cda:	230c      	movs	r3, #12
 8003cdc:	4638      	mov	r0, r7
 8003cde:	603b      	str	r3, [r7, #0]
 8003ce0:	f000 f84c 	bl	8003d7c <__malloc_unlock>
 8003ce4:	e7a1      	b.n	8003c2a <_malloc_r+0x22>
 8003ce6:	6025      	str	r5, [r4, #0]
 8003ce8:	e7de      	b.n	8003ca8 <_malloc_r+0xa0>
 8003cea:	bf00      	nop
 8003cec:	20001100 	.word	0x20001100

08003cf0 <_realloc_r>:
 8003cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cf4:	4680      	mov	r8, r0
 8003cf6:	4614      	mov	r4, r2
 8003cf8:	460e      	mov	r6, r1
 8003cfa:	b921      	cbnz	r1, 8003d06 <_realloc_r+0x16>
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d02:	f7ff bf81 	b.w	8003c08 <_malloc_r>
 8003d06:	b92a      	cbnz	r2, 8003d14 <_realloc_r+0x24>
 8003d08:	f7ff ff16 	bl	8003b38 <_free_r>
 8003d0c:	4625      	mov	r5, r4
 8003d0e:	4628      	mov	r0, r5
 8003d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d14:	f000 f838 	bl	8003d88 <_malloc_usable_size_r>
 8003d18:	4284      	cmp	r4, r0
 8003d1a:	4607      	mov	r7, r0
 8003d1c:	d802      	bhi.n	8003d24 <_realloc_r+0x34>
 8003d1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003d22:	d812      	bhi.n	8003d4a <_realloc_r+0x5a>
 8003d24:	4621      	mov	r1, r4
 8003d26:	4640      	mov	r0, r8
 8003d28:	f7ff ff6e 	bl	8003c08 <_malloc_r>
 8003d2c:	4605      	mov	r5, r0
 8003d2e:	2800      	cmp	r0, #0
 8003d30:	d0ed      	beq.n	8003d0e <_realloc_r+0x1e>
 8003d32:	42bc      	cmp	r4, r7
 8003d34:	4622      	mov	r2, r4
 8003d36:	4631      	mov	r1, r6
 8003d38:	bf28      	it	cs
 8003d3a:	463a      	movcs	r2, r7
 8003d3c:	f7ff fbac 	bl	8003498 <memcpy>
 8003d40:	4631      	mov	r1, r6
 8003d42:	4640      	mov	r0, r8
 8003d44:	f7ff fef8 	bl	8003b38 <_free_r>
 8003d48:	e7e1      	b.n	8003d0e <_realloc_r+0x1e>
 8003d4a:	4635      	mov	r5, r6
 8003d4c:	e7df      	b.n	8003d0e <_realloc_r+0x1e>
	...

08003d50 <_sbrk_r>:
 8003d50:	b538      	push	{r3, r4, r5, lr}
 8003d52:	2300      	movs	r3, #0
 8003d54:	4d05      	ldr	r5, [pc, #20]	; (8003d6c <_sbrk_r+0x1c>)
 8003d56:	4604      	mov	r4, r0
 8003d58:	4608      	mov	r0, r1
 8003d5a:	602b      	str	r3, [r5, #0]
 8003d5c:	f000 f81e 	bl	8003d9c <_sbrk>
 8003d60:	1c43      	adds	r3, r0, #1
 8003d62:	d102      	bne.n	8003d6a <_sbrk_r+0x1a>
 8003d64:	682b      	ldr	r3, [r5, #0]
 8003d66:	b103      	cbz	r3, 8003d6a <_sbrk_r+0x1a>
 8003d68:	6023      	str	r3, [r4, #0]
 8003d6a:	bd38      	pop	{r3, r4, r5, pc}
 8003d6c:	20001108 	.word	0x20001108

08003d70 <__malloc_lock>:
 8003d70:	4801      	ldr	r0, [pc, #4]	; (8003d78 <__malloc_lock+0x8>)
 8003d72:	f000 b811 	b.w	8003d98 <__retarget_lock_acquire_recursive>
 8003d76:	bf00      	nop
 8003d78:	2000110c 	.word	0x2000110c

08003d7c <__malloc_unlock>:
 8003d7c:	4801      	ldr	r0, [pc, #4]	; (8003d84 <__malloc_unlock+0x8>)
 8003d7e:	f000 b80c 	b.w	8003d9a <__retarget_lock_release_recursive>
 8003d82:	bf00      	nop
 8003d84:	2000110c 	.word	0x2000110c

08003d88 <_malloc_usable_size_r>:
 8003d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d8c:	1f18      	subs	r0, r3, #4
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	bfbc      	itt	lt
 8003d92:	580b      	ldrlt	r3, [r1, r0]
 8003d94:	18c0      	addlt	r0, r0, r3
 8003d96:	4770      	bx	lr

08003d98 <__retarget_lock_acquire_recursive>:
 8003d98:	4770      	bx	lr

08003d9a <__retarget_lock_release_recursive>:
 8003d9a:	4770      	bx	lr

08003d9c <_sbrk>:
 8003d9c:	4a04      	ldr	r2, [pc, #16]	; (8003db0 <_sbrk+0x14>)
 8003d9e:	4603      	mov	r3, r0
 8003da0:	6811      	ldr	r1, [r2, #0]
 8003da2:	b909      	cbnz	r1, 8003da8 <_sbrk+0xc>
 8003da4:	4903      	ldr	r1, [pc, #12]	; (8003db4 <_sbrk+0x18>)
 8003da6:	6011      	str	r1, [r2, #0]
 8003da8:	6810      	ldr	r0, [r2, #0]
 8003daa:	4403      	add	r3, r0
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	4770      	bx	lr
 8003db0:	20001110 	.word	0x20001110
 8003db4:	20001118 	.word	0x20001118

08003db8 <_init>:
 8003db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dba:	bf00      	nop
 8003dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dbe:	bc08      	pop	{r3}
 8003dc0:	469e      	mov	lr, r3
 8003dc2:	4770      	bx	lr

08003dc4 <_fini>:
 8003dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc6:	bf00      	nop
 8003dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dca:	bc08      	pop	{r3}
 8003dcc:	469e      	mov	lr, r3
 8003dce:	4770      	bx	lr
